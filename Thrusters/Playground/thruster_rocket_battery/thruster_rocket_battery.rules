Part : <../base_part_terran.rules>/Part
{
	NameKey = "Parts/ThrusterRocketBattery"
	IconNameKey = "Parts/ThrusterRocketBatteryIcon"
	ID = cosmoteer.thruster_rocket_battery // Part IDs must always be in the form of "author_name.part_name". If making your own mod, do *not* use "cosmoteer" as your author name, because it may conflict with future vanilla parts.
	EditorGroup = "Flight"
	DescriptionKey = "Parts/ThrusterRocketBatteryDesc"
	Resources
	[
		[steel, 20]
		[coil, 10]
	]
	TypeCategories = [thruster, uses_power]
	Size = [1, 2]
	MaxHealth = 2000
	ReceivableBuffs : ^/0/ReceivableBuffs [Engine]
	MaxBuffValues = { Engine=100% }
	AllowedDoorLocations
	[
		[-1, 0]
		[0, -1]
		[1, 0]
	]
	EditorIcon
	{
		Texture
		{
			File = "icon.png"
			SampleMode = Linear
		}
		Size = [32, 64]
	}
	Components : ^/0/Components
	{
		ModuleIsConnected
		{
			Type = MultiToggle
			Toggles = [ModuleIsConnectedLeft, ModuleIsConnectedRight]
			Mode = Any
		}
		ModuleIsConnectedLeft
		{
			Type = ToggleProxy
			PartLocation = [-1, 0]
			ComponentID = IsConnected
			PartCriteria
			{
				IDs = [cosmoteer.thruster_rocket_nozzle, cosmoteer.thruster_rocket_extender]
				Rot = 0
				Top = 0
				Right = 0
			}
		}
		ModuleIsConnectedRight
		{
			Type = ToggleProxy
			PartLocation = [1, 0]
			ComponentID = IsConnected
			PartCriteria
			{
				IDs = [cosmoteer.thruster_rocket_nozzle, cosmoteer.thruster_rocket_extender]
				Rot = 0
				Top = 0
				Left = 1
			}
		}

		LocalBatteryStorage
		{
			Type = ResourceStorage
			ResourceType = battery
			MaxResources = 4000
			ReceiveResourceMediaEffects = &/COMMON_EFFECTS/PowerDeliver
		}
		LeftExtendableBatteryStorage
		{
			Type = ResourceStorageProxy
			ResourceType = battery
			PartLocation = [-1, 0]
			ComponentID = ExtendableBatteryStorage
			PartCriteria
			{
				IDs = [cosmoteer.thruster_rocket_nozzle, cosmoteer.thruster_rocket_extender]
				Rot = 0
				Top = 0
				Right = 0
			}
		}
		RightExtendableBatteryStorage
		{
			Type = ResourceStorageProxy
			ResourceType = battery
			PartLocation = [1, 0]
			ComponentID = ExtendableBatteryStorage
			PartCriteria
			{
				IDs = [cosmoteer.thruster_rocket_nozzle, cosmoteer.thruster_rocket_extender]
				Rot = 0
				Top = 0
				Left = 1
			}
		}
		ExtendableBatteryStorage
		{
			Type = MultiResourceStorage
			ResourceType = battery
			ResourceStorages = [LocalBatteryStorage, LeftExtendableBatteryStorage, RightExtendableBatteryStorage]
		}

		LocalEngineBuffToggle
		{
			Type = BuffToggle
			BuffType = Engine
		}
		LeftEngineBuffToggle
		{
			Type = ToggleProxy
			PartLocation = [-1, 0]
			ComponentID = ExtendableEngineBuffToggle
			PartCriteria
			{
				IDs = [cosmoteer.thruster_rocket_nozzle, cosmoteer.thruster_rocket_extender]
				Rot = 0
				Top = 0
				Right = 0
			}
		}
		RightEngineBuffToggle
		{
			Type = ToggleProxy
			PartLocation = [1, 0]
			ComponentID = ExtendableEngineBuffToggle
			PartCriteria
			{
				IDs = [cosmoteer.thruster_rocket_nozzle, cosmoteer.thruster_rocket_extender]
				Rot = 0
				Top = 0
				Left = 1
			}
		}
		ExtendableEngineBuffToggle
		{
			Type = MultiToggle
			Toggles = [LocalEngineBuffToggle, LeftEngineBuffToggle, RightEngineBuffToggle]
			Mode = Any
		}
		ToggledBatteryConsumer
		{
			Type = ToggledComponents
			Toggle = ExtendableEngineBuffToggle
			Invert = true
			Components
			{
				BatteryConsumer
				{
					Type = ResourceConsumer
					ResourceType = battery
					Storage = ExtendableBatteryStorage
					DefaultPriority = &/PRIORITIES/Thruster_Supply
					ResupplyThreshold = 1000
					OperationalToggle = ModuleIsConnected
				}
			}
		}

		Graphics
		{
			Type = Graphics
			Location = [.5, 1]
			OperationalToggle = LocalBatteryStorage
			Floor
			{
				Layer = "floors"
				//Offset = [0, 1]
				DamageLevels
				[
					{
						File = "floor.png"
						Size = [1, 2]
					}
					{
						File = "floor_33.png"
						Size = [1, 2]
					}
					{
						File = "floor_66.png"
						Size = [1, 2]
					}
				]
			}
			OperationalLighting
			{
				Layer = "lights_add"
				DamageLevels
				[
					{
						File = "lights.png"
						Size = [1, 2]
					}
				]
			}
			Walls
			{
				Layer = "walls"
				DamageLevels
				[
					{
						File = "walls.png"
						Size = [1, 2]
					}
					{
						File = "walls_33.png"
						Size = [1, 2]
					}
					{
						File = "walls_66.png"
						Size = [1, 2]
					}
				]
			}
			Roof
			{
				Layer = "roofs"
				DamageLevels
				[
					{
						File = "roof.png"
						NormalsFile = "roof_normals.png"
						Size = [1, 2]
					}
					{
						File = "roof_33.png"
						NormalsFile = "roof_normals_33.png"
						Size = [1, 2]
					}
					{
						File = "roof_66.png"
						NormalsFile = "roof_normals_66.png"
						Size = [1, 2]
					}
				]
			}
			OperationalRoofDoodad
			{
				Layer = "roof_doodads"
				DamageLevels
				[
					{
						File = "roof_glows.png"
						Size = [1, 2]
					}
					{
						File = "roof_glows_33.png"
						Size = [1, 2]
					}
					{
						File = "roof_glows_66.png"
						Size = [1, 2]
					}
				]
			}
		}

		BatterySprites
		{
			Type = ResourceSprites
			Location = [.5, 1]
			ResourceStorage = LocalBatteryStorage
			Layer = "doodads_low"
			ResourceLevels
			[
				{
					File = "batteries1.png"
					Size = [1, 1]
				}
				{
					File = "batteries2.png"
					Size = [1, 1]
				}
				{
					File = "batteries3.png"
					Size = [1, 2]
				}
				{
					File = "batteries4.png"
					Size = [1, 2]
				}
			]
		}

		DestroyedEffects
		{
			Type = DeathEffects
			MediaEffects = &/COMMON_EFFECTS/SmallPartDestroyed
			Location = [.5, 1]
		}

		ConnectedToggle
		{
			Type = MultiToggle
			Toggles = [ConnectedToggleLeft, ConnectedToggleRight]
			Mode = Any
		}
		ConnectedToggleLeft : ModuleIsConnectedLeft
		{
			Type = ComponentPresenceToggle
		}
		ConnectedToggleRight : ModuleIsConnectedRight
		{
			Type = ComponentPresenceToggle
		}

		Indicators
		{
			Type = IndicatorSprites
			Location = [.5, 1]
			Layer = "indicators"
			Indicators
			[
				// Missing component
				{
					Toggle = ConnectedToggle
					ShowInBuildMode = true
					AtlasSprite
					{
						File = &/INDICATORS/MissingComponent
						Size = [1, 1]
					}
				}
			]
		}

		Blueprints
		{
			Type = BlueprintSprite
			File = "blueprints.png"
			Size = [1, 2]
		}
	}

	Stats
	{
		PowerCapacity = (&~/Part/Components/LocalBatteryStorage/MaxResources) / 1000

		//RecPower = (&ThrusterPowerUsage) / 2
		//RecCrew = (&RecPower) * 4
	}
}