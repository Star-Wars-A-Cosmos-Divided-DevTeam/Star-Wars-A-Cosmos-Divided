Part : <../base_part_terran.rules>/Part
{
	NameKey = "Parts/ThrusterRocketExtender"
	IconNameKey = "Parts/ThrusterRocketExtenderIcon"
	ID = cosmoteer.thruster_rocket_extender // Part IDs must always be in the form of "author_name.part_name". If making your own mod, do *not* use "cosmoteer" as your author name, because it may conflict with future vanilla parts.
	EditorGroup = "Flight"
	DescriptionKey = "Parts/ThrusterRocketExtenderDesc"
	Resources
	[
		[steel, 56]
		[coil2, 12]
	]
	TypeCategories = [thruster, uses_power]
	Size = [3, 2]
	SelectionPriority = 1
	SelectionTypeByRotation = true
	SelectionTypeID = "thrusters"
	MaxHealth = 6000
	ReceivableBuffs : ^/0/ReceivableBuffs [Engine, Rocket, RocketOperation]
	BlockedTravelCells
	[
		[1, 1]
	]
	ForceManhattanPathInPart = true
	AllowedDoorLocations
	[
		[0, -1]
		[2, -1]
		[-1, 0]
		[-1, 1]
		[3, 0]
		[3, 1]
		[0, 2]
		[2, 2]
	]
	EditorIcon
	{
		Texture
		{
			File = "icon.png"
			SampleMode = Linear
		}
		Size = [64, 48]
	}
	Components : ^/0/Components
	{
		IsOperational
		{
			Type = MultiToggle
			Toggles = [PowerToggle, RocketOperationBuffToggle]
			Mode = All
		}

		IsConnected
		{
			Type = MultiToggle
			Toggles = [PowerToggle, IsConnectedProxy]
			Mode = All
		}
		IsConnectedProxy
		{
			Type = ToggleProxy
			PartLocation = [0, 2]
			ComponentID = IsConnected
			PartCriteria
			{
				IDs = [cosmoteer.thruster_rocket_nozzle, cosmoteer.thruster_rocket_extender]
				Rot = 0
				Left = 0
				Right = 3
				Top = 2
			}
		}

		PowerToggle
		{
			Type = UIToggle
			ToggleID = "on_off"
			Default = 1
			RequiresCommand = false
		}

		CommandConsumer
		{
			Type = CommandConsumer
			OperationalToggle = PowerToggle
			CommandPoints = 4
		}

		LocalBatteryStorage
		{
			Type = ResourceStorage
			ResourceType = battery
			MaxResources = 2000
			ReceiveResourceMediaEffects = &/COMMON_EFFECTS/PowerDeliver
		}
		LeftBatteryStorage
		{
			Type = ResourceStorageProxy
			ResourceType = battery
			PartLocation = [-1, 0]
			ComponentID = BatteryStorage
			PartCriteria
			{
				ID = cosmoteer.thruster_rocket_battery
				Rot = 0
				Top = 0
				Bottom = 2
				Right = 0
			}
		}
		RightBatteryStorage
		{
			Type = ResourceStorageProxy
			ResourceType = battery
			PartLocation = [3, 0]
			ComponentID = BatteryStorage
			PartCriteria
			{
				ID = cosmoteer.thruster_rocket_battery
				Rot = 2
				Top = 0
				Bottom = 2
				Left = 3
			}
		}
		ExtendableBatteryStorage
		{
			Type = MultiResourceStorage
			ResourceType = battery
			ResourceStorages = [LocalBatteryStorage, LeftBatteryStorage, RightBatteryStorage]
			AddMode = PrioritizeLeastResources
			RemoveMode = PrioritizeMostResources
		}
		PrevPowerToggle
		{
			Type = ToggleProxy
			PartLocation = [0, -1]
			ComponentID = PowerToggle
			PartCriteria
			{
				ID = cosmoteer.thruster_rocket_extender
				Rot = 0
				Left = 0
				Right = 3
				Bottom = 0
			}
		}
		PrevCombinedBatteryStorage
		{
			Type = ResourceStorageProxy
			ResourceType = battery
			PartLocation = [0, -1]
			ComponentID = CombinedBatteryStorage
			ProxyToggle = PrevPowerToggle
			PartCriteria
			{
				ID = cosmoteer.thruster_rocket_extender
				Rot = 0
				Left = 0
				Right = 3
				Bottom = 0
			}
		}
		CombinedBatteryStorage
		{
			Type = MultiResourceStorage
			ResourceType = battery
			ResourceStorages = [ExtendableBatteryStorage, PrevCombinedBatteryStorage]
			AddMode = DistributeProportionallyByCapacity
			RemoveMode = DistributeProportionallyByCapacity
		}

		EngineBuffToggle
		{
			Type = BuffToggle
			BuffType = Engine
		}
		ToggledBatteryConsumer
		{
			Type = ToggledComponents
			Toggle = EngineBuffToggle
			Invert = true
			IncludeInBlueprints = true
			Components
			{
				BatteryConsumer
				{
					Type = ResourceConsumer
					ResourceType = battery
					Storage = LocalBatteryStorage
					DefaultPriority = &/PRIORITIES/Thruster_Supply
					ResupplyThreshold = 500
					OperationalToggle = IsConnected
				}
			}
		}

		RocketBuffProvider
		{
			Type = AreaBuffProvider
			BuffType = Rocket
			BuffAmount = { BaseValue=0; BuffType=Rocket; BuffMode=Add; }
			BuffArea = [0, 2, 3, 1]
			OperationalToggle = IsOperational
			ChainsFromBuffType = Rocket
			Criteria
			{
				Rot = 0
				Left = 0
				Right = 3
				Top = 2
			}
		}

		EngineBuffProvider
		{
			Type = SelfBuffProvider
			BuffType = Rocket
			ChainsFromBuffType = Engine
			BuffAmount = { BaseValue=100%; BuffType=Engine; BuffMode=Multiply; }
			OperationalToggle = ExtendableBatteryStorage
		}

		RocketOperationBuffToggle
		{
			Type = BuffToggle
			BuffType = RocketOperation
		}

		RocketOperationBuffProvider
		{
			Type = AreaBuffProvider
			BuffType = RocketOperation
			BuffArea = [0, -1, 3, 1]
			OperationalToggle = IsOperational
			ChainsFromBuffType = RocketOperation
			Criteria
			{
				Rot = 0
				Left = 0
				Right = 3
				Bottom = 0
			}
		}

		Graphics
		{
			Type = Graphics
			Location = [1.5, 1]
			OperationalToggle = IsOperational
			AnimationToggle = ExtendableBatteryStorage
			AnimationSpeedFactor = MainThruster
			AnimationSpeedFactorRenormalize = [0.75, 2.0]
			Floor
			{
				Layer = "floors"
				//Offset = [0, 1]
				DamageLevels
				[
					{
						File = "floor.png"
						Size = [3, 2]
					}
					{
						File = "floor_33.png"
						Size = [3, 2]
					}
					{
						File = "floor_66.png"
						Size = [3, 2]
					}
				]
			}
			OperationalDoodad
			{
				Layer = "doodads_high"
				DamageLevels
				[
					{
						AnimationFiles
						[
							"doodads_on1.png"
							"doodads_on2.png"
							"doodads_on3.png"
							"doodads_on4.png"
							"doodads_on5.png"
							"doodads_on6.png"
							"doodads_on7.png"
							"doodads_on8.png"
						]
						Size = [3, 2]
						AnimationInterval = 0.075
					}
					{
						AnimationFiles
						[
							"doodads_on1_33.png"
							"doodads_on2_33.png"
							"doodads_on3_33.png"
							"doodads_on4_33.png"
							"doodads_on5_33.png"
							"doodads_on6_33.png"
							"doodads_on7_33.png"
							"doodads_on8_33.png"
						]
						Size = [3, 2]
						AnimationInterval = 0.075
					}
					{
						AnimationFiles
						[
							"doodads_on1_66.png"
							"doodads_on2_66.png"
							"doodads_on3_66.png"
							"doodads_on4_66.png"
							"doodads_on5_66.png"
							"doodads_on6_66.png"
							"doodads_on7_66.png"
							"doodads_on8_66.png"
						]
						Size = [3, 2]
						AnimationInterval = 0.075
					}
				]
			}
			NonOperationalDoodad
			{
				Layer = "doodads_high"
				DamageLevels
				[
					{
						File = "doodads_off.png"
						Size = [3, 2]
					}
					{
						File = "doodads_off_33.png"
						Size = [3, 2]
					}
					{
						File = "doodads_off_66.png"
						Size = [3, 2]
					}
				]
			}
			OperationalLighting
			{
				Layer = "lights_add"
				DamageLevels
				[
					{
						File = "lights.png"
						Size = [3, 2]
					}
				]
			}
			Walls
			{
				Layer = "walls"
				DamageLevels
				[
					{
						File = "walls.png"
						Size = [3, 2]
					}
					{
						File = "walls_33.png"
						Size = [3, 2]
					}
					{
						File = "walls_66.png"
						Size = [3, 2]
					}
				]
			}
			Roof
			{
				Layer = "roofs"
				DamageLevels
				[
					{
						File = "roof.png"
						NormalsFile = "roof_normals.png"
						Size = [3, 2]
					}
					{
						File = "roof_33.png"
						NormalsFile = "roof_normals_33.png"
						Size = [3, 2]
					}
					{
						File = "roof_66.png"
						NormalsFile = "roof_normals_66.png"
						Size = [3, 2]
					}
				]
			}
			OperationalRoofDoodad
			{
				Layer = "roof_doodads"
				DamageLevels
				[
					{
						File = "roof_glows.png"
						Size = [3, 2]
					}
					{
						File = "roof_glows_33.png"
						Size = [3, 2]
					}
					{
						File = "roof_glows_66.png"
						Size = [3, 2]
					}
				]
			}
			OperationalRoofLighting
			{
				Layer = "roof_lights_fancy"
				Offset = [0, 0.5]
				DamageLevels
				[
					{
						File = "./Data/ships/common/light_blob.png"
						Size = [5, 4]
						Z = 2.50 // Controls the "height" of the light for the purposes of normal mapping.
						VertexColor = [255*1.0,116*1.0, 24*1.0]
					}
				]
			}
		}

		BatterySprites
		{
			Type = ResourceSprites
			Location = [1.5, 0]
			ResourceStorage = LocalBatteryStorage
			Layer = "doodads_low"
			ResourceLevels
			[
				{
					File = "batteries1.png"
					Size = [1, 1]
				}
				{
					File = "batteries2.png"
					Size = [1, 1]
				}
			]
		}

		MainThruster
		{
			Type = ValueProxy
			PartLocation = [0, 2]
			ComponentID = MainThruster
			PartCriteria
			{
				IDs = [cosmoteer.thruster_rocket_nozzle, cosmoteer.thruster_rocket_extender]
				Rot = 0
				Left = 0
				Right = 3
				Top = 2
			}
		}

		OperationEffects
		{
			Type = ToggleEffects
			Location = [1.5, 1]
			Toggle = IsOperational
			ToggledOnMediaEffects = &/COMMON_EFFECTS/MachinesOn
			ToggledOffMediaEffects = &/COMMON_EFFECTS/MachinesOff
		}

		DestroyedEffects
		{
			Type = DeathEffects
			MediaEffects = &/COMMON_EFFECTS/MedPartDestroyed
			Location = [1.5, 1]
		}

		ThrusterHum
		{
			Type = ContinuousEffects
			Location = [1.5, 1]
			OperationalToggle = IsOperational
			MediaEffects
			[
				: /COMMON_SOUNDS/ThrusterHum
				{
					Volume = .3
					Speed = .75
					MaxConcurrentVolume = 1
				}
			]
		}

		Indicators
		{
			Type = IndicatorSprites
			Location = [1.5, 1]
			Layer = "indicators"
			Indicators
			[
				// Turned off.
				{
					Toggle = PowerToggle
					AtlasSprite
					{
						File = &/INDICATORS/PowerOff
						Size = [1, 1]
					}
				}

				// Missing component
				{
					Toggle = IsConnected
					ShowInBuildMode = true
					AtlasSprite
					{
						File = &/INDICATORS/MissingComponent
						Size = [1, 1]
					}
				}

				// Out of power.
				{
					Toggle = ExtendableBatteryStorage
					AtlasSprite
					{
						File = &/INDICATORS/NoPower
						Size = [1, 1]
					}
				}
			]
		}

		Blueprints
		{
			Type = BlueprintSprite
			File = "blueprints.png"
			Size = [3, 2]
		}
	}

	Stats
	{
		PowerCapacity = (&~/Part/Components/LocalBatteryStorage/MaxResources) / 1000

		//RecPower = (&ThrusterPowerUsage) / 2
		//RecCrew = (&RecPower) * 4
	}
}