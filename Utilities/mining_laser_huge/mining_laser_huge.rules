Part : &<./Data/ships/terran/base_part_terran.rules>/Part
{
	//IDs
	ID = SW.mining_laser_huge

	//StringKeys
	NameKey = "Parts/SWMiningLaserHuge"
	IconNameKey = "Parts/SWMiningLaserHugeIcon"
	DescriptionKey = "Parts/SWMiningLaserHugeDesc"

	//Groups&Categories
	EditorGroups = ["WeaponsEnergy", "Utilities", "SWTechII"]
	TypeCategories = [weapon, uses_power, is_crewed, mining]

	//Resoures&Size&Health
	Resources
	[
		[steel, 96*4]
		[coil, 36*4]
	]
	Size = [4, 6]
	MaxHealth = 6000*4

	//Selections
	SelectionPriority = 1

	//ReceivableBuffs&ProhibitedBy
	ReceivableBuffs : ^/0/ReceivableBuffs []
	ProhibitedBy : ^/0/ProhibitedBy [tall]

	//Doors&Etc
	AllowedDoorLocations
	[
		[-1, 2]
		[-1, 3]
		[4, 2]
		[4, 3]
	]

	//Editor
	EditorIcon
	{
		Texture
		{
			File = "icon.png"
			SampleMode = Linear
		}
		Size = [42.66, 64]
	}

	//Components
	Components : ^/0/Components
	{
		IsOperational
		{
			Type = MultiToggle
			Toggles = [PowerToggle, BatteryStorage, PartCrew]
			Mode = All
		}

		PowerToggle
		{
			Type = UIToggle
			ToggleID = "on_off"
			Default = 1
			RequiresCommand = false
		}

		CommandConsumer
		{
			Type = CommandConsumer
			OperationalToggle = PowerToggle
			CommandPoints = 12
		}

		BatteryStorage
		{
			Type = ResourceStorage
			ResourceType = battery
			MaxResources = 64000
			ReceiveResourceMediaEffects = &/COMMON_EFFECTS/PowerDeliver
		}
		BatteryConsumer
		{
			Type = ResourceConsumer
			ResourceType = battery
			Storage = BatteryStorage
			DefaultPriority = &<./Data/ships/base_ship.rules>/DefaultSalvagePriority
			ResupplyThreshold = 1000
			OperationalToggle = PowerToggle
		}

		FireModeToggle
		{
			Type = UIToggle
			ToggleID = "fire_mode"
			Default = 1
			ToggledOnChoices = [0, 1, 2]
		}
		AutoTargetToggle
		{
			Type = ModeToggle
			Mode = FireModeToggle
			OnModes = [1, 2]
		}
		AutoFireToggle
		{
			Type = ModeToggle
			Mode = FireModeToggle
			OnMode = 2
		}

		Graphics
		{
			Type = Graphics
			Location = [2, 3]
			OperationalToggle = IsOperational
			Floor
			{
				Layer = "floors"
				DamageLevels
				[
					{
						File = "floor.png"
						Size = [4, 6]
					}
					{
						File = "floor_33.png"
						Size = [4, 6]
					}
					{
						File = "floor_66.png"
						Size = [4, 6]
					}
				]
			}
			OperationalDoodad
			{
				Layer = "doodads_low"
				DamageLevels
				[
					{
						AnimationFiles
						[
							"doodads_on1.png"
							"doodads_on2.png"
							"doodads_on3.png"
							"doodads_on4.png"
							"doodads_on5.png"
							"doodads_on6.png"
							"doodads_on7.png"
							"doodads_on8.png"
						]
						Size = [4, 6]
						AnimationInterval = 0.15
					}
					{
						AnimationFiles
						[
							"doodads_on1_33.png"
							"doodads_on2_33.png"
							"doodads_on3_33.png"
							"doodads_on4_33.png"
							"doodads_on5_33.png"
							"doodads_on6_33.png"
							"doodads_on7_33.png"
							"doodads_on8_33.png"
						]
						Size = [4, 6]
						AnimationInterval = 0.15
					}
					{
						AnimationFiles
						[
							"doodads_on1_66.png"
							"doodads_on2_66.png"
							"doodads_on3_66.png"
							"doodads_on4_66.png"
							"doodads_on5_66.png"
							"doodads_on6_66.png"
							"doodads_on7_66.png"
							"doodads_on8_66.png"
						]
						Size = [4, 6]
						AnimationInterval = 0.15
					}
				]
			}
			Walls
			{
				Layer = "walls"
				DamageLevels
				[
					{
						File = "walls.png"
						Size = [4, 6]
					}
					{
						File = "walls_33.png"
						Size = [4, 6]
					}
					{
						File = "walls_66.png"
						Size = [4, 6]
					}
				]
			}
			OperationalLighting
			{
				Layer = "lights_add"
				DamageLevels
				[
					{
						File = "lights.png"
						Size = [4, 6]
					}
				]
			}
			Roof
			{
				Layer = "roofs"
				DamageLevels
				[
					{
						File = "roof.png"
						NormalsFile = "roof_normals.png"
						Size = [4, 6]
					}
					{
						File = "roof_33.png"
						NormalsFile = "roof_normals_33.png"
						Size = [4, 6]
					}
					{
						File = "roof_66.png"
						NormalsFile = "roof_normals_66.png"
						Size = [4, 6]
					}
				]
			}
			OperationalRoofDoodad
			{
				Layer = "roof_doodads"
				DamageLevels
				[
					{
						File = "roof_glows.png"
						Size = [4, 6]
					}
					{
						File = "roof_glows_33.png"
						Size = [4, 6]
					}
					{
						File = "roof_glows_66.png"
						Size = [4, 6]
					}
				]
			}
			OperationalRoofLighting
			{
				Layer = "roof_lights_fancy"
				Offset = [0, -62/64]
				DamageLevels
				[
					{
						File = "./Data/ships/common/light_blob.png"
						Size = [3.5, 3.5]
						Z = 1 // Controls the "height" of the light for the purposes of normal mapping. Set to -1 (or any negative number) to disable normal lighting for this light.
						VertexColor = [255*1.0, 0, 98*1.0]
					}
				]
			}
		}

		Turret
		{
			Type = TurretWeapon
			Location = [2, 3.8]// Relative to upper-left corner of unrotated part.
			Rotation = -90d // Relative to unrotated part.
			OperationalToggle = IsOperational
			AutoFireToggle = AutoFireToggle
			FireInterval = .2
			FiringArc = 270d
			RotateSpeed = 30d
			FireThresholdAngle = 0.25d
			AIFirepowerRating = 2400
			CanSalvage = true
			IncludeInFirepowerEstimation = false
			AlwaysShowCoverage = true
			Emitter = BeamEmitterBase // Doesn't actually fire; only used for targeting.
			AutoTargetCrewSafetyDist = 8
			IgnoreFriendlyShipLowLOSChecks = true
			IgnoreJunkLOSChecks = true
			HoldTargetWhileFiring = 0.5

			AutoTargets
			[
				{
					TargetType = Salvage
					Toggle = FireModeToggle
				}
				{
					TargetType = ShipParts
					Toggle = AutoTargetToggle
				}
			]

			BlueprintArcSprite
			{
				Texture = &/INDICATORS/WeaponArc
				Size = [0, 1.5]
				Color = [255, 0, 0, 63]
			}
			BlueprintArcRadius = 10
			BlueprintArcSpriteSegments = 64

			CoverageSectorArc
			{
				Texture = &/INDICATORS/VerticalGradient
				VertexColor = [255, 255, 255, 51]
				QuadCount = 64
			}
		}

		TurretCollider
		{
			Type = CircleCollider
			Location = &../Turret/Location
			Radius = 4/3
			IsHigh = true
			Density = 3
		}

		BeamEmitterBase : &<../../SW_effects/shots/mining_beam_huge_pink.rules>
		{
			Type = BeamEmitter
			ChainedTo = Turret
			FireTrigger // none, but field is required
			GetTargetFrom = Turret
			Location = [1.484375*1.5, 0]
			OperationalToggle = IsOperational
			Duration = .2
			ResourceStorage = BatteryStorage
			ResourcesUsed = 250
			MinResourcesUsed = 1
			Width = abs((&../BeamEmitterLeft/Location/1) - (&../BeamEmitterRight/Location/1)) + (&^/0/Width) / 2
		}
		LeftOscillator
		{
			Type = Oscillator
			ChainedTo = Turret
			OperationalToggle = BeamEmitterLeft
			Location = [110/64, -28/64] //161/64
			Angle = -0.5d
			Interval = 4.0
			ResetWhenOperational = true
		}
		RightOscillator : LeftOscillator
		{
			OperationalToggle = BeamEmitterRight
			Location = [110/64, 28/64] //161/64
			Angle = -(&../LeftOscillator/Angle)
		}
		
		BeamEmitterLeft : BeamEmitterBase
		{
			ChainedTo = LeftOscillator
			FireTrigger = Turret
			Location = [0, -28/64]
			Width = &/SW_SHOTS/miningbeamhugepink/Width // BeamEmitterBase overrides width for targeting purposes.
		}
		BeamEmitterRight : BeamEmitterBase
		{
			ChainedTo = RightOscillator
			FireTrigger = Turret
			Location = [0, 28/64]
			Width = &/SW_SHOTS/miningbeamhugepink/Width // BeamEmitterBase overrides width for targeting purposes.
		}

		CrewLocationMid
		{
			Type = CrewLocation
			Location = [2, 1.81]
			Rotation = 180d
		}

		CrewLocationLeft
		{
			Type = CrewLocation
			Location = [1.36, 1.36]
			Rotation = 315d
		}

		CrewLocationRight
		{
			Type = CrewLocation
			Location = [2.64, 1.36]
			Rotation = 45d
		}
		PartCrew
		{
			Type = PartCrew
			Crew = 3
			DefaultPriority = &<./Data/ships/base_ship.rules>/DefaultSalvagePriority
			PrerequisitesBeforeCrewing = [PowerToggle]
			HighPriorityPrerequisites = [BatteryStorage]
			CrewDestinations
			[
				&../../CrewLocationMid/Location
				&../../CrewLocationLeft/Location
				&../../CrewLocationRight/Location
			]
			CrewLocations
			[
				CrewLocationMid
				CrewLocationLeft
				CrewLocationRight
			]
		}

		TurretGraphics
		{
			Type = Graphics
			ChainedTo = Turret
			Location = [0, 0]
			Rotation = 90d
			OperationalToggle = IsOperational
			DoodadToggle = BeamEmitterLeft
			ShowToggledDoodadsWhenNotOperational = false
			Floor
			{
				Layer = "doodads_high"
				DamageLevels
				[
					{
						File = "rotor.png"
						Size = [4, 4]
						Offset = [0, -13/64]
					}
					{
						File = "rotor_33.png"
						Size = [4, 4]
						Offset = [0, -13/64]
					}
					{
						File = "rotor_66.png"
						Size = [4, 4]
						Offset = [0, -13/64]
					}
				]
			}
			ToggleOnDoodad
			{
				Layer = "roof_turrets"
				DamageLevels
				[
					{
						AnimationFiles
						[
							"weapon_shooting1.png"
							"weapon_shooting2.png"
							"weapon_shooting3.png"
							"weapon_shooting4.png"
							"weapon_shooting5.png"
							"weapon_shooting6.png"
							"weapon_shooting7.png"
						]
						NormalsAnimationFiles
						[
							"weapon_normals_on.png"
							"weapon_normals_on.png"
							"weapon_normals_on.png"
							"weapon_normals_on.png"
							"weapon_normals_on.png"
							"weapon_normals_on.png"
							"weapon_normals_on.png"
						]
						Size = [4, 4]
						Offset = [0, -13/64]
						AnimationInterval = 0.09
						AnimationStartTime = Zero
					}
					{
						AnimationFiles
						[
							"weapon_shooting1_33.png"
							"weapon_shooting2_33.png"
							"weapon_shooting3_33.png"
							"weapon_shooting4_33.png"
							"weapon_shooting5_33.png"
							"weapon_shooting6_33.png"
							"weapon_shooting7_33.png"
						]
						NormalsAnimationFiles
						[
							"weapon_normals_on_33.png"
							"weapon_normals_on_33.png"
							"weapon_normals_on_33.png"
							"weapon_normals_on_33.png"
							"weapon_normals_on_33.png"
							"weapon_normals_on_33.png"
							"weapon_normals_on_33.png"
						]
						Size = [4, 4]
						Offset = [0, -13/64]
						AnimationInterval = 0.09
						AnimationStartTime = Zero
					}
					{
						AnimationFiles
						[
							"weapon_shooting1_66.png"
							"weapon_shooting2_66.png"
							"weapon_shooting3_66.png"
							"weapon_shooting4_66.png"
							"weapon_shooting5_66.png"
							"weapon_shooting6_66.png"
							"weapon_shooting7_66.png"
						]
						NormalsAnimationFiles
						[
							"weapon_normals_on_66.png"
							"weapon_normals_on_66.png"
							"weapon_normals_on_66.png"
							"weapon_normals_on_66.png"
							"weapon_normals_on_66.png"
							"weapon_normals_on_66.png"
							"weapon_normals_on_66.png"
						]
						Size = [4, 4]
						Offset = [0, -13/64]
						AnimationInterval = 0.09
						AnimationStartTime = Zero
					}
				]
			}
			ToggleOffDoodad
			{
				Layer = "roof_turrets"
				DamageLevels
				[
					{
						File = "weapon_on.png"
						NormalsFile = "weapon_normals_on.png"
						Size = [4, 4]
						Offset = [0, -13/64]
					}
					{
						File = "weapon_on_33.png"
						NormalsFile = "weapon_normals_on_33.png"
						Size = [4, 4]
						Offset = [0, -13/64]
					}
					{
						File = "weapon_on_66.png"
						NormalsFile = "weapon_normals_on_66.png"
						Size = [4, 4]
						Offset = [0, -13/64]
					}
				]
			}
			NonOperationalDoodad
			{
				Layer = "roof_turrets"
				DamageLevels
				[
					{
						File = "weapon_off.png"
						NormalsFile = "weapon_normals_off.png"
						Size = [4, 4]
						Offset = [0, -13/64]
					}
					{
						File = "weapon_off_33.png"
						NormalsFile = "weapon_normals_off_33.png"
						Size = [4, 4]
						Offset = [0, -13/64]
					}
					{
						File = "weapon_off_66.png"
						NormalsFile = "weapon_normals_off_66.png"
						Size = [4, 4]
						Offset = [0, -13/64]
					}
				]
			}
			OperationalRoofLighting
			{
				Layer = "roof_lights_fancy"
				Offset = [0, 0.25]
				DamageLevels
				[
					{
						File = "./Data/ships/common/light_blob.png"
						Size = [1.5, 1.5]
						Z = 1.0 // Controls the "height" of the light for the purposes of normal mapping. Set to -1 (or any negative number) to disable normal lighting for this light.
						VertexColor = [255*1.0, 0, 0]
					}
				]
			}
		}

		BatterySprites
		{
			Type = ResourceSprites
			Location = [2, 306/64]
			ResourceStorage = BatteryStorage
			Layer = "doodads_low"
			ResourceLevels
			[
				{
					File = "batteries1.png"
					Offset = [1, 0]
					Size = [2, 2]
				}
				{
					File = "batteries2.png"
					Offset = [1, 0]
					Size = [2, 2]
				}
				{
					File = "batteries3.png"
					Offset = [1, 0]
					Size = [2, 2]
				}
				{
					File = "batteries4.png"
					Offset = [1, 0]
					Size = [2, 2]
				}
				{
					File = "batteries5.png"
					Size = [4, 2]
				}
				{
					File = "batteries6.png"
					Size = [4, 2]
				}
				{
					File = "batteries7.png"
					Size = [4, 2]
				}
				{
					File = "batteries8.png"
					Size = [4, 2]
				}
				{
					File = "batteries9.png"
					Size = [4, 2]
				}
				{
					File = "batteries10.png"
					Size = [4, 2]
				}
			]
		}

		OperationEffects
		{
			Type = ToggleEffects
			Location = [1, 1.5]
			Toggle = IsOperational
			ToggledOnMediaEffects = &/COMMON_EFFECTS/PowerOn
			ToggledOffMediaEffects = &/COMMON_EFFECTS/PowerOff
		}

		DestroyedEffects
		{
			Type = DeathEffects
			MediaEffects = &/COMMON_EFFECTS/MedPartDestroyed
			Location = [1, 1.5]
		}

		Indicators
		{
			Type = IndicatorSprites
			Location = [2, 3]
			Layer = "indicators"
			Indicators
			[
				// Turned off.
				{
					Toggle = PowerToggle
					AtlasSprite
					{
						File = &/INDICATORS/PowerOff
						Size = [2, 2]
					}
				}

				// Out of power.
				{
					Toggle = BatteryStorage
					Delay = &~/Part/Components/Turret/FireInterval
					AtlasSprite
					{
						File = &/INDICATORS/NoPower
						Size = [2, 2]
					}
				}

				// No crew.
				{
					Toggle = PartCrew
					AtlasSprite
					{
						File = &/INDICATORS/NoCrew
						Size = [2, 2]
					}
				}
			]
		}

		Blueprints
		{
			Type = BlueprintSprite
			File = "blueprints.png"
			Size = [4, 6]
		}
	}

	//Stats
	Stats
	{
		CrewRequired = &~/Part/Components/PartCrew/Crew
		PowerCapacity = (&~/Part/Components/BatteryStorage/MaxResources) / 1000

		RecPower = &../StatsByCategory/0/Stats/PowerUsageContinuous
		RecCrew = (&CrewRequired) + (&RecPower) * 4
	}

	StatsByCategory
	[
		{
			NameKey = "StatCategories/MiningBeam"
			Stats
			{
				DamagePerShot = (&~/Part/Components/BeamEmitterBase/HitOperational/HitEffects/0/Damage) * 2
				HitInterval = &~/Part/Components/BeamEmitterBase/HitInterval
				DamageContinuous = (&DamagePerShot) / (&HitInterval)
				DamagePerShotAsteroids = (&~/Part/Components/BeamEmitterBase/HitOperational/HitEffects/1/Damage) * 2
				DamageContinuousAsteroids = (&DamagePerShotAsteroids) / (&HitInterval)
				Range = &~/Part/Components/BeamEmitterBase/Range
				Arc = deg(&~/Part/Components/Turret/FiringArc)
				TurretSpeed = deg(&~/Part/Components/Turret/RotateSpeed)
				ShotSpeed = Infinity
				PowerPerShot = (&~/Part/Components/BeamEmitterBase/ResourcesUsed) * 2 / 1000
				PowerUsageContinuous = (&PowerPerShot) / (&~/Part/Components/Turret/FireInterval)
			}
		}
	]
}