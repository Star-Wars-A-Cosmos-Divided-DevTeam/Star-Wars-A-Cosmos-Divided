EmitPerSecond = 0
EmitPerOneShot = 0
Initializers
[
	{
		Type = LocationToWorldSpace
		DataOut = energy
		ValueType = Float
		Value = 1
		Name = "Convert location to world space."
		Enabled = true
		UpdateAfterInit = false
		LocationIn = location
		LocationOut = location
	}
	{
		Type = VelocityToWorldSpace
		LocationIn = location
		LocationOut = location
		Name = "Convert velocity to world space"
		Enabled = true
		UpdateAfterInit = false
		RotationIn = rot
		RotationOut = rot
		VelocityInOut = velocity
		VelocityIn = velocity
		VelocityOut = velocity
	}
	{
        Type = AddFrameOfReference
        Name = "Add frame of reference"
        VelocityIn = velocity
        VelocityOut = velocity
        Enabled = true
        UpdateAfterInit = false
        VelocityInOut = velocity
    }
	{
		Type = SetRandom
		SpriteIndexIn = sprite_index
		UvRectOut = uv_rect
		TextureSize
		{
			X = 256
			Y = 512
		}
		SpriteSize
		{
			X = 128
			Y = 128
		}
		SpriteCount = 7
		SpritesPerRow = 2
		PixelOffset
		{
			X = 0
			Y = 0
		}
		Name = "Sprite Index"
		Enabled = true
		UpdateAfterInit = false
		DataOut = sprite_index
		ValueType = Int
		FromValue = 0
		ToValue = 6
	}
	{
		Type = UvSprites
		SpriteIndexIn = sprite_index
		UvRectOut = uv_rect
		TextureSize
		{
			X = 256
			Y = 512
		}
		SpriteSize
		{
			X = 128
			Y = 128
		}
		SpriteCount = 7
		SpritesPerRow = 2
		PixelOffset
		{
			X = 0
			Y = 0
		}
		Name = "Sprite UV Rect"
		Enabled = true
		UpdateAfterInit = false
		DataOut = rot
		ValueType = Angle
		FromValue = 0d
		ToValue = 360d
	}
	{
		Type = SetRandom
		DataOut = rot
		ValueType = Angle
		FromValue = 0d
		ToValue = 360d
		Name = "Rotation"
		Enabled = true
		UpdateAfterInit = false
	}
	{
		Type = SetRandom
		DataOut = rot_vel
		ValueType = Angle
		FromValue = -90d
		ToValue = 90d
		Name = "Rot Velocity"
		Enabled = true
		UpdateAfterInit = false
		ColorOut = base_color
		HueRange
		{
			Min = -20
			Max = 20
		}
		SaturationRange
		{
			Min = 1
			Max = 1
		}
		ValueRange
		{
			Min = 1
			Max = 1
		}
		AlphaRange
		{
			Min = 0.8
			Max = 0.8
		}
	}
{Type=SetRandomHsvColor;ColorOut=base_color;HueRange{Min=-20;Max=20;}SaturationRange{Min=1;Max=1;}ValueRange{Min=1;Max=1;}AlphaRange{Min=0.8;Max=0.8;}Name="Random base color";Enabled=true;UpdateAfterInit=false;}]
Updaters
[
	{
		Type = Lifetime
		EnergyInOut = energy
		Lifetime = 0.1
		Name = Lifetime
		Enabled = true
		UpdateAfterInit = false
		LifeInOut = life
	}
	{
		Type = Operator
		DataType = Vector2D
		AIn = location
		BIn = velocity
		ResultOut = location
		Operator = AddDt
		Name = "Apply velocity."
		Enabled = true
		UpdateAfterInit = false
	}
	{
		Type = Operator
		DataType = Angle
		AIn = rot
		BIn = rot_vel
		ResultOut = rot
		Operator = AddDt
		Name = "Apply rot velocity."
		Enabled = true
		UpdateAfterInit = false
	}
	{
		Type = Lerp
		LerpIn = life
		ColorOut = color
		Invert = false
		Colors
		[
			{
				Rf = 1
				Gf = 1
				Bf = 1
				Af = 1
			}
			{
				Rf = 1
				Gf = 1
				Bf = 1
				Af = 0
			}
		]
		Name = "Alpha lerp"
		Enabled = true
		UpdateAfterInit = true
		DataOut = color
		ValueType = Color
		FromValue
		{
			Rf = 1
			Gf = 1
			Bf = 1
			Af = 1
		}
		ToValue
		{
			Rf = 1
			Gf = 1
			Bf = 1
			Af = 0
		}
	}
	{
		Type = Operator
		DataType = Color
		AIn = color
		BIn = base_color
		ResultOut = color
		Operator = Multiply
		Name = "Multiply base color with alpha"
		Enabled = true
		UpdateAfterInit = true
	}
	{
		Type = Lerp
		LerpIn = life
		DataOut = scale
		Invert = false
		ValueType = Float
		FromValue = 1
		ToValue = 0
		Name = "Scale lerp"
		Enabled = true
		UpdateAfterInit = true
	}
{Type=Operator;DataType=Float;AIn=scale;BIn=base_scale;ResultOut=scale;Operator=Multiply;Name="";Enabled=true;UpdateAfterInit=true;}]
Renderer
{
	Type = StandardQuadRenderer
	LocationIn = location
	ScaleIn = scale
	RotationIn = rot
	ColorIn = color
	BaseSize
	{
		X = 1
		Y = 1
	}
	MaxScale = 1
	UVRect
	{
		X = 0
		Y = 0
		Width = 1
		Height = 1
	}
	Name = ""
	UvRectIn = uv_rect
}
Material
{
	Texture
	{
		File = "../Misc/smoke.png"
		FixTransparentColors = false
		PreMultiplyByAlpha = false
		SampleMode = Point
	}
	TargetBlendMode
	{
		SourceRgbFactor = SourceAlpha
		DestRgbFactor = One
		RgbOperator = Add
		SourceAlphaFactor = InverseDestAlpha
		DestAlphaFactor = One
		AlphaOperator = Add
		ChannelWriteMask
		[
			None
			Red
			Green
			Blue
			Alpha
			All
		]
	}
	Color
	{
		Rf = 1
		Gf = 1
		Bf = 1
		Af = 1
	}
}
DeleteMode = Fast
UpdatedEmittedParticles = false
EnableMultithreading = false
InitCapacity=256;