Part : &<./Data/ships/terran/base_part_terran.rules>/Part
{
	//IDs
	ID = SW.IonThruster01_10x14_switchable
	OtherIDs = ["IonThruster01_10x14","SW.IonThruster01_10x14"]

	//StringKeys
	NameKey = "Parts/IonThruster01_10x14"
	IconNameKey = "Parts/IonThruster01_10x14_Icon"
	DescriptionKey = "Parts/IonThruster01_10x14_Desc"

	//Groups&Categories
	EditorGroups = ["Flight", "SWTechIII"]
	TypeCategories = [thruster, ion_thruster, uses_power, SW_Tech_III]
	RequiresCategories = [SW_Bridge]

	//Resources&Size&Health
	Resources
	[
		[steel, 1040] //80/9*10*14=1244*81%
		[coil2, 260] //20/9*10*14=310*81%
		//[tristeel, 130] //10/9*10*14=155*81%
	]
	Size = [10, 18]
	MaxHealth = 114000 //113400 //81% of vanilla 1000 per tile

	//Rects
	PhysicalRect = [0, 0, 10, 14]
	SaveRect = &PhysicalRect
	BoundingRectType = Physical

	//Selections
	SelectionPriority = 1
	SelectionTypeByRotation = true
	SelectionTypeID = "ion_thrusters"

	//PartSpecific
	ThrusterForce = 145000 //149.240 //75%sizedegrade*[normalized] 160% of vanilla 1000*8/9 per tile
	ThrustIncreaseTime = (&ThrusterForce) / 10000
	ThrustRecoveryTime = (&ThrusterForce) / 10000 / 3
	FuelUsage = 4000 //3.982 //160%*40% of vanilla 50*8/9 per tile

	//ReceivableBuffs&Prohibits
	ProhibitBelow = 11 // 26
	ReceivableBuffs : ^/0/ReceivableBuffs [SW_Ion_Thruster_Accelerator, Engine, EnginePowerDistribution]  

    //Doors&Etc
	AllowedDoorLocations
	[
		[-1, 0]
		[-1, 1]
		[-1, 2]
		[-1, 3]
		[-1, 4]
		[-1, 5]
		[-1, 6]
		[-1, 7]
		[-1, 8]
		[-1, 9]
		[0, -1]
		[1, -1]
		[2, -1]
		[3, -1]
		[4, -1]
		[5, -1]
		[6, -1]
		[7, -1]
		[8, -1]
		[9, -1]
		[10, 0]
		[10, 1]
		[10, 2]
		[10, 3]
		[10, 4]
		[10, 5]
		[10, 6]
		[10, 7]
		[10, 8]
		[10, 9]
	]

    //Editor
	EditorIcon
	{
		Texture
		{
			File = "icon.png"
			SampleMode = Linear
		}
		Size = [48, 92]
	}

    //Components&Inheritance
	Components : ^/0/Components, &<Components/toggles.rules>, &<toggles2.rules>, &<graphics.rules>//, &<hyperdrive.rules> //maybe used one day ...
	{
		IsOperational
		{
			Type = MultiToggle
			Toggles = [PowerToggle, BatteryStorage]
			Mode = All
		}

		PowerToggle
		{
			Type = UIToggle
			ToggleID = "on_off"
			Default = 1
			RequiresCommand = false
		}

		CommandConsumer
		{
			Type = CommandConsumer
			OperationalToggle = PowerToggle
			CommandPoints = 140 //1 per tile
		}
/*  //For Hyperdrive
		HypernodeConnectedToggle
		{
			Type = BuffToggle
			BuffType = SW_Hypernode_Large
		}

		IsOperationalAndHypernodeConnectedToggle
		{
			Type = MultiToggle
			Toggles = [IsOperational, HypernodeConnectedToggle]
			Mode = All
		}
*/
		EngineBuffToggle
		{
			Type = BuffToggle
			BuffType = Engine
		}

		SWIonAcceleratorBuffToggle
		{
			Type = BuffToggle
			BuffType = SW_Ion_Thruster_Accelerator
		}
/*
		PowerDistributionBuffToggle
		{
			Type = BuffToggle
			BuffType = EnginePowerDistribution
		}
*/
		BatteryStorage
		{
			Type = ResourceStorage
			ResourceType = battery
			MaxResources = 60000 //15 secs sustained firing aka maybe ramp up once lmao
			ReceiveResourceMediaEffects = &/COMMON_EFFECTS/PowerDeliver
		}

		ToggledBatteryConsumer
		{
			Type = ToggledComponents
			Toggle = EngineBuffToggle //PowerDistributionBuffToggle
			Invert = true
			//IncludeInBlueprints = true
			Components
			{
				BatteryConsumer
				{
					Type = ResourceConsumer
					ResourceType = battery
					Storage = BatteryStorage
					DefaultPriority = &/PRIORITIES/Thruster_Supply
					ResupplyThreshold = 1000
					OperationalToggle = PowerToggle
				}
			}
		}
		BatteryStorageBar
		{
			Type = ProgressBar
			OperationalToggle = IsOperational
			ShowProgressFor = BatteryStorage
			LowColor = [64, 64, 0]
			HighColor = [250, 250, 0]
			FullColor = [255, 255, 0]
		}

		ThrusterEffectColorType
		{
			Type = UIToggle
			ToggleID = "SW.thruster_effect_color_type"
			Default = 1
			AvailableChoices = [0, 1, 2, 3,	4, 5, 6, 7, 8, 9]
			AlwaysAllowInBuildMode = true
			RequiresCommand = false
		}

		RedToggle
		{
			Type = ModeToggle
			Mode = ThrusterEffectColorType
			OnMode = 0
		}
		BlueToggle
		{
			Type = ModeToggle
			Mode = ThrusterEffectColorType
			OnMode = 1
		}
		YellowToggle
		{
			Type = ModeToggle
			Mode = ThrusterEffectColorType
			OnMode = 2
		}
		PurpleToggle
		{
			Type = ModeToggle
			Mode = ThrusterEffectColorType
			OnMode = 3
		}
		CyanToggle
		{
			Type = ModeToggle
			Mode = ThrusterEffectColorType
			OnMode = 4
		}
		OrangeToggle
		{
			Type = ModeToggle
			Mode = ThrusterEffectColorType
			OnMode = 5
		}
		GreenToggle
		{
			Type = ModeToggle
			Mode = ThrusterEffectColorType
			OnMode = 6
		}
		MagentaToggle
		{
			Type = ModeToggle
			Mode = ThrusterEffectColorType
			OnMode = 7
		}
		WhiteToggle
		{
			Type = ModeToggle
			Mode = ThrusterEffectColorType
			OnMode = 8
		}
		BlackToggle
		{
			Type = ModeToggle
			Mode = ThrusterEffectColorType
			OnMode = 9
		}

		RedToggleProxy
		{
			Type = ToggleProxy
			ComponentID = RedToggle
		}
		BlueToggleProxy
		{
			Type = ToggleProxy
			ComponentID = BlueToggle
		}
		YellowToggleProxy
		{
			Type = ToggleProxy
			ComponentID = YellowToggle
		}
		PurpleToggleProxy
		{
			Type = ToggleProxy
			ComponentID = PurpleToggle
		}
		CyanToggleProxy
		{
			Type = ToggleProxy
			ComponentID = CyanToggle
		}
		OrangeToggleProxy
		{
			Type = ToggleProxy
			ComponentID = OrangeToggle
		}
		GreenToggleProxy
		{
			Type = ToggleProxy
			ComponentID = GreenToggle
		}
		MagentaToggleProxy
		{
			Type = ToggleProxy
			ComponentID = MagentaToggle
		}
		WhiteToggleProxy
		{
			Type = ToggleProxy
			ComponentID = WhiteToggle
		}
		BlackToggleProxy
		{
			Type = ToggleProxy
			ComponentID = BlackToggle
		}

		ThrusterEffectAmountType
		{
			Type = UIToggle
			ToggleID = "SW.thruster_effect_amount_type"
			Default = 0
			AvailableChoices = [0, 1, 2, 3, 4] //5
			RequiresCommand = false
		}

		GlowToggle
		{
			Type = ModeToggle
			Mode = ThrusterEffectAmountType
			OnModes = [0, 1, 2]
		}
		SparksToggle
		{
			Type = ModeToggle
			Mode = ThrusterEffectAmountType
			OnModes = [1, 3]
		}

		FullsetToggle
		{
			Type = ModeToggle
			Mode = ThrusterEffectAmountType
			OnModes = [2, 4]
		}

		GlowToggleProxy
		{
			Type = ToggleProxy
			ComponentID = GlowToggle
		}

		SparksToggleProxy
		{
			Type = ToggleProxy
			ComponentID = SparksToggle
		}

		FullsetToggleProxy
		{
			Type = ToggleProxy
			ComponentID = FullsetToggle
		}

		NozzleArtOptionToggle
		{
			Type = UIToggle
			ToggleID = "nozzle_art_option_switch03"
			Default = 0
			AvailableChoices = [0, 1, 2]
			AlwaysAllowInBuildMode = true
			RequiresCommand = false
		}
		NozzleRoofCoverOptionToggle
		{
			Type = UIToggle
			ToggleID = "nozzle_roof_option_switch19"
			Default = 0
			AvailableChoices = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]
			AlwaysAllowInBuildMode = true
			RequiresCommand = false
		}

		MainThrusterLocationProxy
		{
			Type = ChainableProxy
			ComponentID = MainThruster
		}

		MainThrusterValueProxy
		{
			Type = ValueProxy
			ComponentID = MainThruster
			ValueWhenNotConnected = 0
		}

		ReverseThrusterValueProxy
		{
			Type = ValueProxy
			ComponentID = ReverseThruster
			ValueWhenNotConnected = 0
		}

		NozzleLocationProxy
		{
			Type = ChainableProxy
			ComponentID = NozzlePosition
		}

		DoodadAnimationSpeedFactorValue
		{
			Type = MultiValue
			Values = [MainThrusterValueProxy, ReverseThrusterValueProxy]//, FtlDrive
			Mode = Add
		}

		ThrusterActivationBar
		{
			Type = ProgressBar
			OperationalToggle = ThrusterIsFiringTriggeredToggle
			ShowProgressFor = MainThrusterValueProxy
			LowColor = [0, 0, 0]
			HighColor = [250, 250, 250]
			FullColor = [255, 255, 255]
		}

		ThrusterIsFiringTriggeredToggle
		{
			Type = TriggeredToggle
			OnTrigger = ThrusterOnThresholdTrigger
			OffTrigger = ThrusterOffThresholdTrigger
		}
		ThrusterOnThresholdTrigger
		{
			Type = ThresholdTrigger
			AmountFrom = MainThrusterValueProxy
			MinAmount = 4%
		}
		ThrusterOffThresholdTrigger
		{
			Type = ThresholdTrigger
			AmountFrom = MainThrusterValueProxy	
			MaxAmount = 4%
		}

		ThrusterHasEngineRoomBuff
		{
			Type = SelfBuffProvider
			BuffType = SW_Ion_Thruster_Accelerator
			BuffAmount = 0.5
			BuffMultiplier = ThrusterHasEngineRoomTween
		}
		ThrusterHasEngineRoomTween
		{
			Type = ValueTween
			OffValue = 0
			OnValue = 1
			OnTweenDuration = 0
			OffTweenDuration = 0
			IsOnToggle = EngineBuffToggle
		}

		MainThruster
		{
			Type = Thruster
			OperationalToggle = IsOperational

			Location = [5, 14.5]// Relative to upper-left corner of unrotated part.
			Rotation = 90d// Relative to unrotated part.
			Force = &../../ThrusterForce
			MinActivation = 0
			MaxActivation = { BaseValue=1; BuffType=SW_Ion_Thruster_Accelerator; BuffMode=Multiply; }
			MinUncommandedActivation = &MinActivation
			MaxUncommandedActivation = &MaxActivation
			ActivationIncreaseTime = &../../ThrustIncreaseTime
			ActivationRecoveryTime = &../../ThrustRecoveryTime
			FuelStorage = BatteryStorage
			FuelUsagePerSecond = &../../FuelUsage
		}
		LateralThruster : MainThruster
		{
			Rotation = 0d
			Force = (&../../ThrusterForce)/72
			MinActivation = -0.01
			MaxActivation = 0.01
			MinUncommandedActivation = &MinActivation
			MaxUncommandedActivation = &MaxActivation
			AllowAutoFire = false
		}
		ReverseThruster : MainThruster
		{
			Rotation = -90d
			MinActivation = 0
			MaxActivation = 0.10
			MinUncommandedActivation = &MinActivation
			MaxUncommandedActivation = &MaxActivation
			ActivationIncreaseTime = &../../ThrustIncreaseTime
			ActivationRecoveryTime = &../../ThrustRecoveryTime
			FuelUsagePerSecond = (&../../FuelUsage)*2.5//Penalty for reverse Thrust
			AllowAutoFire = false
		}

		ThrustEffectsSounds
		{
			Type = ContinuousEffects
			ChainedTo = MainThrusterLocationProxy
			FactorMediaEffectsIntensityWith = MainThrusterValueProxy
			MediaEffects
			[
				: /SW_SOUNDS/ThrusterRumble
				{
					Volume = .125
					Speed = 1.5
					MaxConcurrentVolume = .25
				}
			]
		}

		BurstTrigger
		{
			Type = ThresholdTrigger
			AmountFrom = MainThrusterValueProxy
			MinAmount = 0.5
		}

		BurstEffects
		{
			Type = TriggeredEffects
			ChainedTo = MainThrusterLocationProxy
			Trigger = BurstTrigger
			FactorMediaEffectsIntensityWith = MainThrusterValueProxy
			AnchorMediaEffects = true
			MediaEffects
			[
				: /SW_SOUNDS/ThrusterBurst
				{
					Volume = .25
					Speed = 1.5
					MaxConcurrentVolume = .5
				}
			]
		}

		ThrusterHum
		{
			Type = ContinuousEffects
			Location = [5, 7]
			OperationalToggle = IsOperational
			MediaEffects
			[
				: /SW_SOUNDS/ThrusterHum
				{
					Volume = .1
					Speed = 1.25
					MaxConcurrentVolume = 1
				}
			]
		}

		BatterySpritesHolder
		{
			Type = Graphics
			OperationalToggle = IsOperational

			Location = [5, 39/64]
			OperationalDoodad
			{
				Layer = "doodads_low"
				DamageLevels
				[
					{
						File = "../Ion_Common/IonThruster_battery_holder03.png"
						Size = [6, 3]
					}
				]
			}
			NonOperationalDoodad = &OperationalDoodad
		}

		BatterySprites
		{
			Type = ResourceSprites
			Location = &../BatterySpritesHolder/Location
			ResourceStorage = BatteryStorage
			Layer = "doodads_high"
			HasZeroResourceSprite = false
			ResourceLevels
			[
				{
					File = "../Ion_Common/batteries_1.png"
					Size = [6, 3]
				}
				{
					File = "../Ion_Common/batteries_2.png"
					Size = [6, 3]
				}
				{
					File = "../Ion_Common/batteries_3.png"
					Size = [6, 3]
				}
			]
		}

		OperationEffects
		{
			Type = ToggleEffects
			Toggle = IsOperational
			Location = [5, 7]
			ToggledOnMediaEffects = &/COMMON_EFFECTS/MachinesOn
			ToggledOffMediaEffects = &/COMMON_EFFECTS/MachinesOff
		}

		DestroyedEffects
		{
			Type = DeathEffects
			Location = [5, 7]
			MediaEffects = &/COMMON_EFFECTS/MedPartDestroyed
		}

		Indicators
		{
			Type = IndicatorSprites
			Location = [5, 7]
			Layer = "indicators"
			Indicators
			[
				// Turned off.
				{
					Toggle = PowerToggle
					AtlasSprite
					{
						File = &/INDICATORS/PowerOff
						Size = [4, 4]
					}
				}

				// Out of power.
				{
					Toggle = BatteryStorage
					AtlasSprite
					{
						File = &/INDICATORS/NoPower
						Size = [4, 4]
					}
				}
			]
		}

		Blueprints
		{
			Type = BlueprintSprite
			File = "blueprints.png"
			Size = [10, 19.0625]
			Offset = [0, 0.53125]
		}
	}

	//Stats
	Stats
	{
		ThrusterForce = &~/Part/ThrusterForce
		ThrusterRampUp = &~/Part/ThrustIncreaseTime
		ThrusterPowerUsage = (&~/Part/FuelUsage) / 1000
		PowerCapacity = (&~/Part/Components/BatteryStorage/MaxResources) / 1000

		RecPower = (&ThrusterPowerUsage)
		RecCrew = (&RecPower) * 4
	}
}
Size = Giga