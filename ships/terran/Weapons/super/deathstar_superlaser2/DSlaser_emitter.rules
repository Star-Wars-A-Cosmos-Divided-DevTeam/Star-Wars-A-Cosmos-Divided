/* ----------------------------------------------------------------------------

Introduction: SW:ACD 
DSL Railgun version

Author : Lafiel

Description:
Quick and dirty fast prototyping version, based on railgun
This part is the laser emitter. I may be connected to a DSlaser_director. 

Versions:

 o 1.0 Cosmoteer 0.15.8
   o based on ion-prism
 o 1.1 Cosmoteer 0.15.12b
   o based on ion-emitter/railgun_launcher

---------------------------------------------------------------------------- */

Part : /BASE_PART_TERRAN
{
	//IDs

	//StringKeys

	//Groups&Categories

	//Resources&Size&Health

	//Rects

	//Selections

	//PartSpecific

	//ReceivableBuffs&ProhibitedBy

	//Doors&Etc

	//Editor

	//Components

   //Stats 

	NameKey = "Parts/DSLaserEmitter"
	IconNameKey = "Parts/DSLaserEmitterIcon"
	ID = SW.DSlaser_emitter
	DescriptionKey = "Parts/DSLaserEmitterDesc"
	EditorGroup = "SWTechIII"
	Resources
	[
		[steel, 8] //
	]  //Cost = 5000000
	Size = [6, 8]
	AIValueFactor = 5

	PhysicalRect = [0, 2, 6, 6]
	SaveRect = &PhysicalRect
	Density = 2
	SelectionTypeID = "DSLII"
	SelectionPriority = 1
	SelectionTypeByRotation = true
	MaxHealth = 48000
	Flammable = false
	TypeCategories = [weapon, uses_power,DSLII,DSL_power,deathstarlaser_emitter]
	RequiresCategories = [DSL_command]

	ReceivableBuffs : ^/0/ReceivableBuffs [Railgun, DSLaserBuff, RailgunOperation,DSLFireCMDBuff,PowerCellBuff]

	ProhibitRects
	[
		[0, -8, 2, 4]
		[2, -8, 2, 8]
		[4, -8, 2, 4]
	]
	AllowedDoorLocations
	[
		[-1, 6]
		[6, 6]
	]


	HasNonContiguousPathing = true
/*
	BlockedTravelCells
	[
		[0, 1]
		[1, 1]
		[0, 2]
		[1, 2]
	]
*/
	BlockedTravelCellDirections
	[
		{
			Key = [0, 7]
			Value = [Right]
		}
		{
			Key = [5, 7]
			Value = [Left]
		}
	]



	ExternalWallsByCell
	[
		{
			Key = [0, 0]
			Value = [TopLeft, Left]
		}
		{
			Key = [5, 0]
			Value = [TopRight, Right]
		}
		{
			Key = [0, 1]
			Value = [TopLeft, Left]
		}
		{
			Key = [1, 1]
			Value = None
		}
		{
			Key = [2, 1]
			Value = None
		}
		{
			Key = [3, 1]
			Value = None
		}
		{
			Key = [4, 1]
			Value = None
		}
		{
			Key = [5, 1]
			Value = [TopRight, Right]
		}
	]
	InternalWallsByCell
	[
		{
			Key = [0, 0]
			Value = [Left, TopLeft, Top, TopRight]
		}
		{
			Key = [1, 0]
			Value = None
		}
		{
			Key = [2, 0]
			Value = None
		}
		{
			Key = [3, 0]
			Value = None
		}
		{
			Key = [4, 0]
			Value = None
		}
		{
			Key = [5, 0]
			Value = [Right, TopRight, Top, TopLeft]
		}
		{
			Key = [0, 1]
			Value = [TopLeft, Left]
		}
		{
			Key = [1, 1]
			Value = None
		}
		{
			Key = [2, 1]
			Value = None
		}
		{
			Key = [3, 1]
			Value = None
		}
		{
			Key = [4, 1]
			Value = None
		}
		{
			Key = [5, 1]
			Value = [TopRight, Right]
		}
	]

	EditorIcon
	{
		Texture
		{
			File = "icon_emitter.png"
			SampleMode = Linear
		}
		Size = [69, 92]
	}
	Components : ^/0/Components
	{
		IsOperational
		{
			Type = MultiToggle
			Toggles = [PowerToggle, BatteryStorage, RailgunOperationBuffToggle]
			Mode = All
		}

		PowerToggle
		{
			Type = UIToggle
			ToggleID = "on_off"
			Default = 1
		}

		FireModeToggle
		{
			Type = UIToggle
			ToggleID = "fire_mode"
			Default = 1
			ToggledOnChoices = [0, 1, 2]
		}
		AutoTargetToggle
		{
			Type = ModeToggle
			Mode = FireModeToggle
			OnModes = [1, 2]
		}
		AutoFireToggle
		{
			Type = ModeToggle
			Mode = FireModeToggle
			OnMode = 2
		}

		FireCmdBuffToggle
		{
			Type = BuffToggle
			BuffType = DSLFireCMDBuff
		}
		FireCmdToggle
		{
			Type = MultiToggle
			Toggles = [FireCmdBuffToggle,FireModeToggle]
			Mode = All
		}
		EndFireTimer
		{
			Type = Timer
			Duration = 2.9  //x * interval + 0.1
			//AutoStart = true
			Repeats = false
			StartTrigger = Weapon
		}
		EndSignalEndFireTimer
		{
			Type = Timer
			Duration = .2
			//AutoStart = true
			Repeats = false
			StartTrigger = EndFireTimer
		}
		FireEndCmdToggle
		{
			Type = TriggeredToggle
			OnTrigger = EndFireTimer
			OffTrigger = EndSignalEndFireTimer
		}

		FireEndCmdProvider
		{
			Type = AreaBuffProvider
			BuffType = DSLEndFireCMDBuff
			OperationalToggle = FireEndCmdToggle
			BuffAmount = 1
			BuffArea = [-500, 0, 1006, 1000]
			Criteria
			{
				Category = DSL_command
				//Rot = 0
				//Left = 0
				//Right = 2
				//Bottom = 0
			}
		}

		BatteryStorage
		{
			Type = ResourceStorage
			ResourceType = battery
			MaxResources = 28000
			ToggleOnResources = 28000
			ToggleOffResources = 7000
			ReceiveResourceMediaEffects = &/COMMON_EFFECTS/PowerDeliver
		}
		BatteryConsumer
		{
			Type = TypedResourceGridConsumer
			ResourceType = battery
			Storage = BatteryStorage
			DefaultPriority = &/PRIORITIES/Weapon_Supply
			ResupplyThreshold = 1000
			OperationalToggle = PowerToggle
		}

		RailgunBuffToggle
		{
			Type = BuffToggle
			BuffType = Railgun
		}

		RailgunOperationBuffToggle
		{
			Type = BuffToggle
			BuffType = RailgunOperation
		}

		ShotBuffProvider
		{
			Type = SelfBuffProvider
			BuffType = DSLaserBuff
			ChainsFromBuffType = Railgun
			BuffAmount = { BaseValue=0; BuffType=Railgun; BuffMode=Add; }
		}

		ReverseOperationBuffProvider
		{
			Type = AreaBuffProvider
			BuffType = RailgunReverseOperation
			BuffArea = [0, 9, 6, 1]
			OperationalToggle = IsOperational
			Criteria
			{
				Category = DSLII
				Rot = 0
				Left = 0
				Right = 6
				Top = 9
			}
		}

		AmmoProxy
		{
			Type = ResourceStorageProxy
			ResourceType = battery
			PartLocation = [0, 9]
			PartCriteria
			{
				Category = DSL_ammo
				Rot = 0
				Left = 0
				Right = 6
				Top = 9
			}
			ComponentID = LoadedAmmo
		}

/*
		CombinedBatteryStorageProxy
		{
			Type = ResourceStorageProxy
			ResourceType = battery
			PartLocation = [0, 9]
			PartCriteria
			{
				Category = DSL_ammo
				Rot = 0
				Left = 0
				Right = 6
				Top = 9
			}
			ComponentID = CombinedBatteryStorage
		}
*/
		Targetor
		{
			Type = UITargetor
			TargetorID = dsl_aim
			Weapons = [Weapon]
		}

		Weapon
		{
			Type = TurretWeapon
			Location = [3, -0.01]// Relative to upper-left corner of unrotated part.
			Rotation = -90d// Relative to unrotated part.
			OperationalToggle = IsOperational
			FireInterval = .2
			FiringArc = 360d
			RotateSpeed = 20d
			FireThresholdAngle = 1d
			AIFirepowerRating = { BaseValue=5000; BuffType=DSLaserBuff; BuffMode=Multiply; }

			TargetingEmitter = BeamEmitter

			ChainFireToggleComponent = IonBeamChainToggle

//			AllowEnemyStructureAutoTargeting = true
//			ProhibitTargetPartsFilter = &FriendlyPrismFilter // Don't force fire on friendly ion prisms!
//			SuppressWholeShipTargetOverlaysForPartsFilter = &FriendlyPrismFilter
//			SuppressShipWideExplicitTargetsWhenTargetingPartsFilter = &FriendlyPrismFilter
//			SuppressDirectControlWhenTargetingPartsFilter = &FriendlyPrismFilter
//			SuppressFirepowerEstimationWhenTargetingPartsFilter = &FriendlyPrismFilter
//			AutoExplicitTargetPartsFilter = &FriendlyPrismFilter

			SuppressWholeShipTargetOverlaysForPartsFilter = &FriendlyPrismFilter
			SuppressWholeShipTargetOverlaysWhenTargetingShipRelativePoints = true
			SuppressShipWideExplicitTargetsWhenTargetingPartsFilter = &FriendlyPrismFilter
			SuppressShipWideExplicitTargetsWhenTargetingShipRelativePoints = true
			SuppressDirectControlWhenTargetingPartsFilter = &FriendlyPrismFilter
			SuppressDirectControlWhenTargetingShipRelativePoints = true
			SuppressFirepowerEstimationWhenTargetingPartsFilter = &FriendlyPrismFilter

			SuppressFirepowerEstimationWhenTargetingShipRelativePoints = true

			SaveSelfTargetPartCategories = [deathstarlaser_director]
			SaveShipRelativeTargets = true
			HoldTargetAfterCancel = 3.0
			FirePermissionToggle = FireCmdToggle

			FriendlyPrismFilter
			{
				Enemies = false
				Junk = false
				OnlyPartCategories = [deathstarlaser_director]
			}

			AutoTargets
			[
				{
					TargetType = ShipParts
					Toggle = AutoTargetToggle
				}
			]

			CoverageLine
			{
				LineSprite
				{
					Texture = &/INDICATORS/RadialGradient
					VertexColor = [255, 255, 255, 191]
					UVRect = [.5, 0, 0, 1]
				}
				LineThickness = 2

				BeginCapSprite : LineSprite
				{
					UVRect = [0, 0, .5, 1]
				}
				BeginCapSize = [1, 2]

				EndCapSprite : LineSprite
				{
					UVRect = [.5, 0, .5, 1]
				}
				EndCapSize = [1, 2]
			}
		}

		BeamEmitter : &/SW_SHOTS/SuperLaserBeamGreen2/SuperLaser_beam_green2
		{
			Type = BeamEmitter
			ChainedTo = Weapon
			FireTrigger = Weapon
			GetTargetFrom = Weapon
			OperationalToggle = IsOperational
			Duration = .5
			ResourceStorage = BatteryStorage
			ResourcesUsed = 2000
			MinResourcesUsed = 1

			BeamMediaEffects : ^/0/BeamMediaEffects
			[
				: /BASE_SOUNDS/AudioExterior
				{
					Sound = "./Data/shots/ion_beam/ion_beam_emit.wav"
					Volume = 1
					MaxConcurrent = 1
					MaxConcurrentVolume = 1
					RampUpTime = .25
					RampDownTime = .25
				}
			]
		}



		GraphicsLeft
		{
			Type = Graphics
			Location = [3, 4]
			OperationalToggle = IsOperational
			Floor
			{
				Layer = "floors"
				Offset = [-2.5, 0]
				DamageLevels
				[
					{
						File = "../deathstar_superlaser/floor_side_B.png"
						Size = [1, 8]
					}
					{
						File = "../deathstar_superlaser/floor_side_B_33.png"
						Size = [1, 8]
					}
					{
						File = "../deathstar_superlaser/floor_side_B_66.png"
						Size = [1, 8]
					}
				]
			}
/*
			OperationalDoodad
			{
				Layer = "weapons"
				DamageLevels
				[
					{
						AnimationFiles
						[
							"doodads_on1.png"
							"doodads_on2.png"
							"doodads_on3.png"
							"doodads_on4.png"
							"doodads_on5.png"
							"doodads_on6.png"
						]
						Size = [2, 3]
						AnimationInterval = 0.1
						AnimationStartTime = Zero
					}
				]
			}
			NonOperationalDoodad
			{
				Layer = "weapons"
				DamageLevels
				[
					{
						File = "doodads_off.png"
						Size = [2, 3]
					}
				]
			}
			OperationalLighting
			{
				Layer = "lights_add"
				DamageLevels
				[
					{
						File = "lights.png"
						Size = [2, 3]
					}
				]
			}
*/
			Walls
			{
				Layer = "walls"
				Offset = [-2.5, 0]
				DamageLevels
				[
					{
						File = "wall_side_C.png"
						Size = [1, 8]
					}
					{
						File = "wall_side_C_33.png"
						Size = [1, 8]
					}
					{
						File = "wall_side_C_66.png"
						Size = [1, 8]
					}
				]
			}
			Roof
			{
				Layer = "roofs"
				DamageLevels
				[
					{
						File = "roof.png"
						Size = [6, 8]
					}
					{
						File = "roof_33.png"
						Size = [6, 8]
					}
					{
						File = "roof_66.png"
						Size = [6, 8]
					}
				]
			}
		}

		GraphicsRight
		{
			Type = Graphics
			Location = [3, 4]
			OperationalToggle = IsOperational
			Floor
			{
				Layer = "floors"
				Offset = [2.5, 0]
				DamageLevels
				[
					{
						File = "../deathstar_superlaser/floor_side_B.png"
						Size = [1, 8]
					}
					{
						File = "../deathstar_superlaser/floor_side_B_33.png"
						Size = [1, 8]
					}
					{
						File = "../deathstar_superlaser/floor_side_B_66.png"
						Size = [1, 8]
					}
				]
			}
/*
			OperationalDoodad
			{
				Layer = "weapons"
				DamageLevels
				[
					{
						AnimationFiles
						[
							"doodads_on1.png"
							"doodads_on2.png"
							"doodads_on3.png"
							"doodads_on4.png"
							"doodads_on5.png"
							"doodads_on6.png"
						]
						Size = [2, 3]
						AnimationInterval = 0.1
						AnimationStartTime = Zero
					}
				]
			}
			NonOperationalDoodad
			{
				Layer = "weapons"
				DamageLevels
				[
					{
						File = "doodads_off.png"
						Size = [2, 3]
					}
				]
			}
			OperationalLighting
			{
				Layer = "lights_add"
				DamageLevels
				[
					{
						File = "lights.png"
						Size = [2, 3]
					}
				]
			}
*/
			Walls
			{
				Layer = "walls"
				Offset = [2.5, 0]
				DamageLevels
				[
					{
						File = "wall_side_C.png"
						Size = [1, 8]
						MirrorU = true
					}
					{
						File = "wall_side_C_33.png"
						Size = [1, 8]
						MirrorU = true
					}
					{
						File = "wall_side_C_66.png"
						Size = [1, 8]
						MirrorU = true
					}
				]
			}
		}

/*
		BatterySprites
		{
			Type = ResourceSprites
			Location = [3, 4]
			ResourceStorage = BatteryStorage
			Layer = "doodads_low"
			AmmoLevels
			[
				{
					File = "batteries1.png"
					Size = [2, 1]
				}
				{
					File = "batteries2.png"
					Size = [2, 1]
				}
				{
					File = "batteries3.png"
					Size = [2, 1]
				}
				{
					File = "batteries4.png"
					Size = [2, 1]
				}
				{
					File = "batteries5.png"
					Size = [2, 1]
				}
				{
					File = "batteries6.png"
					Size = [2, 1]
				}
				{
					File = "batteries7.png"
					Size = [2, 1]
				}
				{
					File = "batteries8.png"
					Size = [2, 1]
				}
			]
		}
*/

		OperationEffects
		{
			Type = ToggleEffects
			Location = [3, 4]
			Toggle = IsOperational
			ToggledOnMediaEffects = &/COMMON_EFFECTS/PowerOn
			ToggledOffMediaEffects = &/COMMON_EFFECTS/PowerOff
		}

		DestroyedEffects
		{
			Type = DeathEffects
			MediaEffects = &/COMMON_EFFECTS/BigPartDestroyed
			Location = [3, 4]
		}

/*
		RecursiveDeath
		{
			Type = DeathEffects
			Location = [1, 8.5]

			HitEffects
			[
				{
					Type = AreaDamage
					Damage = 3000
					Radius = .6
					Falloff = 0
					Delay = .15
					Filter
					{
						OperationalHealth = true
						StructuralHealth = false
						Friendlies = true
					}
				}
			]
		}
*/

		Indicators
		{
			Type = IndicatorSprites
			Location = [3, 4]
			Layer = "indicators"
			Indicators
			[
				// Missing component
				{
					Toggle = RailgunBuffToggle
					ShowInBuildMode = true
					AtlasSprite
					{
						File = &/INDICATORS/MissingComponent
						Size = [1, 1]
					}
				}

				// Turned off.
				{
					Toggle = PowerToggle
					AtlasSprite
					{
						File = &/INDICATORS/PowerOff
						Size = [1, 1]
					}
				}

				// Out of power.
				{
					Toggle = BatteryStorage
					AtlasSprite
					{
						File = &/INDICATORS/NoPower
						Size = [1.5, 1.5]
					}
				}
			]
		}

		Blueprints
		{
			Type = BlueprintSprite
			File = "blueprints_emitter.png"
			Size = [6, 8]
		}
	}


	Stats
	{
		PowerCapacity = (&~/Part/Components/BatteryStorage/MaxResources) / 1000

		RecPower = &../StatsByCategory/0/Stats/PowerUsageContinuousMinutes
		RecCrew = (&RecPower) * 4
	}

	StatsByCategory
	[
		{
			NameKey = "StatCategories/IonBeam"
			Stats
			{
				DamagePerShotNear = (&~/Part/Components/BeamEmitter/HitOperational/HitEffects/1/Damage/BaseValue) * (&~/Part/Components/BeamEmitter/HitEffectsScaleOverRange/0)
				DamagePerShotFar = (&~/Part/Components/BeamEmitter/HitOperational/HitEffects/1/Damage/BaseValue) * (&~/Part/Components/BeamEmitter/HitEffectsScaleOverRange/1)
				HitInterval = &~/Part/Components/BeamEmitter/HitInterval
				DamageContinuousNear = (&DamagePerShotNear) / (&HitInterval)
				DamageContinuousFar = (&DamagePerShotFar) / (&HitInterval)

				DamagePerShot = &~/Part/Components/BeamEmitter/HitOperational/HitEffects/1/Damage/BaseValue
				//HitInterval = &~/Part/Components/BeamEmitter/HitInterval
				DamageContinuous = (&DamagePerShot) / (&HitInterval)

				Range = &~/Part/Components/BeamEmitter/Range/BaseValue
				Arc = 0
				ShotSpeed = Infinity
				PowerPerShot = (&~/Part/Components/BeamEmitter/ResourcesUsed) / 1000
				PowerUsageContinuousMinutes = (&PowerPerShot) / (&~/Part/Components/Weapon/FireInterval)
			}
		}
	]

	StatsNotesKey = "Stats/DeathStar_Notes"


}
