Part : &<./Data/ships/terran/base_part_terran.rules>/Part
{
	//IDs
	ID = SW.siege_turbolaser12x12

	//StringKeys
	NameKey = "Parts/SiegeTurbolaser12x12"
	IconNameKey = "Parts/SiegeTurbolaser12x12Icon"
	DescriptionKey = "Parts/SiegeTurbolaser12x12Desc"

	//Groups&Categories
	EditorGroups = ["WeaponsEnergy", "SWTechIII"]
	TypeCategories = [weapon, uses_power, is_crewed]
	RequiresCategories = [SW_Bridge]

	//Resources&Size&Health
	Resources
	[
		[SW.durasteel, 400]
		[coil, 160]	//
		[coil2, 20] //some extra
	]  //Cost = 30000 
	Size = [12, 12]
	MaxHealth = 168000

	//Rects

	//Selections
	SelectionPriority = 1
	SelectionTypeID = "cannons" 
	//SelectionTypeByRotation = true

	//PartSpecific
	AIValueFactor = 1
	InitialPenetrationResistance = 15
//	Density = 1 + (&~/Part/TurretDensity)
	TurretDensity = 3

	//ReceivableBuffs&ProhibitedBy
	ReceivableBuffs : ^/0/ReceivableBuffs [/*SWWeaponTimerBuff*/]

	//Doors&Etc

	//Editor
	EditorIcon
	{
		Texture
		{
			File = "icon.png"
			SampleMode = Linear
		}
		Size = [70, 92]
	}

	//Components
	Components : ^/0/Components, /*&<siege12x12green.rules>,*/ /* &<../SW_weapon_fire_alternate_2.rules>,*/ &<graphics.rules>
	{
		IsOperational
		{
			Type = MultiToggle
			Toggles = [PowerToggle, PartCrew, BatteryStorage]
			Mode = All
		}
		
		PowerToggle
		{
			Type = UIToggle
			ToggleID = "on_off"
			Default = 1
		}

		CommandConsumer
		{
			Type = CommandConsumer
			OperationalToggle = PowerToggle
			CommandPoints = 20
		}

		FireModeToggle
		{
			Type = UIToggle
			ToggleID = "fire_mode"
			Default = 1
			ToggledOnChoices = [0, 1, 2]
		}

		AutoTargetToggle
		{
			Type = ModeToggle
			Mode = FireModeToggle
			OnModes = [1, 2]
		}

		AutoFireToggle
		{
			Type = ModeToggle
			Mode = FireModeToggle
			OnMode = 2
		}

		FireAlternatingToggle
		{
			Type = UIToggle
			ToggleID = "fire_alternating"
			Default = 0
		}

		MunitionType
		{
			Type = UIToggle
			ToggleID = "SW.munition_type"
			Default = 0
			AvailableChoices = [0, 1, 2]
			AlwaysAllowInBuildMode = true
			RequiresCommand = false
		}

		RedMunitionToggle
		{
			Type = ModeToggle
			Mode = MunitionType
			OnMode = 0
		}
		RedMunitionComponents
		{
			Type = ToggledComponents
			Toggle = RedMunitionToggle
			IncludeInBlueprints = false
			Components = &<siege12x12red.rules>/Components
		}

		BlueMunitionToggle
		{
			Type = ModeToggle
			Mode = MunitionType
			OnMode = 1
		}
		BlueMunitionComponents
		{
			Type = ToggledComponents
			Toggle = BlueMunitionToggle
			IncludeInBlueprints = false
			Components = &<siege12x12blue.rules>/Components
		}

		GreenMunitionToggle
		{
			Type = ModeToggle
			Mode = MunitionType
			OnMode = 2
		}
		GreenMunitionComponents
		{
			Type = ToggledComponents
			Toggle = GreenMunitionToggle
			IncludeInBlueprints = false
			Components = &<siege12x12green.rules>/Components
		}

		ExteriorType
		{
			Type = UIToggle
			ToggleID = "SW.exterior_type"
			Default = 0
			ToggledOnChoices = [0,1]
		}

		WhiteExteriorToggle
		{
			Type = ModeToggle
			Mode = ExteriorType
			OnMode = 0
		}
		WhiteExteriorComponents
		{
			Type = ToggledComponents
			Toggle = WhiteExteriorToggle
			//IncludeInBlueprints = true
			Components = &<turbolaser_siege_white.rules>/Components
		}
		GreyExteriorToggle
		{
			Type = ModeToggle
			Mode = ExteriorType
			OnMode = 1
		}
		GreyExteriorComponents
		{
			Type = ToggledComponents
			Toggle = GreyExteriorToggle
			//IncludeInBlueprints = true
			Components = &<turbolaser_siege_grey.rules>/Components
		}

		AmmoPrereq
		{
			Type = MultiResourceStorage
			ResourceType = battery
			ResourceStorages = [BatteryStorage]
			//ToggleOnResources = 19001
			//ToggleOffResources = 3750
		}
		BatteryStorage
		{
			Type = ResourceStorage
			ResourceType = battery
			MaxResources = 20000
			ToggleOnResources = 10001
			ReceiveResourceMediaEffects = &/COMMON_EFFECTS/PowerDeliver
		}
		BatteryConsumer
		{
			Type = ResourceConsumer
			ResourceType = battery
			Storage = BatteryStorage
			DefaultPriority = &/PRIORITIES/Weapon_Supply
			ResupplyThreshold = 1000
			OperationalToggle = PowerToggle

		}
/*
		//for alternate fire 120% * 1 s = 1.20 s
		WeaponTimerBuffProvider
		{
			Type = SelfBuffProvider
			BuffType = SWWeaponTimerBuff
			BuffAmount = 320%
		}
*/
		Turret
		{
			Type = TurretWeapon
			Location = [6, 6] // Relative to upper-left corner of unrotated part.
			Rotation = -90d // Relative to unrotated part.
			OperationalToggle = IsOperational
			AutoFireToggle = AutoFireToggle
			FireInterval = 0 // Uses separate fire timer.
			FiringArc = 45d //180d
			RotateSpeed = 2d
			FireThresholdAngle = 1d
			HoldTargetAfterCancel = 0.5
			AIFirepowerRating = 10000
			FirePermissionToggle = FirePermissionToggle //FireModeToggle //FirePermissionToggle
			IgnoreSourceShipLOSChecks = true
			IgnoreSourceShipLowLOSChecks = true
			AllowFireWithBlockedLOS = false
			Emitter = WeaponEmitterBase

			AutoTargets
			[
				{
					TargetType = ShipParts
					Toggle = AutoTargetToggle
				}
			]

			BlueprintArcSprite
			{
				Texture = &/INDICATORS/WeaponArc
				Size = [0, 1.5]
				Color = [255, 0, 0, 63]
			}
			BlueprintArcRadius = 10
			BlueprintArcSpriteSegments = 64

			CoverageSectorArc
			{
				Texture = &/INDICATORS/VerticalGradient
				VertexColor = [255, 255, 255, 51]
				QuadCount = 64
			}
		}

/*
		ReloadProgressBar
		{
			Type = ProgressBar
			OperationalToggle = IsOperational
			ShowProgressFor = Turret
		}
*/

		ShootSynchronizedComponents
		{
			Type = ToggledComponents
			Toggle = FireAlternatingToggle
			Invert = true
			Components
			{
				FireTimer
				{
					Type = Timer
					OperationalToggle = IsOperational
					Duration = 1.25*2
					AutoStart = true
					StartTrigger = Turret
				}

				ReloadProgressBar
				{
					Type = ProgressBar
					OperationalToggle = IsOperational
					ShowProgressFor = FireTimer
					Invert = true
				}

				ShootLeftTrigger
				{
					Type = TriggerProxy
					ComponentID = Turret
				}

				ShootRightTrigger
				{
					Type = TriggerProxy
					ComponentID = Turret
				}
			}
		}

		ShootAlternatingComponents
		{
			Type = ToggledComponents
			Toggle = FireAlternatingToggle
			Components
			{
				FireTimer
				{
					Type = Timer
					OperationalToggle = IsOperational
					Duration = 1.25
					AutoStart = true
					StartTrigger = Turret
				}

				ReloadProgressBar
				{
					Type = ProgressBar
					OperationalToggle = IsOperational
					ShowProgressFor = FireTimer
					Invert = true
				}

				ShootCycle
				{
					Type = ModeCycle
					ModeRange = [0, 1]
					IncrementTrigger = Turret
					StartingMode = 1 // First shot will switch to mode 0.
				}

				ShootLeftTrigger
				{
					Type = ModeTrigger
					Mode = ShootCycle
					TriggerInModes = [0]
				}

				ShootRightTrigger
				{
					Type = ModeTrigger
					Mode = ShootCycle
					TriggerInModes = [1]
					OperationalToggle = FireAlternatingToggle
				}
			}
		}

		FireTimerProxy
		{
			Type = ToggleProxy
			ComponentID = FireTimer
		}
		FirePermissionToggle
		{
			Type = MultiToggle
			Toggles = [FireTimerProxy, FireModeToggle]
			Mode = All
		}

		ShootTrigger1
		{
			Type = TriggerProxy
			ComponentID = ShootLeftTrigger
		}
		ShootTrigger2
		{
			Type = TriggerProxy
			ComponentID = ShootRightTrigger
		}

		WeaponEmitterBase // Doesn't actually fire; only used for targeting and as a base for the left and right emitters.
		{
			Type = BulletEmitter
			ChainedTo = Turret
			FireTrigger // none, but field is required
			GetTargetFrom = Turret
			Location = [0, 0]
			OperationalToggle = IsOperational
			FireDelay = .6
			Bullet = &/SW_SHOTS/greenmedlasershot
			SourceShipCollisions = false
			ResourceStorage = BatteryStorage
			ResourcesUsed = 500
		}
		/*
		TurretGraphics
		{
			Type = Graphics
			ChainedTo = Turret
			Location = [0, 0]
			Rotation = 90d
			//OperationalToggle = IsOperational
			Floor
			{
				Layer = "roof_doodads"
				DamageLevels
				[
					{
						File = "turret[12,12].png"
						NormalsFile = "turret_normals.png"
						Size = [9, 12]
					}
				]
			}
		}
		*/
		BarrelGraphics
		{
			Type = Graphics
			ChainedTo = Turret
			Location = [0, 0]
			Rotation = 90d
			//OperationalToggle = IsOperational
			Floor
			{
				Layer = "roof_doodads"
				Offset = [-60/64, -7.8125] //[7.8125, -1] //-64,-500 //midwidth42
				DamageLevels
				[
					{
						File = "barrel[1,4]01.png"
						NormalsFile = "barrel_normals.png"
						Size = [1, 4]
					}
				]
			}
			Walls : &Floor
			{
				Offset = [60/64, -7.8125] //[7.8125, 1]
			}
		}

		CrewLocation
		{
			Type = CrewLocation
			Location = [3.04, 5.59375]//[3.546875, 5.59375] //-157,-26
			//Rotation = 180d
		}
		CrewLocation2
		{
			Type = CrewLocation
			Location = [4.153125, 5.59375]//[4.453125, 5.59375] //-99,-26
			//Rotation = 180d
		}
		CrewLocation3
		{
			Type = CrewLocation
			Location = [8.953125, 5.59375]//[8.453125, 5.59375]
			//Rotation = 180d
		}
		CrewLocation4
		{
			Type = CrewLocation
			Location = [7.846875, 5.59375]//[7.546875, 5.59375] //-22
			//Rotation = 180d
		}
		CrewLocation5
		{
			Type = CrewLocation
			Location = [3.04, 7.99375]//[3.546875, 7.59375]
			//Rotation = 180d
		}
		CrewLocation6
		{
			Type = CrewLocation
			Location = [4.153125, 7.99375]//[4.453125, 7.59375]
			//Rotation = 180d
		}
		CrewLocation7
		{
			Type = CrewLocation
			Location = [8.953125, 7.99375]//[8.453125, 7.59375]
			//Rotation = 180d
		}
		CrewLocation8
		{
			Type = CrewLocation
			Location = [7.846875, 7.99375]//[7.546875, 7.59375]
			//Rotation = 180d
		}
		PartCrew
		{
			Type = PartCrew
			Crew = 8
			DefaultPriority = &/PRIORITIES/Weapon_Crew
			PrerequisitesBeforeCrewing = [PowerToggle]
			HighPriorityPrerequisites = [AmmoPrereq, BatteryStorage]
			CrewDestinations
			[
				&../../CrewLocation/Location
				&../../CrewLocation2/Location
				&../../CrewLocation3/Location
				&../../CrewLocation4/Location
				&../../CrewLocation5/Location
				&../../CrewLocation6/Location
				&../../CrewLocation7/Location
				&../../CrewLocation8/Location
			]
			CrewLocations
			[
				CrewLocation
				CrewLocation2
				CrewLocation3
				CrewLocation4
				CrewLocation5
				CrewLocation6
				CrewLocation7
				CrewLocation8
			]
		}

		DestroyedEffects
		{
			Type = DeathEffects
			MediaEffects = &/COMMON_EFFECTS/BigPartDestroyed
			Location = [6, 6]
		}

		Indicators
		{
			Type = IndicatorSprites
			Location = [6, 6]
			Layer = "indicators"
			Indicators
			[
				// Turned off.
				{
					Toggle = PowerToggle
					AtlasSprite
					{
						File = &/INDICATORS/PowerOff
						Size = [2, 2]
					}
				}

				// Out of power.
				{
					Toggle = BatteryStorage
					AtlasSprite
					{
						File = &/INDICATORS/NoPower
						Size = [2, 2]
					}
				}

				// No crew.
				{
					Toggle = PartCrew
					AtlasSprite
					{
						File = &/INDICATORS/NoCrew
						Size = [2, 2]
					}
				}
			]
		}

		Blueprints
		{
			Type = BlueprintSprite
			File = "blueprints.png"
			Size = [12, 12]
		}
	}

   //Stats
	Stats
	{
		CrewRequired = &~/Part/Components/PartCrew/Crew
		PowerCapacity = (&~/Part/Components/BatteryStorage/MaxResources) / 1000

		RecPower = &../StatsByCategory/0/Stats/PowerPerSecond
		RecCrew = (&CrewRequired) + (&RecPower) * 4

//		ROF = 2 / (&~/Part/Components/WeaponTimerBuffProvider/BuffAmount)
//		Range = &~/Part/Components/WeaponEmitter/Bullet/Range
//		Arc = deg(&~/Part/Components/Turret/FiringArc)
//		TurretSpeed = deg(&~/Part/Components/Turret/RotateSpeed)
	}

   //Stats 
	StatsByCategory
	[
		&~/TurretStats
		&<siege12x12red.rules>/LaserStats
		&<siege12x12blue.rules>/LaserStats
		&<siege12x12green.rules>/LaserStats
	]
/*
	StatsByCategory
	[
		&~/TurretStats
		{
			NameKey = "StatCategories/HeavyGreenConcussiveBlastLasershot"
			Stats
			{
				ShieldDamagePerShot = &~/Part/Components/WeaponEmitter/Bullet/Components/Hit/HitShield/HitEffects/0/Damage
				ShieldDamagePerSecond = (&ShieldDamagePerShot) * (&~/TurretStats/Stats/ROF)
				ShieldDamage = [&../ShieldDamagePerShot, &../ShieldDamagePerSecond]
//				DamagePerShot = &~/Part/Components/WeaponEmitterBase/Bullet/Components/Hit/HitOperational/HitEffects/0/Damage
//				DamagePerSecond = (&DamagePerShot) * (&~/TurretStats/Stats/ROF)
//				Damage = [&../DamagePerShot, &../DamagePerSecond]
//				Spread = deg(&~/Part/Components/WeaponEmitter/Spread/1)
				ShotSpeed = &~/Part/Components/WeaponEmitter/Bullet/Speed
				ShotHP = &~/Part/Components/WeaponEmitter/Bullet/Components/Targetable/Health
//				PowerPerShot = (&~/Part/Components/WeaponEmitter/ResourcesUsed) / 1000
//				PowerPerSecond = (&PowerPerShot) * (&~/Part/Stats/ROF)
//				ShotPowerUsage = [&../PowerPerShot, &../PowerPerSecond]
			}
		}
	]
	*/
}

TurretStats
{
	NameKey = "StatCategories/Turret"
	Stats
	{
		Barrels = 2
		//ReloadTime = &~/Part/Components/WeaponTimerBuffProvider/BuffAmount
		Salvo = [&../Barrels, &../ROF]
		ROF = 1 / (&~/Part/Components/ShootAlternatingComponents/Components/FireTimer/Duration)
		Range = &~/Part/Components/WeaponEmitterBase/Bullet/Range
		Arc = deg(&~/Part/Components/Turret/FiringArc)
		TurretSpeed = deg(&~/Part/Components/Turret/RotateSpeed)
		PowerPerShot = (&~/Part/Components/WeaponEmitterBase/ResourcesUsed) / 1000
		PowerPerSecond = (&PowerPerShot) * (&ROF)
		ShotPowerUsage = [&../PowerPerShot, &../PowerPerSecond]
		//Spread = deg(&~/BulletEmitterBase/Spread/1)
		//ShotSpeed = &~/Components/BulletEmitterBase/Bullet/Speed
	}
}