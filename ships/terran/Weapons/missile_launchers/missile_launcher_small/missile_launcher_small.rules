Part : <./Data/ships/terran/base_part_terran.rules>/Part
{
    //IDs
    ID = SW.missile_launcher_small
    //StringKeys
	NameKey = "Parts/MissileLauncher"
	IconNameKey = "Parts/MissileLauncherIcon"
	DescriptionKey = "Parts/MissileLauncherDesc"

	//Groups&Categories
	EditorGroups = ["WeaponsProjectile", "SWTechI"]
	TypeCategories = [weapon, uses_clusters, uses_concussions, uses_hexs, uses_intruders, uses_launcher_parts, is_crewed, SW_TECH_I]
	//RequiresCategories = []

	//Resources&Size&Health
	Resources
	[
		[steel, 60]
		[coil2, 20]
		[processor, 1]
	]
	Size = [1, 3]
	MaxHealth = 1000

	//Rects
	PhysicalRect = [0, 2, 1, 1]
	RectColliderRectType = Normal
	SaveRect = &PhysicalRect

	//Selections
	SelectionPriority = 1
	SelectionTypeID = "SW_missile_launcher_small"
	SelectionTypeByRotation = true

	//ReceivableBuffs&Prohibits
	ReceivableBuffs : ^/0/ReceivableBuffs []
	ProhibitedBy : ^/0/ProhibitedBy [tall, SW_tall]
	ProhibitRects
	[
		[default, [-1, -10, 3, 5]]
		[tall, [-1, -5, 3, 5]]
		[SW_tall, [-2, -1, 2, 5]]
		[SW_tall, [1, -1, 2, 5]]
	]

	//Doors&Etc
	AllowedDoorLocations
	[
		[-1, 2] //left
 		[0, 3]	//bottom
		[1, 2]	//right
	]

	//Editor
	EditorIcon = &<mini_cluster/missile_launcher_mini_cluster.rules>/EditorIcon

	//Components&Inheritance
	Components : ^/0/Components
    {
		IsOperational
		{
			Type = MultiToggle
			Toggles = [PowerToggle, PartCrew]
			Mode = All
		}

		PowerToggle
		{
			Type = UIToggle
			ToggleID = "on_off"
			Default = 1
			RequiresCommand = false
		}

		CommandConsumer
		{
			Type = CommandConsumer
			OperationalToggle = PowerToggle
			CommandPoints = 2
		}

		FireModeToggle
		{
			Type = UIToggle
			ToggleID = "fire_mode"
			Default = 1
			ToggledOnChoices = [0, 1, 2]
		}
		AutoTargetToggle
		{
			Type = ModeToggle
			Mode = FireModeToggle
			OnModes = [1, 2]
		}
		AutoFireToggle
		{
			Type = ModeToggle
			Mode = FireModeToggle
			OnMode = 2
		}
		FireAlternatingToggle
		{
			Type = UIToggle
			ToggleID = "fire_alternating"
			Default = 0
			AvailableChoices = [0]
		}

		SW_MissileType
		{
			Type = UIToggle
			ToggleID = "SW.missile_type"
			Default = 0
			AvailableChoices = [0, 1, 2, 3]
			AlwaysAllowInBuildMode = true
			RequiresCommand = false
		}

		ClusterMissilesToggle
		{
			Type = ModeToggle
			Mode = SW_MissileType
			OnMode = 0
		}
		ClusterMissilesComponents
		{
			Type = ToggledComponents
			Toggle = ClusterMissilesToggle
			IncludeInBlueprints = true
			Components = &<mini_cluster/missile_launcher_mini_cluster.rules>/Components
		}

		IntruderMissilesToggle
		{
			Type = ModeToggle
			Mode = SW_MissileType
			OnMode = 1
		}
		IntruderMissilesComponents
		{
			Type = ToggledComponents
			Toggle = IntruderMissilesToggle
			IncludeInBlueprints = true
			Components = &<intruder/missile_launcher_intruder.rules>/Components
		}

		ConcussionMissilesToggle
		{
			Type = ModeToggle
			Mode = SW_MissileType
			OnMode = 2
		}
		ConcussionMissilesComponents
		{
			Type = ToggledComponents
			Toggle = ConcussionMissilesToggle
			IncludeInBlueprints = true
			Components = &<concussion/missile_launcher_concussion.rules>/Components
		}

		HEXMissilesToggle
		{
			Type = ModeToggle
			Mode = SW_MissileType
			OnMode = 3
		}
		HEXMissilesComponents
		{
			Type = ToggledComponents
			Toggle = HEXMissilesToggle
			IncludeInBlueprints = true
			Components = &<hex/missile_launcher_hex.rules>/Components
		}

		CommonDelayTimerShort
		{
			Type = Timer
			Duration = 2
			AutoStart = true
			StartTrigger = CommonLoadedTriggerProxy
		}
		CommonReloadTimerShort
		{
			Type = Timer
			Duration = 2
			AutoStart = true
			StartTrigger = CommonReloadResetTriggerProxy
		}
		CommonReloadTimerMed
		{
			Type = Timer
			Duration = 6
			AutoStart = true
			StartTrigger = CommonReloadResetTriggerProxy
		}
		CommonReloadTimerLong
		{
			Type = Timer
			Duration = 10
			AutoStart = true
			StartTrigger = CommonReloadResetTriggerProxy
		}
		CommonReloadResetTriggerProxy
		{
			Type = TriggerProxy
			ComponentID = CommonReloadResetTrigger
		}
		CommonLoadedTriggerProxy
		{
			Type = TriggerProxy
			ComponentID = CommonLoadedTrigger
		}

		MissilesPrereqToggleProxy
		{
			Type = ToggleProxy
			ComponentID = MissilesPrereq
		}

		CrewLocation1
		{
			Type = CrewLocation
			Location = [0.5, 2.5]
			Rotation = 0d
		}
		PartCrew
		{
			Type = PartCrew
			Crew = 1
			DefaultPriority = &/PRIORITIES/Weapon_Crew
			PrerequisitesBeforeCrewing = [PowerToggle]
			HighPriorityPrerequisites = [MissilesPrereqToggleProxy]
			CrewDestinations
			[
				[ 0.5, 2.5]
			]
			CrewLocations
			[
				CrewLocation1
			]
		}

		OperationEffects
		{
			Type = ToggleEffects
			Location = [1, 3]
			Toggle = IsOperational
			ToggledOnMediaEffects = &/COMMON_EFFECTS/MachinesOn
			ToggledOffMediaEffects = &/COMMON_EFFECTS/MachinesOff
		}

		BlueprintsCluster
		{
			Type = BlueprintSprite
			File = "blueprints_cluster.png"
			Size = [1, 3]
			//Offset = [0, -.5]

			ShowOnlyInToggleMode
			{
				ToggleID = SW.missile_type
				Mode = 3
			}
		}
		BlueprintsIntruder
		{
			Type = BlueprintSprite
			File = "blueprints_intruder.png"
			Size = [1, 3]

			ShowOnlyInToggleMode
			{
				ToggleID = SW.missile_type
				Mode = 1
			}
		}
		BlueprintsConcussion
		{
			Type = BlueprintSprite
			File = "blueprints_concussion.png"
			Size = [1, 3]

			ShowOnlyInToggleMode
			{
				ToggleID = SW.missile_type
				Mode = 2
			}
		}

		BlueprintsHEX
		{
			Type = BlueprintSprite
			File = "blueprints_hex.png"
			Size = [1, 3]

			ShowOnlyInToggleMode
			{
				ToggleID = SW.missile_type
				Mode = 0
			}
		}
    }

    Stats
    {
        CrewRequired = &~/Part/Components/PartCrew/Crew
        MiniClusterCapacity = 6
        IntruderMissileCapacity = 1
        ConcussionMissileCapacity = 1
        HEXMissileCapacity = 3

        RecCrew = (&CrewRequired) + (&<hex/missile_launcher_hex.rules>/MissileStats/Stats/ROF) * (&<hex/missile_launcher_hex.rules>/MissileStats/Stats/MissileParts) * 4
    }

    StatsNotesKey = "Stats/MissileLauncherNotes"
}

/**

Cody blob

Based on analyzing the code outside the XML tags, I detect the following:

- The code is defining rules for a missile launcher component in a game. 

- It is using an XML-like format with tags like <missile_launcher> to define different attributes of the component.

- There are tags for things like <type>, <name>, <description>, <model_name>, <icon>, etc. to specify metadata about the component.

- There are also tags like <damage> and <energy_required> to define gameplay attributes. 

- The rules define multiple missile launcher variants by having multiple <missile_launcher> blocks.

- Each variant has a unique id specified in the <id> tag.

- The code is formatted with consistent indentation of 2 spaces.

To complete this code, I would:

- Add a new <missile_launcher> block for another variant.

- Give it a unique <id> value.

- Specify appropriate metadata tags like <name> and <description>.

- Define gameplay tags like <damage> and <energy_required>.

- Follow the same formatting and syntax as the existing code.

For example:

<missile_launcher>

  <id>missile_launcher_new</id>
  
  <type>missile_launcher</type>

  <name>New Missile Launcher</name>

  <description>A new rapid-fire missile launcher variant</description>  

  <model_name>missile_launcher_model</model_name>
  
  <icon>missile_launcher_icon.png</icon>

  <damage>10</damage>

  <energy_required>20</energy_required>

</missile_launcher>

*/