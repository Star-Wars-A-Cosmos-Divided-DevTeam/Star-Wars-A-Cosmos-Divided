Part : <./Data/ships/terran/base_part_terran.rules>/Part
{
	//IDs
	ID = SW.missile_launcher_tester //_medium?
	//OtherIDs = [SW.missile_launcher_tester]
	//StringKeys
	NameKey = "Parts/MissileLauncher"
	IconNameKey = "Parts/MissileLauncherIcon"
	DescriptionKey = "Parts/MissileLauncherDesc"

	//Groups&Categories
	EditorGroups = ["WeaponsProjectile", "SWTechII"]
	TypeCategories = [weapon, uses_clusters, uses_concussions, uses_hexs, uses_intruders, uses_launcher_parts, is_crewed, SW_TECH_II]
	//RequiresCategories = []

	//Resources&Size&Health
	Resources
	[
		[steel, 60]
		[coil2, 20]
		[processor, 1]
	]
	Size = [2, 4]
	MaxHealth = 6000

	//Rects
	PhysicalRect = [0, 1, 2, 3]
	RectColliderRectType = Normal
	SaveRect = &PhysicalRect

	//Selections
	SelectionPriority = 1
	SelectionTypeID = "SW_missile_launcher" //_medium?
	SelectionTypeByRotation = true

	//ReceivableBuffs&Prohibits
	ReceivableBuffs : ^/0/ReceivableBuffs []
	//ProhibitedBy : ^/0/ProhibitedBy [tall]
	ProhibitAbove = 2

	//Doors&Etc
	AllowedDoorLocations
	[
		[-1, 2]
		[2, 2]
	]
	ForceManhattanPathInPart = true
	BlockedTravelCellDirections
	[
		{
			Key = [0, 3]
			Value = [Right]
		}
		{
			Key = [1, 3]
			Value = [Left]
		}
	]
	ExternalWallsByCell
	[
		{
			Key = [0, 1]
			Value = [TopLeft, Bottom, BottomLeft, Left]
		}
		{
			Key = [1, 1]
			Value = [TopRight, Right, BottomRight, Bottom]
		}
	]
	InternalWallsByCell
	[
		{
			Key = [0, 0]
			Value = [Left, TopLeft, Top, TopRight]
		}
		{
			Key = [1, 0]
			Value = [Right, TopRight, Top, TopLeft]
		}
	]

	//Editor
	EditorIcon = &<cluster/missile_launcher_cluster.rules>/EditorIcon

	//Components&Inheritance
	Components : ^/0/Components
	{
		IsOperational
		{
			Type = MultiToggle
			Toggles = [PowerToggle, PartCrew]
			Mode = All
		}

		PowerToggle
		{
			Type = UIToggle
			ToggleID = "on_off"
			Default = 1
			RequiresCommand = false
		}

		CommandConsumer
		{
			Type = CommandConsumer
			OperationalToggle = PowerToggle
			CommandPoints = 5
		}

		FireModeToggle
		{
			Type = UIToggle
			ToggleID = "fire_mode"
			Default = 1
			ToggledOnChoices = [0, 1, 2]
		}
		AutoTargetToggle
		{
			Type = ModeToggle
			Mode = FireModeToggle
			OnModes = [1, 2]
		}
		AutoFireToggle
		{
			Type = ModeToggle
			Mode = FireModeToggle
			OnMode = 2
		}
		FireAlternatingToggle
		{
			Type = UIToggle
			ToggleID = "fire_alternating"
			Default = 0
			AvailableChoices = [0]
		}
/*
		MissileType
		{
			Type = UIToggle
			ToggleID = "missile_type"
			Default = 0
			AlwaysAllowInBuildMode = true
		}
*/
		SW_MissileType
		{
			Type = UIToggle
			ToggleID = "SW.missile_type"
			Default = 0
			AvailableChoices = [0, 1, 2, 3]
			AlwaysAllowInBuildMode = true
			RequiresCommand = false
		}

		ClusterMissilesToggle
		{
			Type = ModeToggle
			Mode = SW_MissileType
			OnMode = 0
		}
		ClusterMissilesComponents
		{
			Type = ToggledComponents
			Toggle = ClusterMissilesToggle
			IncludeInBlueprints = true
			Components = &<cluster/missile_launcher_cluster.rules>/Components
		}

		IntruderMissilesToggle
		{
			Type = ModeToggle
			Mode = SW_MissileType
			OnMode = 1
		}
		IntruderMissilesComponents
		{
			Type = ToggledComponents
			Toggle = IntruderMissilesToggle
			IncludeInBlueprints = true
			Components = &<intruder/missile_launcher_intruder.rules>/Components
		}

		ConcussionMissilesToggle
		{
			Type = ModeToggle
			Mode = SW_MissileType
			OnMode = 2
		}
		ConcussionMissilesComponents
		{
			Type = ToggledComponents
			Toggle = ConcussionMissilesToggle
			IncludeInBlueprints = true
			Components = &<concussion/missile_launcher_concussion.rules>/Components
		}

		HEXMissilesToggle
		{
			Type = ModeToggle
			Mode = SW_MissileType
			OnMode = 3
		}
		HEXMissilesComponents
		{
			Type = ToggledComponents
			Toggle = HEXMissilesToggle
			IncludeInBlueprints = true
			Components = &<hex/missile_launcher_hex.rules>/Components
		}

		CommonDelayTimerShort
		{
			Type = Timer
			Duration = 2
			AutoStart = true
			StartTrigger = CommonLoadedTriggerProxy
		}
		CommonReloadTimerShort
		{
			Type = Timer
			Duration = 2
			AutoStart = true
			StartTrigger = CommonReloadResetTriggerProxy
		}
		CommonReloadTimerMed
		{
			Type = Timer
			Duration = 6
			AutoStart = true
			StartTrigger = CommonReloadResetTriggerProxy
		}
		CommonReloadTimerLong
		{
			Type = Timer
			Duration = 10
			AutoStart = true
			StartTrigger = CommonReloadResetTriggerProxy
		}
		CommonReloadResetTriggerProxy
		{
			Type = TriggerProxy
			ComponentID = CommonReloadResetTrigger
		}
		CommonLoadedTriggerProxy
		{
			Type = TriggerProxy
			ComponentID = CommonLoadedTrigger
		}

		MissilesPrereqToggleProxy
		{
			Type = ToggleProxy
			ComponentID = MissilesPrereq
		}

		CrewLocation1
		{
			Type = CrewLocation
			Location = [.54, 3.44]
			Rotation = -135d
		}
		CrewLocation2
		{
			Type = CrewLocation
			Location = [1.46, 3.44]
			Rotation = 135d
		}
		PartCrew
		{
			Type = PartCrew
			Crew = 2
			DefaultPriority = &/PRIORITIES/Weapon_Crew
			PrerequisitesBeforeCrewing = [PowerToggle]
			HighPriorityPrerequisites = [MissilesPrereqToggleProxy]
			CrewDestinations
			[
				[ .5, 3.44]
				[1.5, 3.44]
			]
			CrewLocations
			[
				CrewLocation1
				CrewLocation2
			]
		}

		Graphics
		{
			Type = Graphics
			Location = [1, 2]
			OperationalToggle = IsOperational
			Floor
			{
				Layer = "floors"
				Offset = [0, 1]
				DamageLevels
				[
					{
						File = "sprites/floor.png"
						Size = [2, 2]
					}
					{
						File = "sprites/floor_33.png"
						Size = [2, 2]
					}
					{
						File = "sprites/floor_66.png"
						Size = [2, 2]
					}
				]
			}
			OperationalDoodad
			{
				Layer = "doodads_low"
				Offset = [0, 1.5]
				DamageLevels
				[
					{
						AnimationFiles
						[
							"sprites/doodads_on1.png"
							"sprites/doodads_on2.png"
							"sprites/doodads_on3.png"
							"sprites/doodads_on4.png"
							"sprites/doodads_on5.png"
							"sprites/doodads_on6.png"
							"sprites/doodads_on7.png"
							"sprites/doodads_on8.png"
						]
						Size = [2, 1]
						AnimationInterval = 0.12
						AnimationStartTime = Zero
					}
					{
						AnimationFiles
						[
							"sprites/doodads_on1_33.png"
							"sprites/doodads_on2_33.png"
							"sprites/doodads_on3_33.png"
							"sprites/doodads_on4_33.png"
							"sprites/doodads_on5_33.png"
							"sprites/doodads_on6_33.png"
							"sprites/doodads_on7_33.png"
							"sprites/doodads_on8_33.png"
						]
						Size = [2, 1]
						AnimationInterval = 0.12
						AnimationStartTime = Zero
					}
					{
						AnimationFiles
						[
							"sprites/doodads_on1_66.png"
							"sprites/doodads_on2_66.png"
							"sprites/doodads_on3_66.png"
							"sprites/doodads_on4_66.png"
							"sprites/doodads_on5_66.png"
							"sprites/doodads_on6_66.png"
							"sprites/doodads_on7_66.png"
							"sprites/doodads_on8_66.png"
						]
						Size = [2, 1]
						AnimationInterval = 0.12
						AnimationStartTime = Zero
					}
				]
			}
			NonOperationalDoodad
			{
				Layer = "doodads_low"
				Offset = [0, 1.5]
				DamageLevels
				[
					{
						File = "sprites/doodads_off.png"
						Size = [2, 1]
					}
					{
						File = "sprites/doodads_off_33.png"
						Size = [2, 1]
					}
					{
						File = "sprites/doodads_off_66.png"
						Size = [2, 1]
					}
				]
			}
			OperationalLighting
			{
				Layer = "lights_add"
				Offset = [0, 1]
				DamageLevels
				[
					{
						File = "sprites/lights.png"
						Size = [2, 2]
					}
				]
			}
			Walls
			{
				Layer = "walls"
				Offset = [0, 1]
				DamageLevels
				[
					{
						File = "sprites/walls.png"
						Size = [2, 2]
					}
					{
						File = "sprites/walls_33.png"
						Size = [2, 2]
					}
					{
						File = "sprites/walls_66.png"
						Size = [2, 2]
					}
				]
			}
			Roof
			{
				Layer = "roofs"
				DamageLevels
				[
					{
						File = "sprites/roof.png"
						NormalsFile = "sprites/roof_normals.png"
						Size = [2, 4]
					}
					{
						File = "sprites/roof_33.png"
						NormalsFile = "sprites/roof_normals_33.png"
						Size = [2, 4]
					}
					{
						File = "sprites/roof_66.png"
						NormalsFile = "sprites/roof_normals_66.png"
						Size = [2, 4]
					}
				]
			}
			OperationalRoofDoodad
			{
				Layer = "roof_doodads"
				Offset = [0, 0.5]
				DamageLevels
				[
					{
						File = "sprites/roof_glows.png"
						Size = [2, 1]
					}
					{
						File = "sprites/roof_glows_33.png"
						Size = [2, 1]
					}
					{
						File = "sprites/roof_glows_66.png"
						Size = [2, 1]
					}
				]
			}
			OperationalRoofLighting
			{
				Layer = "roof_lights_fancy"
				Offset = [0, 1.17]
				DamageLevels
				[
					{
						File = "./Data/ships/common/light_blob.png"
						Size = [3.5, 3.5]
						Z = 0.5 // Controls the "height" of the light for the purposes of normal mapping. Set to -1 (or any negative number) to disable normal lighting for this light.
						VertexColor = [255*1.5, 0, 0]
					}
				]
			}
		}

		OperationEffects
		{
			Type = ToggleEffects
			Location = [1, 2]
			Toggle = IsOperational
			ToggledOnMediaEffects = &/COMMON_EFFECTS/MachinesOn
			ToggledOffMediaEffects = &/COMMON_EFFECTS/MachinesOff
		}

		BlueprintsCluster
		{
			Type = BlueprintSprite
			File = "blueprints_cluster.png"
			Size = [2, 5]
			Offset = [0, -.5]

			ShowOnlyInToggleMode
			{
				ToggleID = SW.missile_type
				Mode = 3
			}
		}
		BlueprintsIntruder
		{
			Type = BlueprintSprite
			File = "blueprints_intruder.png"
			Size = [2, 5]
			Offset = [0, -.5]

			ShowOnlyInToggleMode
			{
				ToggleID = SW.missile_type
				Mode = 1
			}
		}
		BlueprintsConcussion
		{
			Type = BlueprintSprite
			File = "blueprints_concussion.png"
			Size = [2, 5]
			Offset = [0, -.5]

			ShowOnlyInToggleMode
			{
				ToggleID = SW.missile_type
				Mode = 2
			}
		}

		BlueprintsHEX
		{
			Type = BlueprintSprite
			File = "blueprints_hex.png"
			Size = [2, 5]
			Offset = [0, -.5]

			ShowOnlyInToggleMode
			{
				ToggleID = SW.missile_type
				Mode = 0
			}
		}
	}

	Stats
	{
		CrewRequired = &~/Part/Components/PartCrew/Crew
		ClusterCapacity = 6
		IntruderMissileCapacity = 2
		ConcussionMissileCapacity = 2
		HEXMissileCapacity = 3

		RecCrew = (&CrewRequired) + (&<hex/missile_launcher_hex.rules>/MissileStats/Stats/ROF) * (&<hex/missile_launcher_hex.rules>/MissileStats/Stats/MissileParts) * 4
	}

	StatsNotesKey = "Stats/MissileLauncherNotes"
}