Part : &<./Data/ships/terran/base_part_terran.rules>/Part
{
	//IDs
	ID = SW.imperial_probe_droid
	OtherIDs = ["imperial_probe_droid"]

	//StringKeys
	NameKey = "Parts/ImperialProbeDroid"
	IconNameKey = "Parts/ImperialProbeDroidIcon"
	DescriptionKey = "Parts/ImperialProbeDroidDesc"

	//Groups&Categories
	EditorGroups = ["SWDroids"]
	TypeCategories = [command, reactor, thruster, sensors]
	//RequiresCategories = []

	//Resoures&Size&Health
	Resources
	[
		[steel, 16]
		[coil, 8]
		[coil2, 2]
		[processor, 1]
	]
	AIValueFactor = 1
	Size = [1, 1]
	MaxHealth = 8000

	//Selections
	SelectionPriority = 0

	//PartSpecific
	IsRotateable = false
	AllowedContiguity = []
	Flammable = true
	UnderlyingPartPerTile = ""
	CreatePartPerTileWhenGrabbed = ""
	InitialPenetrationResistance = 5
	CrewSpeedFactor = 0
	Density = 0.272
	CreateUnderlyingWhenDestroyed = false
	IgnoreRotationForMirroredSelection = true
	IsExternal = true
	ExternalWalls = [None]
	InternalWalls = [None]
	GeneratorRequiresDoor = false
	NoAutoDoors = true
	ThrusterForce = 8
	FuelUsage = 10
	ThrustIncreaseTime = 1
	ThrustRecoveryTime = 1
	AllowedDoorLocations []
	GenerateRectCollider = true

	
	//ReceivableBuffs&Prohibits
	ReceivableBuffs : ^/0/ReceivableBuffs []
    
	//Editor
	EditorIcon
	{
		Texture
		{
			File = "icon.png"
			SampleMode = Linear
		}
		Size = [32, 32]
	}
	Components : ^/0/Components
	{

		CommandProvider
		{
			Type = CommandProvider
			OperationalToggle = IsOperational
			CommandPoints = 1
		}
		CommandConsumer
		{
			Type = CommandConsumer
			OperationalToggle = PowerToggle
			CommandPoints = 1
		}
		CommandToggle
		{
			Type = CommandToggle
		}

		IsOperational
		{
			Type = MultiToggle
			Toggles = [PowerToggle, BatteryStorage]
			Mode = All
		}

		PowerToggle
		{
			Type = UIToggle
			ToggleID = "on_off"
			Default = 1
			RequiresCommand = false
		}
		BatteryStorage
		{
			Type = ResourceStorage
			ResourceType = battery
			MaxResources = 2000
			StartingResources = &MaxResources
			SuppliesResources = true
			ExpectedResourceGenerationRate = (&../BatteryProducer/ToQuantity) / (&../BatteryProducer/Interval)
			MinResourcesPickUp = 500
			MaxResourcesPickUp = 1000
			ToggleOnResources = 400
			ToggleOffResources = (&ToggleOnResources)-1
		}
		BatteryProducer
		{
			Type = ResourceConverter
			ToStorage = BatteryStorage
			ToQuantity = 400
			Interval = 1
		}
		BatteryStorageBar
		{
			Type = ProgressBar
			OperationalToggle = BatteryStorage
			ShowProgressFor = BatteryStorage
			LowColor = [0, 63, 255]
			HighColor = [0, 63, 255]
			FullColor = [0, 63, 255]
		}
		Sensor
		{
			Type = Sensor
			OperationalToggle = IsOperational
			SightRadius = 1250
			RadarRadius = 4500
		}

		LateralThruster0 : MainThruster
		{
			Location = [1, .387]
			Rotation = 0d
			MinActivation = 0
			MaxActivation = 0.2
			MinUncommandedActivation = &MinActivation
			MaxUncommandedActivation = &MaxActivation
			FuelUsagePerSecond = (&../../FuelUsage)*2
		}
		LateralThruster45 : LateralThruster0
		{
			Location = [.5, .75]
			Rotation = 45d
		}
		MainThruster
		{
			Type = Thruster
			OperationalToggle = IsOperational
			Location = [.5, .75]// Relative to upper-left corner of unrotated part.
			Rotation = 90d// Relative to unrotated part.
			Force = &../../ThrusterForce
			MinActivation = 0
			MaxActivation = 1
			MinUncommandedActivation = &MinActivation
			MaxUncommandedActivation = &MaxActivation
			ActivationIncreaseTime = &../../ThrustIncreaseTime
			ActivationRecoveryTime = &../../ThrustRecoveryTime
			FuelStorage = BatteryStorage
			FuelUsagePerSecond = &../../FuelUsage
		}
		LateralThruster135 : LateralThruster0
		{
			Location = [.5, .75]
			Rotation = 135d
		}
		LateralThruster180 : LateralThruster0
		{
			Location = [0, .387]
			Rotation = 180d
		}
		LateralThruster225 : LateralThruster0
		{
			Location = [.20, .27]
			Rotation = 225d
		}
		ReverseThruster : MainThruster
		{
			Location = [.5, .16]
			Rotation = 270d // Relative to main thruster.
			FuelUsagePerSecond = (&../../FuelUsage)*2
		}
		LateralThruster315 : LateralThruster0
		{
			Location = [.7, .27]
			Rotation = 315d
		}

		ThrusterEffectsValue
		{
			Type = MultiValue
			Values = [MainThruster, ReverseThruster]
			Mode = Max
		}

		MediaEffects
		{
			Type = ContinuousEffects
			Location = [0.5, 0.75]
			Rotation = 90d
			FactorMediaEffectsIntensityWith = ThrusterEffectsValue
			IncludeWhenUnderConstruction = false
			MediaEffects
			[
				&/SW_PARTICLES/Thruster/Ion/Glow/Small/Red
				&/SW_PARTICLES/Thruster/Vanilla/Fire/Small/Red
				&/SW_PARTICLES/Thruster/Vanilla/PlumeLight/Small/Red
				&/SW_PARTICLES/Thruster/Vanilla/Smoke/Small
				&/SW_PARTICLES/Thruster/Vanilla/Sparks/Spread/Red
			]
		}
		
		ArcShield
		{
			Type = ArcShield
			Rotation = -90d
			Radius = (10/3)
			Arc = 180.9d // 2 Halfs so the Texture doesn't get Strechted
			OperationalToggle = IsOperational
			DrainResourcesFrom = BatteryStorage
			Location = [0.5, 0.5]
			PenetrationResistance = [7, 0]
			ResourceDrainPerDamage = 1

			IncludeWhenUnderConstruction = false

			BlueprintArcSprite
			{
				Texture
				{
					File =	"./Data/ships/terran/shield_gen_small/shield_energy.png"
					UVMode = Wrap
					SampleMode = Linear
					MipLevels = 1
				}
				Size = [0, 1]
				Color = [0, 0, 255, 127]
			}
			BlueprintArcSpriteSegments = 64
		
			CoverageArcSprite
			{
				Texture
				{
					File = "./Data/ships/terran/shield_gen_small/shield_energy.png"
					UVMode = Wrap
					SampleMode = Linear
					MipLevels = 1
				}
				Size = [0, 1]
				Color = [255, 255, 255, 127]
			}
			CoverageArcSpriteSegments = 64

			ShieldMediaEffects
			[
				{
					Type = ArcShield
					Radius = (10/3)
					Arc = 180.9d // 2 Halfs so the Texture doesn't get Strechted
					FadeInTime = .25
					FadeOutTime = .25
					FadeFromScale = .8
					ArcSprite
					{
						Texture
						{
							File = "./Data/ships/terran/shield_gen_small/shield_energy.png"
							UVMode = Wrap
							SampleMode = Linear
							MipLevels = 1
						}
						Shader = "./Data/ships/terran/shield_gen_small/shield.shader"
						_waveTex
						{
							File = "./Data/ships/terran/shield_gen_small/shield_energy_wave.png"
							UVMode = Wrap
							SampleMode = Linear
							MipLevels = max
						}
						_maskTex
						{
							File = "./Data/ships/terran/shield_gen_small/shield_mask.png"
							UVMode = Wrap
							SampleMode = Linear
							MipLevels = 1
						}
						_waveSpeed = 1
						_waveAlpha = 1
						_waveCurveInterval = .5
						_waveCurveMagnitude = .35
						_waveCurveUOffsetPerSecond = .2
						_fullPowerColor1 = &<../../Shields/ShieldTuner.rules>/ImperialProbeDroid/_fullPowerColor1
						_lowPowerColor1 = &<../../Shields/ShieldTuner.rules>/ImperialProbeDroid/_lowPowerColor1
						_fullPowerColor2 = &<../../Shields/ShieldTuner.rules>/ImperialProbeDroid/_fullPowerColor2
						_lowPowerColor2 = &<../../Shields/ShieldTuner.rules>/ImperialProbeDroid/_lowPowerColor2
						_lowPowerThicknessExponent = .6
						_xScale = 2
						TargetBlendMode = Add
						Size = [0, 0.84375]
					}
					ArcSpriteSegments = 64
					Bucket = Lower1
				}

				: /BASE_SOUNDS/AudioExteriorDetail
				{
					Sound = "./Data/ships/terran/shield_gen_small/shield_loop.wav"
					Volume = .15
					Speed = .5
					MaxConcurrent = 1
					MaxConcurrentVolume = .3
					DynamicVolume : ^/0/DynamicVolume
					{
						MinDistance = .75
						MaxDistance = 1.5
					}
					IgnoreIntensity = true
				}
			]
			
			HitMediaEffects
			[
				{
					Type = ArcShield
					FadeInTime = .1
					FadeOutTime = .5
					Radius = (10/3)
					Arc = 12d//20d
					ArcSprite
					{
						Texture
						{
							File = "./Data/ships/terran/shield_gen_small/shield_energy_original.png"
							UVMode = Wrap
							SampleMode = Linear
							MipLevels = max
						}
						Shader = "./Data/ships/terran/shield_gen_small/shield.shader"
						_waveTex
						{
							File = "./Data/ships/terran/shield_gen_small/shield_energy_wave.png"
							UVMode = Wrap
							SampleMode = Linear
							MipLevels = max
						}
						_maskTex
						{
							File = "./Data/ships/terran/shield_gen_small/shield_energy_original.png"
							UVMode = Wrap
							SampleMode = Linear
							MipLevels = max
						}
						_waveSpeed = -2
						_waveAlpha = .75
						_waveCurveInterval = 1
						_waveCurveMagnitude = .25
						_waveCurveUOffsetPerSecond = 0
						_fullPowerColor1 = &<../../Shields/ShieldTuner.rules>/ImperialProbeDroid/_fullPowerColor1
						_lowPowerColor1 = &<../../Shields/ShieldTuner.rules>/ImperialProbeDroid/_lowPowerColor1
						_fullPowerColor2 = &<../../Shields/ShieldTuner.rules>/ImperialProbeDroid/_fullPowerColor2
						_lowPowerColor2 = &<../../Shields/ShieldTuner.rules>/ImperialProbeDroid/_lowPowerColor2
						_lowPowerThicknessExponent = .6
						_xScale = 1
						TargetBlendMode = Add
						Size = [0, 3]
					}
					ArcSpriteSegments = 6
					Bucket = Upper3
				}
				&/SW_SOUNDS/ShieldHit
			]
		}	

		ArcShield90 : ArcShield
		{
			Rotation = 90d
		}

		BurstTrigger
		{
			Type = ThresholdTrigger
			AmountFrom = ThrusterEffectsValue
			MinAmount = .5
		}

		BurstEffects
		{
			Type = TriggeredEffects
			ChainedTo = MainThruster
			Trigger = BurstTrigger
			FactorMediaEffectsIntensityWith = ThrusterEffectsValue
			AnchorMediaEffects = true

			IncludeWhenUnderConstruction = false

			MediaEffects
			[
				: /SW_SOUNDS/ThrusterBurst
				{
					Volume = .5
					Speed = 1
					MaxConcurrentVolume = 1
				}
			]
		}

		Graphics
		{
			Type = Graphics
			OperationalToggle = IsOperational
			Location = [.5, .5]
			Floor
			{
				Layer = "floors"
				DamageLevels
				[
					{
						File = "floor.png"
						Size = [1, 1]
					}
					{
						File = "floor_33.png"
						Size = [1, 1]
					}
					{
						File = "floor_66.png"
						Size = [1, 1]
					}
				]
			}
			Roof
			{
				Layer = "roofs"
				DamageLevels
				[
					{
						File = "roof.png"
						NormalsFile = "roof_normals.png"
						Size = [1, 1]
					}
					{
						File = "roof_33.png"
						NormalsFile = "roof_normals.png"
						Size = [1, 1]
					}
					{
						File = "roof_66.png"
						NormalsFile = "roof_normals.png"
						Size = [1, 1]
					}
				]
			}
		}
		MyRepeatingTimerTrigger
		{
			Type = Timer
			Duration = 40
			AutoStart = true
			Repeats = true
		}
		MyTriggeredEffects
		{
			Type = TriggeredEffects
			Trigger = MyRepeatingTimerTrigger
			MediaEffects
			[
				: /BASE_SOUNDS/AudioExterior
				{
					Sound = "PRBdroidchatter.wav"
					Volume = 1.0
				}
			]
		}
		OperationEffects
		{
			Type = ToggleEffects
			Toggle = IsOperational
			Location = [.5, .5]
			ToggledOnMediaEffects = &/COMMON_EFFECTS/PowerOn
			ToggledOffMediaEffects = &/COMMON_EFFECTS/PowerOff
		}

		DestroyedEffects
		{
			Type = DeathEffects
			MediaEffects = &/COMMON_EFFECTS/MedPartDestroyed
			Location = [.5, .5]
		}
		Indicators
		{
			Type = IndicatorSprites
			Location = [.5, .5]
			Layer = "indicators"
			Indicators
			[
				// Turned off.
				{
					Toggle = PowerToggle
					AtlasSprite
					{
						File = &/INDICATORS/PowerOff
						Size = [.5, .5]
					}
				}

				// Out of power.
				{
					Toggle = BatteryStorage
					AtlasSprite
					{
						File = &/INDICATORS/NoPower
						Size = [.5, .5]
					}
				}
			]
		}
		Blueprints
		{
			Type = BlueprintSprite
			File = "blueprints.png"
			Size = [1, 1]
		}
	}
}
