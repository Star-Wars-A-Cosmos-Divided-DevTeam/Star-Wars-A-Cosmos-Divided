Part : &<./Data/ships/terran/base_part_terran.rules>/Part
{
	NameKey = "Parts/fixedlasercannonL"
	IconNameKey = "Parts/fixedlasercannonLIcon"
	ID = "SW.fixed_laser_cannonL"
	OtherIDs = [SW.fixedlaserR,SW.fixed_laser_cannonR]
	EditorGroups = ["WeaponsEnergy", "TechI"]
	DescriptionKey = "Parts/fixedlasercannonLDesc"
	IsFlippable = true
	FlipWhenLoadingIDs = [SW.fixedlaserR, SW.fixed_laser_cannonR]
	Resources
	[
		[steel, 12]
		[coil, 10] //
	]  //Cost = 700
	AIValueFactor = 1

	TypeCategories = [weapon, uses_power,is_crewed]
	Size = [1, 1]
	//PhysicalRect = [0, 1, 1, 1]
	//SaveRect = &PhysicalRect
	ProhibitedBy : ^/0/ProhibitedBy [fighter]	
	ProhibitRects
	[
		[fighter, [-2, -1, 2, 1]]
	]
	SelectionPriority = 1
	SelectionTypeByRotation = true
	MaxHealth = 2000
	InitialPenetrationResistance = 1.2
	//ProhibitLeft = 1
	AllowedDoorLocations
	[
		[-1, 0]
		[1, 0]
		[0, 1]
	    [0,-1]
	]
//	FlipHRotate = [0, 3, 2, 1]
//	FlipVRotate = [2, 1, 0, 3]
	EditorIcon
	{
		Texture
		{
			File = "iconL.png"
			SampleMode = Linear
		}
		Size = [96, 48]
	}
	
	Components : ^/0/Components
	{
		IsOperational
		{
			Type = MultiToggle
			Toggles = [PowerToggle, BatteryStorage, PartCrew]
			Mode = All
		}

		PowerToggle
		{
			Type = UIToggle
			ToggleID = "on_off"
			Default = 1
			ToggledOnChoices = [1]
		}
		FireModeToggle
		{
			Type = UIToggle
			ToggleID = "fire_mode"
			Default = 1
			AvailableChoices = [0, 1, 2]
			ToggledOnChoices = [0, 1, 2]
		}
		AutoTargetToggle
		{
			Type = ModeToggle
			Mode = FireModeToggle
			OnModes = [1, 2]
		}
		AutoFireToggle
		{
			Type = ModeToggle
			Mode = FireModeToggle
			OnMode = 2
		}
		
		MunitionType
		{
			Type = UIToggle
			ToggleID = "SW.munition_type"
			Default = 0
			ToggledOnChoices = [0, 1, 2, 4]
			AvailableChoices = [0, 1, 2, 4]
			AlwaysAllowInBuildMode = true
			RequiresCommand = false
		}

		RedMunitionToggle
		{
			Type = ModeToggle
			Mode = MunitionType
			OnMode = 0
		}
		RedMunitionComponents
		{
			Type = ToggledComponents
			Toggle = RedMunitionToggle
			Components = &<red_fixedlaserL.rules>/Components
		}

		BlueMunitionToggle
		{
			Type = ModeToggle
			Mode = MunitionType
			OnMode = 1
		}
		BlueMunitionComponents
		{
			Type = ToggledComponents
			Toggle = BlueMunitionToggle
			Components = &<blue_fixedlaserL.rules>/Components
		}

		GreenMunitionToggle
		{
			Type = ModeToggle
			Mode = MunitionType
			OnMode = 2
		}
		GreenMunitionComponents
		{
			Type = ToggledComponents
			Toggle = GreenMunitionToggle
			Components = &<green_fixedlaserL.rules>/Components
		}

		Graphics
		{
			Type = Graphics
			OperationalToggle = IsOperational,
			Location = [.5, .5]
			Floor
			{
				Layer = "floors"
				DamageLevels
				[
					{
						File = "../common_graphics_1/floor.png"
						Size = [1, 1]
					}
					{
						File = "../common_graphics_1/floor_33.png"
						Size = [1, 1]
					}
					{
						File = "../common_graphics_1/floor_66.png"
						Size = [1, 1]
					}
				]
			}
			OperationalDoodad
			{
				Layer = "doodads_low"
				DamageLevels
				[
					{
						AnimationFiles
						[
							"../common_graphics_1/doodads on1.png"
							"../common_graphics_1/doodads on2.png"
							"../common_graphics_1/doodads on3.png"
							"../common_graphics_1/doodads on4.png"
							"../common_graphics_1/doodads on5.png"
							"../common_graphics_1/doodads on6.png"
							"../common_graphics_1/doodads on7.png"
							"../common_graphics_1/doodads on8.png"
						]
						Size = [1, 1]
						UVRotation = 3
						AnimationInterval = 0.1
					}
				]
			}
			NonOperationalDoodad
			{
				Layer = "doodads_low"
				DamageLevels
				[
					{
						File = "../common_graphics_1/doodads off.png"
						Size = [1, 1]
						UVRotation = 3
					}
				]
			}
			OperationalLighting
			{
				Layer = "lights_add"
				DamageLevels
				[
					{
						File = "../common_graphics_1/lights.png"
						Size = [1, 1]
					}
				]
			}
			Walls
			{
				Layer = "walls"
				DamageLevels
				[
					{
						File = "../common_graphics_1/walls.png"
						Size = [1, 1]
					}
					{
						File = "../common_graphics_1/walls_33.png"
						Size = [1, 1]
					}
					{
						File = "../common_graphics_1/walls_66.png"
						Size = [1, 1]
					}
				]
			}
			Roof
			{
				Layer = "roofs"
				DamageLevels
				[
					{
						File = "../common_graphics_1/roof.png"
						Size = [1, 1]
						UVRotation = 3
					}
					{
						File = "../common_graphics_1/roof_33.png"
						Size = [1, 1]
						UVRotation = 3
					}
					{
						File = "../common_graphics_1/roof_66.png"
						Size = [1, 1]
						UVRotation = 3
					}
				]
			}
		}

		Turret : &~/TurretBase
		{

		}

		BulletEmitterBase : &~/BulletEmitterBase
		{
			FireTrigger
		}

		TurretCollider : &~/TurretColliderBase
		{

		}

		ChargeEffect : &~/ChargeEffectBase
		{

		}
		TurretLocationProxy
		{
			Type = ChainableProxy
			ComponentID = Turret
		}

		TurretGraphics
		{
			Type = Graphics
			OperationalToggle = IsOperational,
			ChainedTo = Turret
			Location = [.5, 0]
			Rotation = 90d
			Walls
			{
				Layer = "walls"
				DamageLevels
				[
					{
						// None.
					}
					{
						File = "../common_graphics_1/turret damage_33.png"
						Size = [1, 2]
					}
					{
						File = "../common_graphics_1/turret damage_66.png"
						Size = [1, 2]
					}
				]
			}
		}
		CommonOnShootEffectTimer
		{
			Type = Timer
			Duration = 0.25
			AutoStart = true
			Toggle = IsOperational
			StartsOn = 0
			StartTrigger = CommonReloadResetTriggerProxy
		}
		CommonReloadResetTriggerProxy
		{
			Type = TriggerProxy
			ComponentID = CommonReloadResetTrigger
		}
		WeaponSprite
		{
			Type = Sprite
			ChainedTo = Turret
			Location = [0.25, 0]
			Rotation = 90d
			Layer = "weapons"
			ResetAnimationTrigger = BulletEmitterBase
			AtlasSprite
			{
				AnimationFiles
				[
					"weapon2.png"
					"weapon.png"
				]
				Size = [1, 1]
				
				AnimationInterval = 0.01
				AnimationStartTime = MinValue
				ClampAnimation = true
			}
		}

		SwitchTimerTrigger
		{
			Type = Timer
			Duration = 2.75
			AutoStart = true
			Repeats = false
		}
		SwitchTimerProgressBar
		{
			Type = ProgressBar
			ShowProgressFor = SwitchTimerTrigger
			Invert = true
			OperationalToggle = SwitchCooldownToggle
			InvertOperationalToggle = true
		}
		SwitchCooldownToggle
		{
			Type = TriggeredToggle
			OnTrigger = SwitchTimerTrigger
			StartsOn = false
		}

		BatteryStorage
		{
			Type = ResourceStorage
			ResourceType = battery
			MaxResources = 2000
		}
		BatteryConsumer
		{
			Type = ResourceConsumer
			ResourceType = battery
			Storage = BatteryStorage
			DefaultPriority = &/PRIORITIES/Weapon_Supply
			ResupplyThreshold = 500
			OperationalToggle = PowerToggle
			ReceiveResourceMediaEffects = &/COMMON_EFFECTS/PowerDeliver
		}

		CrewLocation
		{
			Type = CrewLocation
			Location = [.75, .5]
			Rotation = 90d
		}
		PartCrew
		{
			Type = PartCrew
			Crew = 1
			DefaultPriority = &/PRIORITIES/Weapon_Crew
			PrerequisitesBeforeCrewing = [PowerToggle]
			HighPriorityPrerequisites = [BatteryStorage]
			CrewDestinations
			[
				&../../CrewLocation/Location
			]
			CrewLocations
			[
				CrewLocation
			]
		}

		BatterySprites
		{
			Type = ResourceSprites
			Location = [.5, .5]
			ResourceStorage = BatteryStorage
			Layer = "doodads_high"
			HasZeroResourceSprite = false
			ResourceLevels
			[
				{
					File = "../common_graphics_1/batteries1.png"
					Size = [1, 1]
					UVRotation = 3
				}
				{
					File = "../common_graphics_1/batteries2.png"
					Size = [1, 1]
					UVRotation = 3
				}
				{
					File = "../common_graphics_1/batteries3.png"
					Size = [1, 1]
					UVRotation = 3
				}
				{
					File = "../common_graphics_1/batteries4.png"
					Size = [1, 1]
					UVRotation = 3
				}
				{
					File = "../common_graphics_1/batteries5.png"
					Size = [1, 1]
					UVRotation = 3
				}
				{
					File = "../common_graphics_1/batteries6.png"
					Size = [1, 1]
					UVRotation = 3
				}
				{
					File = "../common_graphics_1/batteries7.png"
					Size = [1, 1]
					UVRotation = 3
				}
				{
					File = "../common_graphics_1/batteries8.png"
					Size = [1, 1]
					UVRotation = 3
				}
			]
		}


		OperationEffects
		{
			Type = ToggleEffects
			Toggle = IsOperational
			Location = [.5, .5]
			ToggledOnMediaEffects = &/COMMON_EFFECTS/PowerOn
			ToggledOffMediaEffects = &/COMMON_EFFECTS/PowerOff
		}

		DestroyedEffects
		{
			Type = DeathEffects
			MediaEffects = &/COMMON_EFFECTS/MedPartDestroyed
			Location = [.5, .5]
		}

		Indicators
		{
			Type = IndicatorSprites
			Location = [.5, .5]
			Layer = "indicators"
			Indicators
			[
				// Turned off.
				{
					Toggle = PowerToggle
					AtlasSprite
					{
						File = &/INDICATORS/PowerOff
						Size = [1, 1]
					}
				}

				// Out of power.
				{
					Toggle = BatteryStorage
					AtlasSprite
					{
						File = &/INDICATORS/NoPower
						Size = [1, 1]
					}
				}

				// No crew.
				{
					Toggle = PartCrew
					AtlasSprite
					{
						File = &/INDICATORS/NoCrew
						Size = [1, 1]
					}
				}
			]
		}
		Blueprints
		{
			Type = BlueprintSprite
			File = "blueprintsL.png"
			Size = [2, 1]
			Offset = [-0.5, 0]
		}
	}
	Stats
	{
/*
		CrewRequired = &../Components/PartCrew/Crew
		PowerCapacity = (&~/Part/Components/BatteryStorage/MaxResources) / 1000

		RecPower = (&PowerPerSecond) * 1
		RecCrew = (&CrewRequired) + (&RecPower) * 4

		ROF = 1 / (&<red_fixedlaserL.rules>/Components/Turret/FireInterval)
		Range = &<red_fixedlaserL.rules>/Components/BulletEmitterBase/Bullet/Range
		Arc = deg(&<red_fixedlaserL.rules>/Components/Turret/FiringArc)
		TurretSpeed = deg(&<red_fixedlaserL.rules>/Components/Turret/RotateSpeed)
		ShotSpeed = &<red_fixedlaserL.rules>/Components/BulletEmitterBase/Bullet/Speed
		ShotHP = &<red_fixedlaserL.rules>/Components/BulletEmitterBase/Bullet/Components/Targetable/Health
		PowerPerShot = (&<red_fixedlaserL.rules>/Components/BulletEmitterBase/ResourcesUsed) / 1000
		PowerPerSecond = (&PowerPerShot) * 1 / (&<red_fixedlaserL.rules>/Components/Turret/FireInterval)
		ShotPowerUsage = [&../PowerPerShot, &../PowerPerSecond]
*/
	}
	StatsByCategory
	[	
//		&~/TurretStats
//		&<red_fixedlaserL.rules>/LaserStats
//		&<blue_fixedlaserL.rules>/LaserStats
//		&<green_fixedlaserL.rules>/LaserStats
	]
}

TurretStats
{
	NameKey = "StatCategories/Turret"
	Stats
	{
/*		Barrels = 1
		ReloadTime = &~/Part/Components/CommonReloadTimer/Duration
		Salvo = [&../Barrels, &../ReloadTime]
		ROF = (&Barrels) / (&~/Part/Components/CommonReloadTimer/Duration)
		Range = &~/BulletEmitterBase/Bullet/Range
		Arc = deg(&~/TurretBase/FiringArc)
		TurretSpeed = deg(&~/TurretBase/RotateSpeed)
		PowerPerShot = (&~/BulletEmitterBase/ResourcesUsed) / 1000
		PowerPerSecond = (&PowerPerShot) * (&ROF)
		ShotPowerUsage = [&../PowerPerShot, &../PowerPerSecond]
		//ShotSpeed = &~/Components/BulletEmitterBase/Bullet/Speed
*/	}
}

	OperationalRoofLightingBase
	{
		Size = [1.2, 1.2] //X(Desired Radius)+barrelspacing(Distance between Barrels)+X(Desired Radius)=Y 
		Z = 1.32 // Controls the "height" of the light for the purposes of normal mapping.
	}

		BulletEmitterBase
		{
			Type = BulletEmitter
			ChainedTo = Turret
			FireTrigger = Turret
			GetTargetFrom = Turret
			Location = [0.8, 0]
			OperationalToggle = IsOperational
			Bullet = &/SW_SHOTS/bluesmalllasershot
			ResourceStorage = BatteryStorage
			ResourcesUsed = 40
		}
		ReloadProgressBarBase
		{
			Type = ProgressBar
			OperationalToggle = IsOperational
			ShowProgressFor = Turret
		}
		FireEffectBase
		{
			Type = TriggeredEffects
			ChainedTo = Turret
			Trigger = BulletEmitterBase
			Location = [0.8, 0]
			AnchorMediaEffects = true

			MediaEffects
			[
				&/SW_PARTICLES/SmallBlueLaserShoot
				
				&/SW_SOUNDS/SmallLaserFire
			]
		}
		ChargeEffectBase
		{
			Type = TriggeredEffects
			ChainedTo = Turret
			Trigger = Turret
			Location = [1.1, 0]
			AnchorMediaEffects = true

			MediaEffects
			[
				&/SW_SOUNDS/SmallLaserCharge
			]
		}

		TurretColliderBase
		{
			Type = CircleCollider
			Location = &~/TurretBase/Location
			Radius = .45
			Density = .75
		}


		TurretBase
		{
			Type = TurretWeapon
			OperationalToggle = IsOperational
			AutoFireToggle = AutoFireToggle
			Location = [-0.25, 0.625]  //[-0.140625, 0.75]
			Rotation = -90d
			FireInterval = .1666
			FiringArc = 10d
			RotateSpeed = 90d
			FireThresholdAngle = 1d
			AIFirepowerRating = 400
			FirePermissionToggle = FireModeToggle
			Emitter = BulletEmitterBase
			IgnoreSourceShipLOSChecks = false
			IgnoreSourceShipLowLOSChecks = false
			AllowFireWithBlockedLOS = false

			AutoTargets
			[
				{
					TargetType = ShipParts
					Toggle = AutoTargetToggle
				}
			]

			BlueprintArcSprite
			{
				Texture = &/INDICATORS/WeaponArc
				Size = [0, 1.5]
				Color = [255, 0, 0, 63]
			}
			BlueprintArcRadius = 10
			BlueprintArcSpriteSegments = 64

			CoverageSectorArc
			{
				Texture = &/INDICATORS/VerticalGradient
				VertexColor = [255, 255, 255, 51]
				QuadCount = 64
			}
		}




