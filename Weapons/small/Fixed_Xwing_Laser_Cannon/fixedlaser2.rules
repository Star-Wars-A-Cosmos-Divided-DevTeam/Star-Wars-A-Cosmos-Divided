Part : &<./Data/ships/terran/base_part_terran.rules>/Part
{
	NameKey = "Parts/AWFixedLaserL"
	IconNameKey = "Parts/AWFixedLaserLIcon"
	ID = "SW.a_wing_laserL"
	EditorGroups = ["WeaponsEnergy", "TechIII"]
	DescriptionKey = "Parts/AWFixedLaserLDesc"
	Resources
	[
		[steel, 8] //
	]  //Cost = 1800
	AIValueFactor = 1

	TypeCategories = [weapon, uses_power,is_crewed]
	Size = [1, 1]
	//PhysicalRect = [0, 1, 1, 1]
	//SaveRect = &PhysicalRect
	SelectionPriority = 1
	SelectionTypeByRotation = true
	IsFlippable = true
	MaxHealth = 1750
	InitialPenetrationResistance = 1.2
	ProhibitLeft = 1
	AllowedDoorLocations
	[
		//[-1, 0]
		[1, 0]
		[0, 1]
		[0,-1]
	]
	FlipHRotate = [0, 3, 2, 1]
	FlipVRotate = [2, 1, 0, 3]
	EditorIcon
	{
		Texture
		{
			File = "iconLA.png"
			SampleMode = Linear
		}
		Size = [34, 92]
	}
	
	Components : ^/0/Components
	{
		IsOperational
		{
			Type = MultiToggle
			Toggles = [PowerToggle, BatteryStorage, PartCrew]
			Mode = All
		}
		PowerToggle
		{
			Type = UIToggle
			ToggleID = "on_off"
			Default = 1
			ToggledOnChoices = [1]
		}
		FireModeToggle
		{
			Type = UIToggle
			ToggleID = "fire_mode"
			Default = 1
			ToggledOnChoices = [0, 1, 2]
		}
		AutoTargetToggle
		{
			Type = ModeToggle
			Mode = FireModeToggle
			OnModes = [1, 2]
		}
		AutoFireToggle
		{
			Type = ModeToggle
			Mode = FireModeToggle
			OnMode = 2
		}
		
		LaserType
		{
			Type = UIToggle
			ToggleID = "SW.blasterlaser_type"
			Default = 0
			AlwaysAllowInBuildMode = true
		}

		LaserRedToggle
		{
			Type = ModeToggle
			Mode = LaserType
			OnMode = 0
		}
		LaserRedComponents
		{
			Type = ToggledComponents
			Toggle = LaserRedToggle
			IncludeInBlueprints = true
			Components = &<red_fixedlaserLA.rules>/Components
		}
		LaserBlueToggle
		{
			Type = ModeToggle
			Mode = LaserType
			OnMode = 1
		}
		LaserBlueComponents
		{
			Type = ToggledComponents
			Toggle = LaserBlueToggle
			IncludeInBlueprints = true
			Components = &<blue_fixedlaserLA.rules>/Components
		}
        		LaserGreenToggle
		{
			Type = ModeToggle
			Mode = LaserType
			OnMode = 2
		}
		LaserGreenComponents
		{
			Type = ToggledComponents
			Toggle = LaserGreenToggle
			IncludeInBlueprints = true
			Components = &<green_fixedlaserLA.rules>/Components
		}
		Graphics
		{
			Type = Graphics
			OperationalToggle = IsOperational,
			Location = [.5, .5]
			Floor
			{
				Layer = "floors"
				DamageLevels
				[
					{
						File = "floor.png"
						Size = [1, 1]
					}
					{
						File = "floor_33.png"
						Size = [1, 1]
					}
					{
						File = "floor_66.png"
						Size = [1, 1]
					}
				]
			}
			OperationalDoodad
			{
				Layer = "doodads_low"
				DamageLevels
				[
					{
						AnimationFiles
						[
							"doodads on1.png"
							"doodads on2.png"
							"doodads on3.png"
							"doodads on4.png"
							"doodads on5.png"
							"doodads on6.png"
							"doodads on7.png"
							"doodads on8.png"
						]
						Size = [1, 1]
						UVRotation = 3
						AnimationInterval = 0.1
					}
				]
			}
			NonOperationalDoodad
			{
				Layer = "doodads_low"
				DamageLevels
				[
					{
						File = "doodads off.png"
						Size = [1, 1]
						UVRotation = 3
					}
				]
			}
			OperationalLighting
			{
				Layer = "lights_add"
				DamageLevels
				[
					{
						File = "lights.png"
						Size = [1, 1]
					}
				]
			}
			Walls
			{
				Layer = "walls"
				DamageLevels
				[
					{
						File = "walls.png"
						Size = [1, 1]
					}
					{
						File = "walls_33.png"
						Size = [1, 1]
					}
					{
						File = "walls_66.png"
						Size = [1, 1]
					}
				]
			}
			Roof
			{
				Layer = "roofs"
				DamageLevels
				[
					{
						File = "roof.png"
						Size = [1, 1]
						UVRotation = 3
					}
					{
						File = "roof_33.png"
						Size = [1, 1]
						UVRotation = 3
					}
					{
						File = "roof_66.png"
						Size = [1, 1]
						UVRotation = 3
					}
				]
			}
			OperationalRoofWindows
			{
				Layer = "roof_windows"
				DamageLevels
				[
					{
						File = "roof_windows_on.png"
						Size = [1, 1]
						UVRotation = 3
					}
					{
						File = "roof_windows_on_33.png"
						Size = [1, 1]
						UVRotation = 3
					}
					{
						File = "roof_windows_on_66.png"
						Size = [1, 1]
						UVRotation = 3
					}
				]
			}
			NonOperationalRoofWindows
			{
				Layer = "roof_windows"
				DamageLevels
				[
					{
						File = "roof_windows_off.png"
						Size = [1, 1]
						UVRotation = 3
					}
					{
						File = "roof_windows_off_33.png"
						Size = [1, 1]
						UVRotation = 3
					}
					{
						File = "roof_windows_off_66.png"
						Size = [1, 1]
						UVRotation = 3
					}
				]
			}
		}

		BatteryStorage
		{
			Type = ResourceStorage
			ResourceType = battery
			MaxResources = 2000
		}
		BatteryConsumer
		{
			Type = ResourceConsumer
			ResourceType = battery
			Storage = BatteryStorage
			DefaultPriority = &/PRIORITIES/Weapon_Supply
			ResupplyThreshold = 500
			OperationalToggle = PowerToggle
			ReceiveResourceMediaEffects = &/COMMON_EFFECTS/PowerDeliver
		}

		CrewLocation
		{
			Type = CrewLocation
			Location = [.75, .5]
			Rotation = 90d
		}
		PartCrew
		{
			Type = PartCrew
			Crew = 1
			DefaultPriority = &/PRIORITIES/Weapon_Crew
			PrerequisitesBeforeCrewing = [PowerToggle]
			HighPriorityPrerequisites = [BatteryStorage]
			CrewDestinations
			[
				&../../CrewLocation/Location
			]
			CrewLocations
			[
				CrewLocation
			]
		}

		BatterySprites
		{
			Type = ResourceSprites
			Location = [.5, .5]
			ResourceStorage = BatteryStorage
			Layer = "doodads_high"
			HasZeroResourceSprite = false
			ResourceLevels
			[
				{
					File = "batteries1.png"
					Size = [1, 1]
					UVRotation = 3
				}
				{
					File = "batteries2.png"
					Size = [1, 1]
					UVRotation = 3
				}
				{
					File = "batteries3.png"
					Size = [1, 1]
					UVRotation = 3
				}
				{
					File = "batteries4.png"
					Size = [1, 1]
					UVRotation = 3
				}
				{
					File = "batteries5.png"
					Size = [1, 1]
					UVRotation = 3
				}
				{
					File = "batteries6.png"
					Size = [1, 1]
					UVRotation = 3
				}
				{
					File = "batteries7.png"
					Size = [1, 1]
					UVRotation = 3
				}
				{
					File = "batteries8.png"
					Size = [1, 1]
					UVRotation = 3
				}
			]
		}


		OperationEffects
		{
			Type = ToggleEffects
			Toggle = IsOperational,
			Location = [.5, .5]
			ToggledOnMediaEffects = &/COMMON_EFFECTS/PowerOn
			ToggledOffMediaEffects = &/COMMON_EFFECTS/PowerOff
		}

		DestroyedEffects
		{
			Type = DeathEffects
			MediaEffects = &/COMMON_EFFECTS/MedPartDestroyed
			Location = [.5, .5]
		}

		Indicators
		{
			Type = IndicatorSprites
			Location = [.5, .5]
			Layer = "indicators"
			Indicators
			[
				// Turned off.
				{
					Toggle = PowerToggle
					AtlasSprite
					{
						File = &/INDICATORS/PowerOff
						Size = [1, 1]
					}
				}

				// Out of power.
				{
					Toggle = BatteryStorage
					AtlasSprite
					{
						File = &/INDICATORS/NoPower
						Size = [1, 1]
					}
				}

				// No crew.
				{
					Toggle = PartCrew
					AtlasSprite
					{
						File = &/INDICATORS/NoCrew
						Size = [1, 1]
					}
				}
			]
		}
		BlueprintsRed
		{
			Type = BlueprintSprite
			File = "blueprintsL.png"
			Size = [2, 1]
			Offset = [-0.5, 0]

			ShowOnlyInToggleMode
			{
				ToggleID = SW.blasterlaser_type
				Mode = 0
			}
		}
		BlueprintsBlue
		{
			Type = BlueprintSprite
			File = "blueprintsL.png"
			Size = [2, 1]
			Offset = [-0.5, 0]

			ShowOnlyInToggleMode
			{
				ToggleID = SW.blasterlaser_type
				Mode = 0
			}
		}
		BlueprintsGreen
		{
			Type = BlueprintSprite
			File = "blueprintsL.png"
			Size = [2, 1]
			Offset = [-0.5, 0]

			ShowOnlyInToggleMode
			{
				ToggleID = SW.blasterlaser_type
				Mode = 0
			}
		}
	}
	Stats
	{
		CrewRequired = &../Components/PartCrew/Crew
		PowerCapacity = (&~/Part/Components/BatteryStorage/MaxResources) / 1000

		RecPower = (&PowerPerSecond) * 1
		RecCrew = (&CrewRequired) + (&RecPower) * 4

		ROF = 1 / (&<red_fixedlaserLA.rules>/Components/Turret/FireInterval)
		Range = &<red_fixedlaserLA.rules>/Components/BulletEmitter/Bullet/Range
		Arc = deg(&<red_fixedlaserLA.rules>/Components/Turret/FiringArc)
		TurretSpeed = deg(&<red_fixedlaserLA.rules>/Components/Turret/RotateSpeed)
		ShotSpeed = &<red_fixedlaserLA.rules>/Components/BulletEmitter/Bullet/Speed
		ShotHP = &<red_fixedlaserLA.rules>/Components/BulletEmitter/Bullet/Components/Targetable/Health
		PowerPerShot = (&<red_fixedlaserLA.rules>/Components/BulletEmitter/ResourcesUsed) / 1000
		PowerPerSecond = (&PowerPerShot) * 1 / (&<red_fixedlaserLA.rules>/Components/Turret/FireInterval)
		ShotPowerUsage = [&../PowerPerShot, &../PowerPerSecond]
	}
	StatsByCategory
	[
		&<red_fixedlaserLA.rules>/LaserStats
		&<blue_fixedlaserLA.rules>/LaserStats
		&<green_fixedlaserLA.rules>/LaserStats
	]
}
