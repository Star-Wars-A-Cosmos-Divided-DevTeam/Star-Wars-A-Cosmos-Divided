Part : &<./Data/ships/terran/base_part_terran.rules>/Part
{
	NameKey = "Parts/AWFixedLaserL"
	IconNameKey = "Parts/AWFixedLaserLIcon"
<<<<<<< HEAD
	ID = "SW.a_wing_laserL"
	OtherIDs = [SW.a_wing_laserR]
	EditorGroups = ["WeaponsEnergy", "TechIII"]
=======
>>>>>>> main-revision-skipperwraith
	DescriptionKey = "Parts/AWFixedLaserLDesc"
	ID = SW.a_wing_laserL
	OtherIDs = [SW.a_wing_laserR]
	FlipWhenLoadingIDs = [SW.a_wing_laserR]
	EditorGroups = ["WeaponsEnergy", "TechIII"]
	Resources
	[
		[steel, 16]
		[coil, 6]
	]
	AIValueFactor = 2
	TypeCategories = [weapon, uses_power]//, is_crewed
	ReceivableBuffs : ^/0/ReceivableBuffs []
	Size = [1, 1]
	//PhysicalRect = [0, 1, 1, 1]
	//SaveRect = &PhysicalRect
	SelectionPriority = 1
	SelectionTypeByRotation = true
	SelectionTypeID = "blasterlasers"
	IsFlippable = true
	MaxHealth = 1750
	InitialPenetrationResistance = 1.2
	ProhibitLeft = 1
	MaxDoors = 2
	AllowedDoorLocations
	[
		//[-1, 0]
		[1, 0]
		[0, 1]
		[0,-1]
	]
	FlipHRotate = [0, 3, 2, 1]
	FlipVRotate = [2, 1, 0, 3]
	EditorIcon
	{
		Texture
		{
			File = "iconLA.png"
			SampleMode = Linear
		}
		Size = [34, 92]
	}
	
	Components : ^/0/Components
	{

		IsOperational
		{
			Type = MultiToggle
			Toggles = [PowerToggle, BatteryStorage]//, PartCrew
			Mode = All
		}

		PowerToggle
		{
			Type = UIToggle
			ToggleID = "on_off"
			Default = 1
			RequiresCommand = false
		}

		CommandConsumer
		{
			Type = CommandConsumer
			OperationalToggle = PowerToggle
			CommandPoints = 2
		}

		FireModeToggle
		{
			Type = UIToggle
			ToggleID = "fire_mode"
			Default = 1
			AvailableChoices = [-1, 0, 1, 2]
			ToggledOnChoices = [0, 1, 2]
		}
		AutoTargetToggle
		{
			Type = ModeToggle
			Mode = FireModeToggle
			OnModes = [1, 2]
		}
		AutoFireToggle
		{
			Type = ModeToggle
			Mode = FireModeToggle
			OnMode = 2
		}

		MunitionType
		{
			Type = UIToggle
			ToggleID = "SW.munition_type"
			Default = 0
			ToggledOnChoices = [0, 1, 2]
			AvailableChoices = [0, 1, 2]
			AlwaysAllowInBuildMode = true
			RequiresCommand = false
		}

		RedMunitionToggle
		{
			Type = ModeToggle
			Mode = MunitionType
			OnMode = 0
		}
		RedMunitionComponents
		{
			Type = ToggledComponents
			Toggle = RedMunitionToggle
			Components = &<red_fixedlaserLA.rules>/Components
		}

		BlueMunitionToggle
		{
			Type = ModeToggle
			Mode = MunitionType
			OnMode = 1
		}
		BlueMunitionComponents
		{
			Type = ToggledComponents
			Toggle = BlueMunitionToggle
			Components = &<blue_fixedlaserLA.rules>/Components
		}

		GreenMunitionToggle
		{
			Type = ModeToggle
			Mode = MunitionType
			OnMode = 2
		}
		GreenMunitionComponents
		{
			Type = ToggledComponents
			Toggle = GreenMunitionToggle
			Components = &<green_fixedlaserLA.rules>/Components
		}

		CommonReloadTimer
		{
			Type = Timer
			Duration = 0.375
			AutoStart = true
			Toggle = IsOperationalAndNormalTurretToggle
			StartTrigger = CommonReloadResetTriggerProxy
		}
		CommonOnShootEffectTimer
		{
			Type = Timer
			Duration = 0.25
			AutoStart = true
			Toggle = IsOperationalAndNormalTurretToggle
			StartsOn = 0
			StartTrigger = CommonReloadResetTriggerProxy
		}

		CommonReloadResetTriggerProxy
		{
			Type = TriggerProxy
			ComponentID = CommonReloadResetTrigger
		}

		SwitchWeaponCooldownProgressBar
		{
			Type = ProgressBar
			OperationalToggle = SwitchWeaponCooldownTimer
			InvertOperationalToggle = true
			ShowProgressFor = SwitchWeaponCooldownTimer
			Invert = true
			LowColor = [255, 0, 0]
			HighColor = [0, 255, 0]
		}
		SwitchWeaponCooldownTimer
		{
			Type = Timer
			Duration = 2
			AutoStart = true
			Repeats = false
			StartsOn = 0
			StartTrigger = SwitchWeaponCooldownTrigger
		}
		SwitchWeaponCooldownTrigger
		{
			Type = ModeTrigger
			Mode = MunitionType
			TriggerInModes = [0, 1, 2]
		}

		BatteryStorage
		{
			Type = ResourceStorage
			ResourceType = battery
			MaxResources = 2000
			ReceiveResourceMediaEffects = &/COMMON_EFFECTS/PowerDeliver
		}
		BatteryConsumer
		{
			Type = ResourceConsumer
			ResourceType = battery
			Storage = BatteryStorage
			DefaultPriority = &/PRIORITIES/Weapon_Supply
			ResupplyThreshold = 500
			OperationalToggle = PowerToggle
		}
		BatteryStorageBar
		{
			Type = ProgressBar
			OperationalToggle = IsOperational
			ShowProgressFor = BatteryStorage
			LowColor = [64, 64, 0]
			HighColor = [250, 250, 0]
			FullColor = [255, 255, 0]
		}

		Graphics
		{
			Type = Graphics
			OperationalToggle = IsOperational,
			Location = [.5, .5]
			Floor
			{
				Layer = "floors"
				DamageLevels
				[
					{
						File = "../common_graphics_1/floor.png"
						Size = [1, 1]
					}
					{
						File = "../common_graphics_1/floor_33.png"
						Size = [1, 1]
					}
					{
						File = "../common_graphics_1/floor_66.png"
						Size = [1, 1]
					}
				]
			}
			OperationalDoodad
			{
				Layer = "doodads_low"
				DamageLevels
				[
					{
						AnimationFiles
						[
							"../common_graphics_1/doodads on1.png"
							"../common_graphics_1/doodads on2.png"
							"../common_graphics_1/doodads on3.png"
							"../common_graphics_1/doodads on4.png"
							"../common_graphics_1/doodads on5.png"
							"../common_graphics_1/doodads on6.png"
							"../common_graphics_1/doodads on7.png"
							"../common_graphics_1/doodads on8.png"
						]
						Size = [1, 1]
						UVRotation = 3
						AnimationInterval = 0.1
					}
				]
			}
			NonOperationalDoodad
			{
				Layer = "doodads_low"
				DamageLevels
				[
					{
						File = "../common_graphics_1/doodads off.png"
						Size = [1, 1]
						UVRotation = 3
					}
				]
			}
			OperationalLighting
			{
				Layer = "lights_add"
				DamageLevels
				[
					{
						File = "../common_graphics_1/lights.png"
						Size = [1, 1]
					}
				]
			}
			Walls
			{
				Layer = "walls"
				DamageLevels
				[
					{
						File = "../common_graphics_1/walls.png"
						Size = [1, 1]
					}
					{
						File = "../common_graphics_1/walls_33.png"
						Size = [1, 1]
					}
					{
						File = "../common_graphics_1/walls_66.png"
						Size = [1, 1]
					}
				]
			}
			Roof
			{
				Layer = "roofs"
				DamageLevels
				[
					{
						File = "../common_graphics_1/roof.png"
						NormalsFile = "../common_graphics_1/roof_normals.png"
						Size = [1, 1]
						UVRotation = 3
					}
					{
						File = "../common_graphics_1/roof_33.png"
						NormalsFile = "../common_graphics_1/roof_normals_33.png"
						Size = [1, 1]
						UVRotation = 3
					}
					{
						File = "../common_graphics_1/roof_66.png"
						NormalsFile = "../common_graphics_1/roof_normals_66.png"
						Size = [1, 1]
						UVRotation = 3
					}
				]
			}
		}

		FirePermissionToggle
		{
			Type = MultiToggle
			Toggles = [CommonReloadTimer, SwitchWeaponCooldownTimer, FireModeToggle]
			Mode = All
		}

		Turret : &~/TurretBase
		{

		}

		BulletEmitterBase : &~/BulletEmitterBase
		{
			FireTrigger
		}

		TurretCollider : &~/TurretColliderBase
		{

		}

		ChargeEffect : &~/ChargeEffectBase
		{

		}

		CommonReloadResetTrigger
		{
			Type = MultiTrigger
			Triggers = [Turret]
		}

		TurretLocationProxy
		{
			Type = ChainableProxy
			ComponentID = Turret
		}

		TurretGraphics
		{
			Type = Graphics
			Location = [-.5, 1]
			OperationalToggle = IsOperational
			Walls
			{
				Layer = "doodads_high"
				DamageLevels
				[
					{
						// None.
					}
					{
						File = "../common_graphics_1/turret damage_33.png"
						Size = [1, 2]
					}
					{
						File = "../common_graphics_1/turret damage_66.png"
						Size = [1, 2]
					}
				]
			}
		}

		BatterySprites
		{
			Type = ResourceSprites
			Location = [.5, .5]
			ResourceStorage = BatteryStorage
			Layer = "doodads_high"
			HasZeroResourceSprite = true
			ResourceLevels
			[
				{
					File = "../common_graphics_1/batteries0.png"
					Size = [1, 1]
					UVRotation = 3
				}
				{
					File = "../common_graphics_1/batteries1.png"
					Size = [1, 1]
					UVRotation = 3
				}
				{
					File = "../common_graphics_1/batteries2.png"
					Size = [1, 1]
					UVRotation = 3
				}
				{
					File = "../common_graphics_1/batteries3.png"
					Size = [1, 1]
					UVRotation = 3
				}
				{
					File = "../common_graphics_1/batteries4.png"
					Size = [1, 1]
					UVRotation = 3
				}
				{
					File = "../common_graphics_1/batteries5.png"
					Size = [1, 1]
					UVRotation = 3
				}
				{
					File = "../common_graphics_1/batteries6.png"
					Size = [1, 1]
					UVRotation = 3
				}
				{
					File = "../common_graphics_1/batteries7.png"
					Size = [1, 1]
					UVRotation = 3
				}
				{
					File = "../common_graphics_1/batteries8.png"
					Size = [1, 1]
					UVRotation = 3
				}
			]
		}

		OperationEffects
		{
			Type = ToggleEffects
			Toggle = IsOperational,
			Location = [.5, .5]
			ToggledOnMediaEffects = &/COMMON_EFFECTS/PowerOn
			ToggledOffMediaEffects = &/COMMON_EFFECTS/PowerOff
		}

		DestroyedEffects
		{
			Type = DeathEffects
			MediaEffects = &/COMMON_EFFECTS/MedPartDestroyed
			Location = [.5, .5]
		}

		Indicators
		{
			Type = IndicatorSprites
			Location = [.5, .5]
			Layer = "indicators"
			Indicators
			[
				// Turned off.
				{
					Toggle = PowerToggle
					AtlasSprite
					{
						File = &/INDICATORS/PowerOff
						Size = [1, 1]
					}
				}

				// Out of power.
				{
					Toggle = BatteryStorage
					AtlasSprite
					{
						File = &/INDICATORS/NoPower
						Size = [1, 1]
					}
				}
			]
		}
		Blueprints
		{
			Type = BlueprintSprite
			File = "blueprintsl.png"
			Size = [2, 3]
			Offset = [-0.5, -1]
		}
	}
	Stats
	{
		CrewRequired = &../Components/PartCrew/Crew
		PowerCapacity = (&~/Part/Components/BatteryStorage/MaxResources) / 1000

		RecPower = (&PowerPerSecond) * 1
		RecCrew = (&CrewRequired) + (&RecPower) * 4
/*
		ROF = 1 / (&<red_fixedlaserLA.rules>/Components/Turret/FireInterval)
		Range = &<red_fixedlaserLA.rules>/Components/BulletEmitter/Bullet/Range
		Arc = deg(&<red_fixedlaserLA.rules>/Components/Turret/FiringArc)
		TurretSpeed = deg(&<red_fixedlaserLA.rules>/Components/Turret/RotateSpeed)
		ShotSpeed = &<red_fixedlaserLA.rules>/Components/BulletEmitter/Bullet/Speed
		ShotHP = &<red_fixedlaserLA.rules>/Components/BulletEmitter/Bullet/Components/Targetable/Health
		PowerPerShot = (&<red_fixedlaserLA.rules>/Components/BulletEmitter/ResourcesUsed) / 1000
		PowerPerSecond = (&PowerPerShot) * 1 / (&<red_fixedlaserLA.rules>/Components/Turret/FireInterval)
		ShotPowerUsage = [&../PowerPerShot, &../PowerPerSecond]
*/
	}
	StatsByCategory
	[
		//&~/TurretStats
		&<red_fixedlaserLA.rules>/LaserStats
		&<blue_fixedlaserLA.rules>/LaserStats
		&<green_fixedlaserLA.rules>/LaserStats
	]
}
TurretStats
{
	NameKey = "StatCategories/Turret"
	Stats
	{
		Barrels = 1
		ReloadTime = &~/Part/Components/CommonReloadTimer/Duration
		Salvo = [&../Barrels, &../ReloadTime]
		ROF = (&Barrels) / (&~/Part/Components/CommonReloadTimer/Duration)
		Range = &~/BulletEmitterBase/Bullet/Range
		Arc = deg(&~/TurretBase/FiringArc)
		TurretSpeed = deg(&~/TurretBase/RotateSpeed)
		PowerPerShot = (&~/BulletEmitterBase/ResourcesUsed) / 1000
		PowerPerSecond = (&PowerPerShot) * (&ROF)
		ShotPowerUsage = [&../PowerPerShot, &../PowerPerSecond]
		//ShotSpeed = &~/Components/BulletEmitterBase/Bullet/Speed
	}
}
OperationalRoofLightingBase
{
	Size = [1.2, 1.2] //X(Desired Radius)+barrelspacing(Distance between Barrels)+X(Desired Radius)=Y 
	Z = 1.32 // Controls the "height" of the light for the purposes of normal mapping.
}
BulletEmitterBase
{
	Type = BulletEmitter
	OperationalToggle = IsOperational
	ChainedTo = TurretLocationProxy
	FireTrigger = CommonReloadResetTriggerProxy
	GetTargetFrom = Turret
	Location = [1, 0]
	FireDelay = 0.03
	ResourceStorage = BatteryStorage
	ResourcesUsed = 50
	MinResourcesUsed = 50
	Bullet = &/SW_SHOTS/redsmalllasershot
}
ReloadProgressBarBase
{
	Type = ProgressBar
	OperationalToggle = IsOperational
	ShowProgressFor = CommonReloadTimer
	Invert = true
}
FireEffectBase
{
	Type = TriggeredEffects
	ChainedTo = BulletEmitter
	Trigger = BulletEmitter
	Location = [0.4, 0]
	AnchorMediaEffects = true
}
ChargeEffectBase
{
	Type = TriggeredEffects
	ChainedTo = TurretLocationProxy
	Trigger = CommonReloadResetTriggerProxy
	Location = [1.1, 0]
	AnchorMediaEffects = true

	MediaEffects
	[
		&/SW_SOUNDS/SmallLaserCharge
	]
}
TurretColliderBase
{
	Type = CircleCollider
	Location = &~/TurretBase/Location
	Radius = .32
	Density = .75
}
TurretBase
		{
			Type = TurretWeapon
			Location = [0.5, 0.75]
			Rotation = -90d
			OperationalToggle = IsOperationalAndNormalTurretToggle
			AutoFireToggle = AutoFireToggle
			FireInterval = 0
			FiringArc = 210d
			RotateSpeed = 65d
			FireThresholdAngle = 3d
			AIFirepowerRating = 400
			CanBeGivenExplicitTarget = true
			TargetSearchesPerSecond = 4
			Emitter = BulletEmitterBase
			FirePermissionToggle = FirePermissionToggle
			HoldTargetAfterCancel = 0.15
			AutoTargetCrewSafetyDist = 8
			IgnoreSourceShipLOSChecks = false
			IgnoreSourceShipLowLOSChecks = false
			AllowFireWithBlockedLOS = false

			AutoTargets
			[
				{
					TargetType = ShipParts
					Toggle = AutoTargetToggle
				}
			]

			BlueprintArcSprite
			{
				Texture = &/INDICATORS/WeaponArc
				Size = [0, 1.5]
				Color = [255, 0, 0, 63]
			}
			BlueprintArcRadius = 10
			BlueprintArcSpriteSegments = 64

			CoverageSectorArc
			{
				Texture = &/INDICATORS/VerticalGradient
				VertexColor = [255, 255, 255, 51]
				QuadCount = 64
			}
		}
