Components
	{
		ReloadProgressBar : &<light_turbolaser_switchable.rules>/ReloadProgressBarBase
		{
			LowColor = [0, 64, 0]
			HighColor = [0, 255, 0]
		}

		BulletEmitterLeft : &<light_turbolaser_switchable.rules>/BulletEmitterBase
		{
			Type = BulletEmitter
			Location = [1.48, 0.405]
			Bullet = &/SW_SHOTS/greenlightlasershot			// greenmedlasershot
		}

		BulletEmitterRight : BulletEmitterLeft
		{
			Type = BulletEmitter
			Location = [1.48, -0.405]
		}

		BulletEmitterLeft2 : BulletEmitterLeft
		{
			Type = BulletEmitter
			FireDelay = 0.2
//			Location = [1.612, 0.15]
		}

		BulletEmitterRight2 : BulletEmitterRight
		{
			Type = BulletEmitter
			FireDelay = 0.2
//			Location = [1.612, -0.15]
		}

		FireEffectLeft
		{
			Type = TriggeredEffects
			ChainedTo = BulletEmitterLeft
			Trigger = BulletEmitterLeft
			AnchorMediaEffects = true
	
			MediaEffects
			[
				&/SW_PARTICLES/GreenLaserShoot
			]
		}

		FireEffectRight : FireEffectLeft
		{
			ChainedTo = BulletEmitterRight
			Trigger = BulletEmitterRight
		}

		FireEffectLeft2 : FireEffectLeft
		{
			ChainedTo = BulletEmitterLeft2
			Trigger = BulletEmitterLeft2
		}

		FireEffectRight2 : FireEffectRight
		{
			ChainedTo = BulletEmitterRight2
			Trigger = BulletEmitterRight2
		}

		LightGraphics
		{
			Type = Graphics
			OperationalToggle = CommonOnShootEffectTimer
			InvertOperationalToggle = true
			ChainedTo = TurretLocationProxy
			Location = [1.9, 0]

			OperationalRoofLighting
			{
				Layer = "roof_lights_fancy"
				DamageLevels
				[
					{
						File = "./Data/ships/common/light_blob.png"
						Size = &<light_turbolaser_switchable.rules>/OperationalRoofLightingBase/Size
						Z = &<light_turbolaser_switchable.rules>/OperationalRoofLightingBase/Z
						VertexColor = [16, 255, 16] // [16, 120, 255]
					}
				]
			}
		}
	}

LaserStats
{
	NameKey = "StatCategories/LightGreenTurbolasershot"
	Stats
	{
		ShieldDamagePerShot = &~/Components/BulletEmitterLeft/Bullet/Components/Hit/HitShield/HitEffects/0/Damage
		ShieldDamagePerSecond = (&ShieldDamagePerShot) * (&<light_turbolaser_switchable.rules>/TurretStats/Stats/ROF)
		ShieldDamage = [&../ShieldDamagePerShot, &../ShieldDamagePerSecond]
		DamagePerShot = &~/Components/BulletEmitterLeft/Bullet/Components/Hit/HitOperational/HitEffects/0/Damage
		DamagePerSecond = (&DamagePerShot) * (&<light_turbolaser_switchable.rules>/TurretStats/Stats/ROF)
		Damage = [&../DamagePerShot, &../DamagePerSecond]
		//ShotSpeed = &~/Components/BulletEmitterLeft/Bullet/Speed
		//ShotHP = &~/Components/BulletEmitterLeft/Bullet/Components/Targetable/Health
	}
}


/*
Components
	{
		SwitchTimerTrigger
		{
			Type = Timer
			Duration = 4
			AutoStart = true
			Repeats = false
		}
		SwitchTimerProgressBar
		{
			Type = ProgressBar
			ShowProgressFor = SwitchTimerTrigger
			Invert = true
			OperationalToggle = SwitchCooldownToggle
			InvertOperationalToggle = true
		}
		SwitchCooldownToggle
		{
			Type = TriggeredToggle
			OnTrigger = SwitchTimerTrigger
			StartsOn = false
		}
		WeaponIsOperational
		{
			Type = MultiToggle
			Toggles = [IsOperational, SwitchCooldownToggle]
			Mode = All
		}

		Turret
		{
			Type = TurretWeapon
			Location = [1, 1]
			Rotation = -90d// Relative to unrotated part.
			OperationalToggle = WeaponIsOperational
			AutoFireToggle = AutoFireToggle
			FireInterval = .6
			FiringArc = 180d
			RotateSpeed = 90d
			FireThresholdAngle = 1d
			TargetSearchTriesPerFrame = 1
			AIFirepowerRating = 1600
			FirePermissionToggle = FireModeToggle
			Emitter = BulletEmitterBase
			IgnoreSourceShipLOSChecks = true

			AutoTargets
			[
				{
					TargetType = ShipParts
					Toggle = AutoTargetToggle
				}
			]

			BlueprintArcSprite
			{
				Texture = &/INDICATORS/WeaponArc
				Size = [0, 1.5]
				Color = [255, 0, 0, 63]
			}
			BlueprintArcRadius = 10
			BlueprintArcSpriteSegments = 64

			CoverageSectorArc
			{
				Texture = &/INDICATORS/VerticalGradient
				VertexColor = [255, 255, 255, 51]
				QuadCount = 64
			}
		}

		ReloadProgressBar
		{
			Type = ProgressBar
			OperationalToggle = WeaponIsOperational
			ShowProgressFor = Turret
		}

		BulletEmitterBase
		{
			Type = BulletEmitter
			ChainedTo = Turret
			FireTrigger
			GetTargetFrom = Turret
			Location = [1.75, 0]
			OperationalToggle = IsOperational
			Bullet = &/SW_SHOTS/greenlightlasershot
			ResourceStorage = BatteryStorage
			ResourcesUsed = 100
		}

		BulletEmitterLeft : BulletEmitterBase
		{
			Type = BulletEmitter
			FireTrigger = Turret
			Location = [1.48, -0.505]
		}

		BulletEmitterRight : BulletEmitterBase
		{
			Type = BulletEmitter
			FireTrigger = Turret
			Location = [1.48, 0.505]
		}

		ChargeEffectBase
		{
			Type = TriggeredEffects
			ChainedTo = BulletEmitterBase
			Trigger = Turret
			AnchorMediaEffects = true
		
			MediaEffects
			[
				&/SW_SOUNDS/LaserReCharge
			]
		}

		FireEffectBase
		{
			Type = TriggeredEffects
			ChainedTo = BulletEmitterBase
			Trigger = BulletEmitterLeft
			AnchorMediaEffects = true
	
			MediaEffects
			[
				&/SW_SOUNDS/TurbolaserSFX
			]
		}

		FireEffectLeft
		{
			Type = TriggeredEffects
			ChainedTo = BulletEmitterLeft
			Trigger = BulletEmitterLeft
			AnchorMediaEffects = true
	
			MediaEffects
			[
				&/SW_PARTICLES/SmallGreenLaserShoot
			]
		}

		FireEffectRight : FireEffectLeft
		{
			ChainedTo = BulletEmitterRight
			Trigger = BulletEmitterRight
		}

		TurretCollider
		{
			Type = CircleCollider
			ChainedTo = Turret
			Radius = .8
			Density = 1.5
		}
		
		WeaponSprite
		{
			Type = Sprite
			ChainedTo = Turret
			Location = [0.332, 0]
			Rotation = 90d
			Layer = "roof_turrets"
			ResetAnimationTrigger = Turret
			AtlasSprite
			{
				AnimationFiles
				[
					"icon2.png"
				]
				Size = [2.5, 2.5]
				AnimationInterval = 0.0625
				AnimationStartTime = MinValue
				ClampAnimation = true
			}
		}	
	}
LaserStats
{
	NameKey = "StatCategories/LightGreenTurbolasershot"
	Stats
	{
		ShieldDamagePerShot = &~/Components/BulletEmitterBase/Bullet/Components/Hit/HitShield/HitEffects/0/Damage
		ShieldDamagePerSecond = (&ShieldDamagePerShot) * 2 / (&~/Components/Turret/FireInterval)
		ShieldDamage = [&../ShieldDamagePerShot, &../ShieldDamagePerSecond]
		DamagePerShot = &~/Components/BulletEmitterBase/Bullet/Components/Hit/HitOperational/HitEffects/0/Damage
		DamagePerSecond = (&DamagePerShot) * 2 / (&~/Components/Turret/FireInterval)
		Damage = [&../DamagePerShot, &../DamagePerSecond]
	}
}
*/