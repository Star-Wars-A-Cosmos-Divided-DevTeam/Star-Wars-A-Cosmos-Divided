Part : &<./Data/ships/terran/base_part_terran.rules>/Part
{
	ID = SW.falcon_laser_cannon
	OtherIDs = ["quad_laser_cannon"]
	NameKey = "Parts/FalconLaserCannon"
	IconNameKey = "Parts/FalconLaserCannonIcon"
	DescriptionKey = "Parts/FalconLaserCannonDesc"
	EditorGroups = ["WeaponsEnergy", "SWTechII"]
	Resources
	[
		[steel, 42]
		[coil, 14]
		[coil2, 2]
	]
	AIValueFactor = 2
	TypeCategories = [weapon, uses_power,is_crewed]
	ReceivableBuffs : ^/0/ReceivableBuffs []
	ProhibitedBy : ^/0/ProhibitedBy [tall]
	Size = [2, 2]
	MaxHealth = 10000
	SelectionPriority = 1
	SelectionTypeByRotation = true
	SelectionTypeID = "turbolasers"
	//RequiresCategories = []
	InitialPenetrationResistance = 5
	MaxDoors = 3
	AllowedDoorLocations
	[
		//[-1, 0]
		[-1, 1]
        [0, 2]
		[1, 2]
        [2, 1]
       	//[2, 0]
       	//[1, -1]
       	//[0, -1]
	]
	GenerateRectCollider = true
	EditorIcon
	{
		Texture
		{
			File = "icon.png"
			SampleMode = Linear
		}
		Size = [48, 60]
	}
	Components : ^/0/Components
	{
		
		IsOperational
		{
			Type = MultiToggle
			Toggles = [PowerToggle, BatteryStorage, PartCrew]
			Mode = All
		}

		PowerToggle
		{
			Type = UIToggle
			ToggleID = "on_off"
			Default = 1
			RequiresCommand = false
		}

		CommandConsumer
		{
			Type = CommandConsumer
			OperationalToggle = PowerToggle
			CommandPoints = 6//4?
		}

		FireModeToggle
		{
			Type = UIToggle
			ToggleID = "fire_mode"
			Default = 1
			AvailableChoices = [-1, 0, 1, 2]
			ToggledOnChoices = [0, 1, 2]
		}
		AutoTargetToggle
		{
			Type = ModeToggle
			Mode = FireModeToggle
			OnModes = [1, 2]
		}
		AutoFireToggle
		{
			Type = ModeToggle
			Mode = FireModeToggle
			OnMode = 2
		}
		FireAlternatingToggle
		{
			Type = UIToggle
			ToggleID = "fire_alternating"
			Default = 0
			AvailableChoices = [0]
		}

		CommonReloadTimer
		{
			Type = Timer
			Duration = 1
			AutoStart = true
			StartTrigger = CommonReloadResetTriggerProxy
		}
		CommonOnShootEffectTimer
		{
			Type = Timer
			Duration = 0.42
			AutoStart = true
			StartTrigger = CommonReloadResetTriggerProxy
		}
		CommonReloadResetTriggerProxy
		{
			Type = TriggerProxy
			ComponentID = CommonReloadResetTrigger
		}

		MunitionType
		{
			Type = UIToggle
			ToggleID = "SW.munition_type"
			Default = 0
			AvailableChoices = [0]
			AlwaysAllowInBuildMode = true
			RequiresCommand = false
		}

		BatteryStorage
		{
			Type = ResourceStorage
			ResourceType = battery
			MaxResources = 8000
		}
		BatteryConsumer
		{
			Type = ResourceConsumer
			ResourceType = battery
			Storage = BatteryStorage
			DefaultPriority = &/PRIORITIES/Weapon_Supply
			ResupplyThreshold = 800
			OperatinalToggle = PowerToggle
			ReceiveResourceMediaEffects = &/COMMON_EFFECTS/PowerDeliver
		}
		BatteryStorageBar
		{
			Type = ProgressBar
			OperationalToggle = IsOperational
			ShowProgressFor = BatteryStorage
			LowColor = [64, 64, 0]
			HighColor = [250, 250, 0]
			FullColor = [255, 255, 0]
		}

		Graphics
		{
			Type = Graphics
			OperationalToggle = IsOperational
			Location = [1, 1]
			Floor
			{
				Layer = "floors"
				DamageLevels
				[
					{
						File = "floor.png"
						Size = [2, 2]
					}
					{
						File = "floor_33.png"
						Size = [2, 2]
					}
					{
						File = "floor_66.png"
						Size = [2, 2]
					}
				]
			}
			OperationalLighting
			{
				Layer = "lights_add"
				DamageLevels
				[
					{
						File = "lights.png"
						Size = [2, 2]
					}
				]
			}
			OperationalDoodad
			{
				Layer = "doodads_low"
				DamageLevels
				[
					{
						AnimationFiles
						[
							"console on1.png"
							"console on2.png"
							"console on3.png"
						]
						Size = [2, 2]
						//Offset = [0, 0]//-0.67
						AnimationInterval = 0.50
					}
				]
			}
			NonOperationalDoodad
			{
				Layer = "doodads_low"
				DamageLevels
				[
					{
						File = "console off.png"
						Size = [2, 2]
						//Offset = [0, 0]//-0.67
					}
				]
			}
			Walls
			{
				Layer = "walls"
				DamageLevels
				[
					{
						File = "walls.png"
						Size = [2, 2]
					}
					{
						File = "walls_33.png"
						Size = [2, 2]
					}
					{
						File = "walls_66.png"
						Size = [2, 2]
					}
				]
			}
			Roof
			{
				Layer = "roofs"
				DamageLevels
				[
					{
						File = "roof.png"
						NormalsFile = "roof_normals.png"
						Size = [2, 2]
					}
					{
						File = "roof_50.png"
						NormalsFile = "roof_normals_50.png"
						Size = [2, 2]
					}
				]
			}
		}
/*
		TurretGhostGraphics
		{
			Type = Graphics
			ChainedTo = Turret
			Location = [0.5, 0]
			Rotation = 90d
			OperationalToggle = IsOperational
			Floor
			{
				Layer = "doodads_high"
				DamageLevels
				[
					{
						File = "WeaponSprite/barrel_shadow_5.png"
						Size = [2.4, 3]
					}
				]
			}
		}
*/
		FirePermissionToggle
		{
			Type = MultiToggle
			Toggles = [CommonReloadTimer, FireModeToggle]
			Mode = All
		}

		Turret : &~/TurretBase
		{
			
		}

		ReloadProgressBar
		{
			Type = ProgressBar
			OperationalToggle = IsOperational
			ShowProgressFor = Turret
		}

		BulletEmitterBase : &~/BulletEmitterBase
		{
			FireTrigger
		}

		BulletEmitterLeftUpper : BulletEmitterBase
		{
			Type = BulletEmitter
			FireTrigger = Turret
			Location = [1.25, -0.09]//0.25
		}

		BulletEmitterRightUpper : BulletEmitterBase
		{
			Type = BulletEmitter
			FireTrigger = Turret
			Location = [1.25, 0.09]
		}

		BulletEmitterLeftUnder : BulletEmitterBase
		{
			Type = BulletEmitter
			FireTrigger = Turret
			Location = [1.25, -0.09]
		}

		BulletEmitterRightUnder : BulletEmitterBase
		{
			Type = BulletEmitter
			FireTrigger = Turret
			Location = [1.25, 0.09]
		}

		ChargeEffectLeftUpper
		{
			Type = TriggeredEffects
			ChainedTo = BulletEmitterLeftUpper
			Trigger = BulletEmitterLeftUpper
			AnchorMediaEffects = true
		
			MediaEffects
			[
				&/SW_SOUNDS/LaserRecharge
			]
		}

		ChargeEffectRightUpper : ChargeEffectLeftUpper
		{
			ChainedTo = BulletEmitterRightUpper
			Trigger = BulletEmitterRightUpper
		}

		ChargeEffectLeftUnder : ChargeEffectLeftUpper
		{
			ChainedTo = BulletEmitterLeftUnder
			Trigger = BulletEmitterLeftUnder
		}

		ChargeEffectRightUnder : ChargeEffectLeftUpper
		{
			ChainedTo = BulletEmitterRightUnder
			Trigger = BulletEmitterRightUnder
		}

		FireEffectLeftUpper
		{
			Type = TriggeredEffects
			ChainedTo = BulletEmitterLeftUpper
			Trigger = BulletEmitterLeftUpper
			AnchorMediaEffects = true
	
			MediaEffects
			[
				&/SW_PARTICLES/Shot/Laser/Shoot/Small/Red
	
				&/SW_SOUNDS/FalconShot
			]
		}

		FireEffectRightUpper : FireEffectLeftUpper
		{
			ChainedTo = BulletEmitterRightUpper
			Trigger = BulletEmitterRightUpper
		}

		FireEffectLeftUnder : FireEffectLeftUpper
		{
			ChainedTo = BulletEmitterLeftUnder
			Trigger = BulletEmitterLeftUnder
		}

		FireEffectRightUnder : FireEffectLeftUpper
		{
			ChainedTo = BulletEmitterRightUnder
			Trigger = BulletEmitterRightUnder
		}

		CommonReloadResetTrigger
		{
			Type = MultiTrigger
			Triggers = [Turret]
		}

		TurretLocationProxy
		{
			Type = ChainableProxy
			ComponentID = Turret
		}

		CrewLocation1
		{
			Type = CrewLocation
			Location = [0.55, 0.6]
			Rotation = 0d
		}
		CrewLocation2
		{
			Type = CrewLocation
			Location = [1.45, 0.6]
			Rotation = 0d
		}
		PartCrew
		{
			Type = PartCrew
			Crew = 2
			DefaultPriority = &/PRIORITIES/Weapon_Crew
			PrerequisitesBeforeCrewing = [PowerToggle]
			HighPriorityPrerequisites = [BatteryStorage]
			CrewDestinations
			[
				[0.55, 0.5]
				[1.45, 0.5]
			]
			CrewLocations
			[
				CrewLocation1
				CrewLocation2
			]
		}

		TurretCollider
		{
			Type = CircleCollider
			Location = &../Turret/Location
			Radius = .8
			Density = 1.5
			IsHigh = true
		}

		BarrelSprite
		{
			Type = Sprite
			ChainedTo = Turret
			Location = [0.20, 0]
			Rotation = 90d
			Layer = "roof_doodads"
			ResetAnimationTrigger = Turret
			AtlasSprite
			{
				AnimationFiles
				[
					"M2-G2.png"
				]
				NormalsAnimationFiles
				[
					"M2-G2_normals.png"
				]
				Size = [1, 2]
				AnimationInterval = 0.0625
				AnimationStartTime = MinValue
				ClampAnimation = true
			}
		}

		BatterySprites
		{
			Type = ResourceSprites
			Location = [1, 1]
			ResourceStorage = BatteryStorage
			Layer = "doodads_high"
			HasZeroResourceSprite = false
			ResourceLevels
			[
				{
					File = "batteries1.png"
					Size = [2, 2]
				}
				{
					File = "batteries2.png"
					Size = [2, 2]
				}
				{
					File = "batteries3.png"
					Size = [2, 2]
				}
				{
					File = "batteries4.png"
					Size = [2, 2]
				}
				{
					File = "batteries5.png"
					Size = [2, 2]
				}
			]
		}

		OperationEffects
		{
			Type = ToggleEffects
			Toggle = IsOperational
			Location = [1, 1]
			ToggledOnMediaEffects = &/COMMON_EFFECTS/MachinesOn
			ToggledOffMediaEffects = &/COMMON_EFFECTS/MachinesOff
		}

		DestroyedEffects
		{
			Type = DeathEffects
			MediaEffects = &/COMMON_EFFECTS/MedPartDestroyed
			Location = [1, 1]
		}

		Indicators
		{
			Type = IndicatorSprites
			Location = [1, 1]
			Layer = "indicators"
			Indicators
			[
				// Turned off.
				{
					Toggle = PowerToggle
					AtlasSprite
					{
						File = &/INDICATORS/PowerOff
						Size = [1, 1]
					}
				}

				// Out of power.
				{
					Toggle = BatteryStorage
					AtlasSprite
					{
						File = &/INDICATORS/NoPower
						Size = [1, 1]
					}
				}
				// No crew.
				{
					Toggle = PartCrew
					AtlasSprite
					{
						File = &/INDICATORS/NoCrew
						Size = [1, 1]
					}
				}
			]
		}
		Blueprints
		{
			Type = BlueprintSprite
			File = "blueprints.png"
			Size = [2, 2]
		}
	}

	Stats
	{
		CrewRequired = &~/Part/Components/PartCrew/Crew
		PowerCapacity = (&~/Part/Components/BatteryStorage/MaxResources) / 1000

		RecPower = &../StatsByCategory/0/Stats/PowerPerSecond
		RecCrew = (&CrewRequired) + (&RecPower) * 4
	}

	StatsByCategory
	[
		&~/TurretStats
		&~/BulletStats
	]
}
TurretStats
{
	NameKey = "StatCategories/Turret"
	Stats
	{
		Barrels = 4
		ReloadTime = &~/Part/Components/CommonReloadTimer/Duration
		Salvo = [&../Barrels, &../ReloadTime]
		ROF = (&Barrels) / (&~/Part/Components/CommonReloadTimer/Duration)
		Range = &~/BulletEmitterBase/Bullet/Range
		Arc = deg(&~/TurretBase/FiringArc)
		TurretSpeed = deg(&~/TurretBase/RotateSpeed)
		PowerPerShot = (&~/BulletEmitterBase/ResourcesUsed) / 1000
		PowerPerSecond = (&PowerPerShot) * (&ROF)
		ShotPowerUsage = [&../PowerPerShot, &../PowerPerSecond]
		//ShotSpeed = &~/Components/BulletEmitterBase/Bullet/Speed
	}
}
BulletStats
{
	NameKey = "StatCategories/FalconLaserCannonshot"
	Stats
	{
		ShieldDamagePerShot = &~/BulletEmitterBase/Bullet/Components/Hit/HitShield/HitEffects/0/Damage
		ShieldDamagePerSecond = (&ShieldDamagePerShot) * (&~/TurretStats/Stats/ROF)
		ShieldDamage = [&../ShieldDamagePerShot, &../ShieldDamagePerSecond]
		DamagePerShot =  &~/BulletEmitterBase/Bullet/Components/Hit/HitOperational/HitEffects/0/Damage
		DamagePerSecond = (&DamagePerShot) * (&~/TurretStats/Stats/ROF)
		Damage = [&../DamagePerShot, &../DamagePerSecond]
		ShotSpeed = &~/BulletEmitterBase/Bullet/Speed
		ShotHP = &~/BulletEmitterBase/Bullet/Components/Targetable/Health
	}
}
BulletEmitterBase
{
	Type = BulletEmitter
	ChainedTo = Turret
	FireTrigger
	GetTargetFrom = Turret
	//No Location is dual barrel
	OperationalToggle = IsOperational
	FireDelay = 0.05
	ResourceStorage = BatteryStorage
	ResourcesUsed = 320
	Bullet = &/SW_SHOTS/redfalconlasercannonshot
	Recoil = 4
}
TurretBase
		{
			Type = TurretWeapon
			Location = [1, 1]
			Rotation = -90d
			OperationalToggle = IsOperational
			AutoFireToggle = AutoFireToggle
			FireInterval = 0
			FiringArc = 240d
			RotateSpeed = 21d
			FireThresholdAngle = 2d
			AIFirepowerRating = 1600
			CanBeGivenExplicitTarget = true
			TargetSearchesPerSecond = 4
			Emitter = BulletEmitterBase
			FirePermissionToggle = FirePermissionToggle
			HoldTargetAfterCancel = 0.15
			AutoTargetCrewSafetyDist = 8
			IgnoreSourceShipLOSChecks = false
			IgnoreSourceShipLowLOSChecks = true
			AllowFireWithBlockedLOS = false

			AutoTargets
			[
				{
					TargetType = ShipParts
					Toggle = AutoTargetToggle
				}
			]

			BlueprintArcSprite
			{
				Texture = &/INDICATORS/WeaponArc
				Size = [0, 1.5]
				Color = [255, 0, 0, 63]
			}
			BlueprintArcRadius = 10
			BlueprintArcSpriteSegments = 64

			CoverageSectorArc
			{
				Texture = &/INDICATORS/VerticalGradient
				VertexColor = [255, 255, 255, 51]
				QuadCount = 64
			}
		}