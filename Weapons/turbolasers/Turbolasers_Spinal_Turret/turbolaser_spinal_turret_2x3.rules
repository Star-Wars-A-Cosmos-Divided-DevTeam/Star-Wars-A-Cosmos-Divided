/* ----------------------------------------------------------------------------

Introduction: SW:ACD 0.3.7

Author : Lafiel
Description:
Currently prototyping

Roof mounted fixed spinal "turret" based on https://starwars-armada.fandom.com/wiki/Spinal_Armament
and supposedly in used on Mon-Calamari MC80 

Versions:

 o 1.0 Cosmoteer 0.15.15

---------------------------------------------------------------------------- */ 
Part : &<./Data/ships/terran/base_part_terran.rules>/Part
{
	NameKey = "Parts/TurbolaserSpinalTurret2x3"
	IconNameKey = "Parts/TurbolaserSpinalTurret2x3Icon"
	ID = SW.turbolaser_spinal_turret_2x3
	DescriptionKey = "Parts/TurbolaserSpinalTurret2x3Desc"
	EditorGroups = ["WeaponsEnergy", "SWTechIII"]
	Resources
	[
		[steel, 8] //
	]  //Cost = 15000
	AIValueFactor = 1

	TypeCategories = [weapon, uses_power,is_crewed,turret]
	Size = [2, 3]
	SelectionPriority = 1
	SelectionTypeByRotation = true
	SelectionTypeID = "cannons"
	MaxHealth = 12000
	InitialPenetrationResistance = 5
	ReceivableBuffs : ^/0/ReceivableBuffs [SWTurretPerimeter]

	AllowedDoorLocations
	[
		[-1, 1]
		[2, 1]
		[-1, 2]
		[2, 2]
                [1, 3]
                [0, 3]
	]

	EditorIcon
	{
		Texture
		{
			File = "icon_spinal2x3.png"
			SampleMode = Linear
		}
		Size = [40, 80]
	}
	Components : ^/0/Components
	{
//		BlueprintSprite0
//		{
//			File = "blueprints.png"
//			Size = [2, 4]
//			Type=BlueprintSprite;
//		}

		IsOperational
		{
			Type = MultiToggle
			Toggles
			[
				PowerToggle
				BatteryStorage
				PartCrew
				{Toggle=PerimeterToggle; Invert=true}
			]
			Mode = All
		}
		PowerToggle
		{
			Type = UIToggle
			ToggleID = "on_off"
			Default = 1
			ToggledOnChoices = [1]
		}
		FireModeToggle
		{
			Type = UIToggle
			ToggleID = "fire_mode"
			Default = 1
			ToggledOnChoices = [0, 1, 2]
		}
		AutoTargetToggle
		{
			Type = ModeToggle
			Mode = FireModeToggle
			OnModes = [1, 2]
		}
		AutoFireToggle
		{
			Type = ModeToggle
			Mode = FireModeToggle
			OnMode = 2
		}
		BatteryStorage
		{
			Type = ResourceStorage
			ResourceType = battery
			MaxResources = 5000
		}
		BatteryConsumer
		{
			Type = ResourceConsumer
			ResourceType = battery
			Storage = BatteryStorage
			DefaultPriority = &/PRIORITIES/Weapon_Supply
			ResupplyThreshold = 1000
			OperatinalToggle = PowerToggle
			ReceiveResourceMediaEffects = &/COMMON_EFFECTS/PowerDeliver
		}
//-----------------------------------------------------------------------------

		PerimeterProvider
		{
			Type = GridBuffProvider
			BuffType = SWTurretPerimeter
			BuffAmount = 0.5
			GridDistance = 9
			BuffsSelf = false
			BuffCenter = [1, 3]
			Falloff = -0.03
			Criteria
			{
				Category = turret
			}
		}
/*
		WeaponPerimeterProvider
		{
			Type = AreaBuffProvider
			BuffType = SWTurretPerimeter
			BuffAmount = 1
			BuffArea = [-9, -4, 11, 7]
			BuffsSelf = false
			Criteria
			{
				Category = weapon
				//Rot = 0
				//Left = 0
				//Right = 6
				//Bottom = 0
			}
		}
*/
		PerimeterToggle
		{
			Type = BuffToggle
			BuffType = SWTurretPerimeter
			MinBuffValue = 5
			//MaxBuffValue = 2
			//Invert = true
		}
		NotPerimeterToggle
		{
			Type = MultiToggle
			Toggles
			[
				PerimeterToggle
			]
			Mode = All
			Invert = true
		}

//-----------------------------------------------------------------------------

		LaserType
		{
			Type = UIToggle
			ToggleID = "SW.blasterlaser_type"
			Default = 0
			AlwaysAllowInBuildMode = true
		}

		LaserRedToggle
		{
			Type = ModeToggle
			Mode = LaserType
			OnMode = 0
		}
		LaserRedComponents
		{
			Type = ToggledComponents
			Toggle = LaserRedToggle
			IncludeInBlueprints = true
			Components : <spinal2x3_red_laser.rules>/Components {}
		}

		LaserBlueToggle
		{
			Type = ModeToggle
			Mode = LaserType
			OnMode = 1
		}
		LaserBlueComponents
		{
			Type = ToggledComponents
			Toggle = LaserBlueToggle
			IncludeInBlueprints = true
			Components : <spinal2x3_blue_laser.rules>/Components {}
		}

		LaserGreenToggle
		{
			Type = ModeToggle
			Mode = LaserType
			OnMode = 2
		}
		LaserGreenComponents
		{
			Type = ToggledComponents
			Toggle = LaserGreenToggle
			IncludeInBlueprints = true
			Components : <spinal2x3_green_laser.rules>/Components {}
		}

		Graphics
		{
			Type = Graphics
			OperationalToggle = IsOperational,
			Location = [1, 1.5]
			Floor
			{
				Layer = "floors"
				DamageLevels
				[
					{
						File = "../floor03[2,3]01.png"
						Size = [2, 3]
					}
					{
						File = "../floor03[2,3]01_33.png"
						Size = [2, 3]
					}
					{
						File = "../floor03[2,3]01_66.png"
						Size = [2, 3]
					}
				]
			}
			OperationalLighting
			{
				Layer = "lights_add"
				DamageLevels
				[
					{
						File = "../FixedLightLaserCannon/lights.png"
						Size = [2, 3]
					}
				]
			}
			OperationalDoodad
			{
				Layer = "doodads_low"
				Offset = [0, 0.5]
				DamageLevels
				[
					{
						AnimationFiles
						[
							"../FalconLaser/console on1.png"
							"../FalconLaser/console on2.png"
							"../FalconLaser/console on3.png"
						]
						Size = [2, 2]
						AnimationInterval = 0.50
					}
				]
			}
			NonOperationalDoodad
			{
				Layer = "doodads_low"
				Offset = [0, 0.5]
				DamageLevels
				[
					{
						File = "../FalconLaser/console off.png"
						Size = [2, 2]
						//Offset = [0, 0]//-0.67]
					}
				]
			}
			Walls
			{
				Layer = "walls"
				DamageLevels
				[
					{
						File = "../walls01[2,3].png"
						Size = [2, 3]
					}
					/*
					{
						File = "walls_33.png"
						Size = [2, 3]
					}
					{
						File = "walls_66.png"
						Size = [2, 3]
					}
					*/
				]
			}
			Roof
			{
				Layer = "roofs"
				DamageLevels
				[
					{
						File = "../roof_turret_base01[2,3]02.png"
						Size = [2, 3]
					}
					/*
					{
						File = "roof_33.png"
						Size = [2, 3]
					}
					{
						File = "roof_66.png"
						Size = [2, 3]
					}
					*/
				]
			}
		}
		BatterySprites
		{
			Type = ResourceSprites
			Location = [1, 2]
			ResourceStorage = BatteryStorage
			Layer = "doodads_high"
			HasZeroResourceSprite = false
			ResourceLevels
			[
				{
					File = "../FalconLaser/batteries1.png"
					Size = [2, 2]
				}
				{
					File = "../FalconLaser/batteries2.png"
					Size = [2, 2]
				}
				{
					File = "../FalconLaser/batteries3.png"
					Size = [2, 2]
				}
				{
					File = "../FalconLaser/batteries4.png"
					Size = [2, 2]
				}
				{
					File = "../FalconLaser/batteries5.png"
					Size = [2, 2]
				}
			]
		}
		CrewLocation1
		{
			Type = CrewLocation
			Location = [0.55, 1.6]
			Rotation = 180d
		}
		CrewLocation2
		{
			Type = CrewLocation
			Location = [1.45, 1.6]
			Rotation = 180d
		}
		PartCrew
		{
			Type = PartCrew
			Crew = 2
			DefaultPriority = &/PRIORITIES/Weapon_Crew
			PrerequisitesBeforeCrewing = [PowerToggle]
			HighPriorityPrerequisites = [BatteryStorage]
			CrewDestinations
			[
				&../../CrewLocation1/Location
				&../../CrewLocation2/Location
			]
			CrewLocations
			[
				CrewLocation1
				CrewLocation2
			]
		}
		OperationEffects
		{
			Type = ToggleEffects
			Toggle = IsOperational,
			Location = [1, 1]
			ToggledOnMediaEffects = &/COMMON_EFFECTS/MachinesOn
			ToggledOffMediaEffects = &/COMMON_EFFECTS/MachinesOff
		}

		DestroyedEffects
		{
			Type = DeathEffects
			MediaEffects = &/COMMON_EFFECTS/MedPartDestroyed
			Location = [1, 1.5]

			FactorHitEffectsWith = BatteryStorage
			HitEffects
			[
				{
					Type = AreaDamage
					Damage = 400
					Radius = 2
					Delay = .05
					Filter
					{
						Friendlies = true
						OperationalHealth = true
						StructuralHealth = false
					}
				}
				{
					Type = AreaDamage
					Damage = 200
					Radius = 2
					Delay = .05
					Filter
					{
						Friendlies = true
						OperationalHealth = false
						StructuralHealth = true
					}
				}
				{
					Type = AreaFires
					FireChancePerTile = .1
					Radius = 4
					Falloff = 0
					Delay = .05
					Filter
					{
						Friendlies = true
					}
				}
			]
		}
		Indicators
		{
			Type = IndicatorSprites
			Location = [1, 1.5]
			Layer = "indicators"
			Indicators
			[
				// Turret Perimeter
				{
					Toggle = NotPerimeterToggle
					ShowInBuildMode = true
					AtlasSprite
					{
						File = &/INDICATORS/SWMinimumDistance
						Size = [1.8, 1.8]
					}
				}
				// Turned off.
				{
					Toggle = PowerToggle
					AtlasSprite
					{
						File = &/INDICATORS/PowerOff
						Size = [1, 1]
					}
				}

				// Out of power.
				{
					Toggle = BatteryStorage
					AtlasSprite
					{
						File = &/INDICATORS/NoPower
						Size = [1, 1]
					}
				}
				// No crew.
				{
					Toggle = PartCrew
					AtlasSprite
					{
						File = &/INDICATORS/NoCrew
						Size = [1, 1]
					}
				}
			]
		}

		BlueprintsRed
		{
			Type = BlueprintSprite
			File = "blueprints_spinal2x3.png"
			Size = [2, 3]

			ShowOnlyInToggleMode
			{
				ToggleID = SW.blasterlaser_type
				Mode = 0
			}
		}
		BlueprintsBlue
		{
			Type = BlueprintSprite
			File = "blueprints_spinal2x3.png"
			Size = [2, 3]
			ShowOnlyInToggleMode
			{
				ToggleID = SW.blasterlaser_type
				Mode = 1
			}
		}
		BlueprintsGreen
		{
			Type = BlueprintSprite
			File = "blueprints_spinal2x3.png"
			Size = [2, 3]

			ShowOnlyInToggleMode
			{
				ToggleID = SW.blasterlaser_type
				Mode = 2
			}
		}
	}


	Stats
	{
		CrewRequired = &~/Part/Components/PartCrew/Crew
		PowerCapacity = (&~/Part/Components/BatteryStorage/MaxResources) / 1000

		RecPower = (&PowerPerSecond) * 1
		RecCrew = (&CrewRequired) + (&RecPower) * 4

		ROF = 2 / (&<spinal2x3_red_laser.rules>/Components/Turret/FireInterval)
		Range = &<spinal2x3_red_laser.rules>/Components/BulletEmitter/Bullet/Range
		Arc = 0 //deg(&<spinal2x3_red_laser.rules>/Components/Turret/FiringArc)
		//TurretSpeed = deg(&<spinal2x3_red_laser.rules>/Components/Turret/RotateSpeed)
		ShotSpeed = &<spinal2x3_red_laser.rules>/Components/BulletEmitter/Bullet/Speed
		ShotHP = &<spinal2x3_red_laser.rules>/Components/BulletEmitter/Bullet/Components/Targetable/Health
		PowerPerShot = (&<spinal2x3_red_laser.rules>/Components/BulletEmitter/ResourcesUsed) / 1000
		PowerPerSecond = (&PowerPerShot) * (&ROF)
		ShotPowerUsage = [&../PowerPerShot, &../PowerPerSecond]
	}
	StatsByCategory
	[
		&<spinal2x3_red_laser.rules>/LaserStats
		&<spinal2x3_blue_laser.rules>/LaserStats
		&<spinal2x3_green_laser.rules>/LaserStats
	]

}