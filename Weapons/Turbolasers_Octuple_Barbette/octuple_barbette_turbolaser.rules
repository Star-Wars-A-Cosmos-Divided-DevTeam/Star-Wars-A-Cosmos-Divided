/* ----------------------------------------------------------------------------

Introduction: SW:ACD 0.3.7

Author : Lafiel
Description:
Currently prototyping

It offers synchronized and alternate firing modes.
This requires the inheritance of the firing logic found in SW_weapon_fire_alternate_2.rules (See details).
In alternate fire on each sides the guns are divided in od and even groups and overall mirrored.

The timer component (WeaponTimerBuffProvider) is needed to adjust the timing individually for the weapon.

Versions:

 o 1.0 Cosmoteer 0.15.12

---------------------------------------------------------------------------- */ 
Part : &<./Data/ships/terran/base_part_terran.rules>/Part
{
	NameKey = "Parts/OctupleBarbetteTurbolaser"
	IconNameKey = "Parts/OctupleBarbetteTurbolaserIcon"
	ID = SW.octuple_barbette_turbolaser
	DescriptionKey = "Parts/OctupleBarbetteTurbolaserDesc"
	EditorGroups = ["WeaponsEnergy", "TechIII"]
	Resources
	[
		[steel, 800] //
	]  //Cost = 130000
	AIValueFactor = 1

	TypeCategories = [weapon, uses_power, is_crewed]
	RequiresCategories = [bridge1]
	Size = [8, 8]
	SelectionPriority = 1
	SelectionTypeByRotation = true
	SelectionTypeID = "cannons" 
	MaxHealth = 168000
	Density = 1 + (&~/Part/TurretDensity)
	TurretDensity = 2.0
	InitialPenetrationResistance = 5
	PenetrationRectType = Normal
	ReceivableBuffs : ^/0/ReceivableBuffs [SWWeaponTimerBuff]

	AllowedDoorLocations
	[
		[-1, 3]
		[-1, 4]
		[-1, 5]
		[8, 3]
		[8, 4]
		[8, 5]
		[2, 8]
		[3, 8]
		[4, 8]
		[5, 8]
	]
	EditorIcon
	{
		Texture
		{
			File = "icon.png"
			SampleMode = Linear
		}
		Size = [56, 56]
	}
	Components : ^/0/Components, &<../SW_weapon_fire_alternate_2.rules>, &<graphics.rules>, &<weapon_octuple_turbolaser_green.rules>/Components
	{
		IsOperational
		{
			Type = MultiToggle
			Toggles = [PowerToggle, PartCrew, BatteryStorage]
			Mode = All
		}
		
		PowerToggle
		{
			Type = UIToggle
			ToggleID = "on_off"
			Default = 1
		}

		FireModeToggle
		{
			Type = UIToggle
			ToggleID = "fire_mode"
			Default = 1
			ToggledOnChoices = [0, 1, 2]
		}
		AutoTargetToggle
		{
			Type = ModeToggle
			Mode = FireModeToggle
			OnModes = [1, 2]
		}
		AutoFireToggle
		{
			Type = ModeToggle
			Mode = FireModeToggle
			OnMode = 2
		}
		ExteriorType
		{
			Type = UIToggle
			ToggleID = "SW.exterior_type"
			Default = 2
			ToggledOnChoices = [0,1]
		}

		WhiteExteriorToggle
		{
			Type = ModeToggle
			Mode = ExteriorType
			OnMode = 0
		}
		GreyExteriorToggle
		{
			Type = ModeToggle
			Mode = ExteriorType
			OnMode = 1
		}
		AmmoPrereq
		{
			Type = MultiResourceStorage
			ResourceType = battery
			ResourceStorages = [BatteryStorage]
			//ToggleOnResources = 19001
			//ToggleOffResources = 3750
		}
		BatteryStorage
		{
			Type = ResourceStorage
			ResourceType = battery
			MaxResources = 20000
			ToggleOnResources = 10001
		}
		BatteryConsumer
		{
			Type = ResourceConsumer
			ResourceType = battery
			Storage = BatteryStorage
			DefaultPriority = &/PRIORITIES/Weapon_Supply
			//AdditionalStorageForJobPriority = [ChargeStorage, ChargeStorage2]
			ResupplyThreshold = 500
			OperationalToggle = PowerToggle

			ReceiveResourceMediaEffects = &/COMMON_EFFECTS/PowerDeliver
		}
/*
		ChargeStorage
		{
			Type = ResourceStorage
			ResourceType = battery
			MaxResources = 8000
			ToggleOnResources = 7001
			ToggleOffResources = 1250
			DelayBeforeReadyToUse = 0.25
			AnticipateMoreResourcesFrom = ["BatteryStorage"]
		}
		ChargeStorage2 : ChargeStorage
		{
		}
		Charger
		{
			Type = ResourceConverter
			FromStorage = BatteryStorage
			ToStorage = ChargeStorage
			FromQuantity = 500
			ToQuantity = 500
			//DelayTrigger = Turret
			//DelayAfterTrigger = 0.5
			Interval = 0.1
		}
		Charger2 : Charger
		{
			ToStorage = ChargeStorage2
		}
*/

		WeaponTimerBuffProvider
		{
			Type = SelfBuffProvider
			BuffType = SWWeaponTimerBuff
			BuffAmount = 100% // 100% * 1 = shoots for once per second on combined fire mode
		}

		CrewLocation
		{
			Type = CrewLocation
			ChainedTo = Turret
			Location = [2.203125,-1.421875] //[165/64, 115/64] //-91,-141
			Rotation = 270d
		}
		CrewLocation2
		{
			Type = CrewLocation
			ChainedTo = Turret
			Location = [2.53125, 0.703125] //[301/64, 94/64] //45, -162
			Rotation = 270d
		}
		CrewLocation3
		{
			Type = CrewLocation
			ChainedTo = Turret
			Location = [1.265625, -2.140625] //[119/64, 175/64] //-137,-81
			Rotation = 90d
		}
		CrewLocation4
		{
			Type = CrewLocation
			ChainedTo = Turret
			Location = [1.265625, 2.140625] //[393/64, 175/64] //137,-81
			Rotation = 90d
		}
		CrewLocation5
		{
			Type = CrewLocation
			ChainedTo = Turret
			Location = [-2.78125, -1.5] //[2.5, 434/64] //-96,178
			Rotation = 270d
		}
		CrewLocation6
		{
			Type = CrewLocation
			ChainedTo = Turret
			Location = [-2.953125, 1.234375] //[335/64, 445/64] //-79,189
			Rotation = 215d
		}
		PartCrew
		{
			Type = PartCrew
			Crew = 6
			DefaultPriority = &/PRIORITIES/Weapon_Crew
			PrerequisitesBeforeCrewing = [PowerToggle]
			HighPriorityPrerequisites = [AmmoPrereq, BatteryStorage]
			CrewDestinations
			[
				[165/64, 115/64] //&../../CrewLocation/Location
				[301/64, 94/64] //&../../CrewLocation2/Location
				[119/64, 175/64] //&../../CrewLocation3/Location
				[393/64, 175/64] //&../../CrewLocation4/Location
				[2.5, 434/64] //&../../CrewLocation5/Location
				[335/64, 445/64] //&../../CrewLocation6/Location
			]
			CrewLocations
			[
				CrewLocation
				CrewLocation2
				CrewLocation3
				CrewLocation4
				CrewLocation5
				CrewLocation6
			]
		}

		OperationEffects
		{
			Type = ToggleEffects
			Location = [4, 4]
			Toggle = IsOperational
			ToggledOnMediaEffects = &/COMMON_EFFECTS/MachinesOn
			ToggledOffMediaEffects = &/COMMON_EFFECTS/MachinesOff
		}

		DestroyedEffects
		{
			Type = DeathEffects
			MediaEffects = &/COMMON_EFFECTS/BigPartDestroyed
			Location = [4, 4]
		}

		Indicators
		{
			Type = IndicatorSprites
			Location = [4, 4]
			Layer = "indicators"
			Indicators
			[
				// Turned off.
				{
					Toggle = PowerToggle
					AtlasSprite
					{
						File = &/INDICATORS/PowerOff
						Size = [2, 2]
					}
				}

				// Out of power.
				{
					Toggle = BatteryStorage
					AtlasSprite
					{
						File = &/INDICATORS/NoPower
						Size = [2, 2]
					}
				}

				// No crew.
				{
					Toggle = PartCrew
					AtlasSprite
					{
						File = &/INDICATORS/NoCrew
						Size = [2, 2]
					}
				}
			]
		}

		Blueprints
		{
			Type = BlueprintSprite
			File = "blueprints01.png"
			Size = [4, 8]
			Offset = [-2,0]
					ShowOnlyInToggleMode
			{
				ToggleID = SW.exterior_type
				Mode = 1
			}
		}
		Blueprints2
		{
			Type = BlueprintSprite
			File = "blueprints01.png"
			Size = [4, 8]
			Offset = [2,0]
			MirrorU = true
					ShowOnlyInToggleMode
			{
				ToggleID = SW.exterior_type
				Mode = 1
			}
		}
	}

	Stats
	{
		CrewRequired = &~/Part/Components/PartCrew/Crew
		PowerCapacity = (&~/Part/Components/BatteryStorage/MaxResources) / 1000

		RecPower = &../StatsByCategory/0/Stats/PowerPerSecond
		RecCrew = (&CrewRequired) + (&RecPower) * 4

		ROF = 8 / (&~/Part/Components/WeaponTimerBuffProvider/BuffAmount)
		Range = &~/Part/Components/WeaponEmitter/Bullet/Range
		Arc = deg(&~/Part/Components/Turret/FiringArc)
		TurretSpeed = deg(&~/Part/Components/Turret/RotateSpeed)
	}

	StatsByCategory
	[
		{
			NameKey = "StatCategories/MedGreenLasershot"
			Stats
			{
/*
				ShieldDamagePerShot = &~/Part/Components/WeaponEmitter/Bullet/Components/Hit/HitShield/HitEffects/0/Damage
				ShieldDamagePerSecond = (&ShieldDamagePerShot) * (&~/Part/Stats/ROF)
				ShieldDamage = [&../ShieldDamagePerShot, &../ShieldDamagePerSecond]
				DamagePerShot = &~/Part/Components/WeaponEmitter/Bullet/Components/Hit/HitOperational/HitEffects/0/Damage
				DamagePerSecond = (&DamagePerShot) * (&~/Part/Stats/ROF)
				Damage = [&../DamagePerShot, &../DamagePerSecond]
//				Spread = deg(&~/Part/Components/WeaponEmitter/Spread/1)
				ShotSpeed = &~/Part/Components/WeaponEmitter/Bullet/Speed
				ShotHP = &~/Part/Components/WeaponEmitter/Bullet/Components/Targetable/Health
				PowerPerShot = (&~/Part/Components/WeaponEmitter/ResourcesUsed) / 1000
				PowerPerSecond = (&PowerPerShot) * (&~/Part/Stats/ROF)
				ShotPowerUsage = [&../PowerPerShot, &../PowerPerSecond]
*/
			}
		}
	]
}
