Part : &<./Data/ships/terran/base_part_terran.rules>/Part
{
	ID = SW.medium_ion_cannon
	OtherIDs = ["medium_ion_cannon"]	
	NameKey = "Parts/MediumIonCannon"
	IconNameKey = "Parts/MediumIonCannonIcon"
	DescriptionKey = "Parts/MediumIonCannonDesc"
	EditorGroups = ["WeaponsEnergy", "TechII"]
	Resources
	[
		[steel, 42]
		[coil, 15]
	]
	AIValueFactor = 2
	TypeCategories = [weapon, uses_power, is_crewed]
	ReceivableBuffs : ^/0/ReceivableBuffs []
	ProhibitedBy : ^/0/ProhibitedBy [tall]
	Size = [2, 2]
	MaxHealth = 7500
	SelectionPriority = 1
	SelectionTypeByRotation = true
	SelectionTypeID = "ion-cannons"
	//RequiresCategories = []
	InitialPenetrationResistance = 5
	PenetrationRectType = Normal
	AutoDoorMaxPathLength = 8
	MaxDoors = 3
	AllowedDoorLocations
	[
		//[-1, 0]
		[-1, 1]
        [0, 2]
		[1, 2]
        [2, 1]
       	//[2, 0]
       	//[1, -1]
       	//[0, -1]
	]
	GenerateRectCollider = true

	EditorIcon
	{
		Texture
		{
			File = "icon.png"
			SampleMode = Linear
		}
		Size = [48, 60]
	}

	Components : ^/0/Components
	{
		IsOperational
		{
			Type = MultiToggle
			Toggles = [PowerToggle, BatteryStorage, PartCrew]
			Mode = All
		}

		PowerToggle
		{
			Type = UIToggle
			ToggleID = "on_off"
			Default = 1
			RequiresCommand = false
		}

		CommandConsumer
		{
			Type = CommandConsumer
			OperationalToggle = PowerToggle
			CommandPoints = 6//4?
		}

		FireModeToggle
		{
			Type = UIToggle
			ToggleID = "fire_mode"
			Default = 1
			AvailableChoices = [-1, 0, 1, 2]
			ToggledOnChoices = [0, 1, 2]
		}
		AutoTargetToggle
		{
			Type = ModeToggle
			Mode = FireModeToggle
			OnModes = [1, 2]
		}
		AutoFireToggle
		{
			Type = ModeToggle
			Mode = FireModeToggle
			OnMode = 2
		}
		FireAlternatingToggle
		{
			Type = UIToggle
			ToggleID = "fire_alternating"
			Default = 0
			AvailableChoices = [0]
		}

		CommonReloadTimer
		{
			Type = Timer
			Duration = 2
			AutoStart = true
			StartTrigger = CommonReloadResetTriggerProxy
		}
		CommonOnShootEffectTimer
		{
			Type = Timer
			Duration = 0.42
			AutoStart = true
			StartTrigger = CommonReloadResetTriggerProxy
		}
		CommonReloadResetTriggerProxy
		{
			Type = TriggerProxy
			ComponentID = CommonReloadResetTrigger
		}
		ExteriorType
		{
			Type = UIToggle
			ToggleID = "SW.exterior_type"
			Default = 0
			ToggledOnChoices = [0, 1]
			AlwaysAllowInBuildMode = true
			RequiresCommand = false
		}

		WhiteExteriorToggle
		{
			Type = ModeToggle
			Mode = ExteriorType
			OnMode = 0
		}
		WhiteExteriorComponents
		{
			Type = ToggledComponents
			Toggle = WhiteExteriorToggle
			IncludeInBlueprints = true
			Components = &<medium_ion_cannon_white.rules>/Components
		}

		GreyExteriorToggle
		{
			Type = ModeToggle
			Mode = ExteriorType
			OnMode = 1
		}
		GreyExteriorComponents
		{
			Type = ToggledComponents
			Toggle = GreyExteriorToggle
			IncludeInBlueprints = true
			Components = &<medium_ion_cannon_grey.rules>/Components
		}

		BatteryStorage
		{
			Type = ResourceStorage
			ResourceType = battery
			MaxResources = 6000
		}
		BatteryConsumer
		{
			Type = ResourceConsumer
			ResourceType = battery
			Storage = BatteryStorage
			DefaultPriority = &/PRIORITIES/Weapon_Supply
			ResupplyThreshold = 1000
			OperationalToggle = PowerToggle
			ReceiveResourceMediaEffects = &/COMMON_EFFECTS/PowerDeliver
		}
		BatteryStorageBar
		{
			Type = ProgressBar
			OperationalToggle = IsOperational
			ShowProgressFor = BatteryStorage
			LowColor = [64, 64, 0]
			HighColor = [250, 250, 0]
			FullColor = [255, 255, 0]
		}

		Graphics
		{
			Type = Graphics
			OperationalToggle = IsOperational
			Location = [1, 1]
			Floor
			{
				Layer = "floors"
				DamageLevels
				[
					{
						File = "floor.png"
						Size = [2, 2]
					}
					{
						File = "floor_33.png"
						Size = [2, 2]
					}
					{
						File = "floor_66.png"
						Size = [2, 2]
					}
				]
			}
			OperationalLighting
			{
				Layer = "lights_add"
				DamageLevels
				[
					{
						File = "lights.png"
						Size = [2, 2]
					}
				]
			}
			OperationalDoodad
			{
				Layer = "doodads_low"
				DamageLevels
				[
					{
						AnimationFiles
						[
							"console on1.png"
							"console on2.png"
							"console on3.png"
						]
						Size = [2, 2]
						AnimationInterval = 0.50
					}
				]
			}
			NonOperationalDoodad
			{
				Layer = "doodads_low"
				DamageLevels
				[
					{
						File = "console off.png"
						Size = [2, 2]
					}
				]
			}
			Walls
			{
				Layer = "walls"
				DamageLevels
				[
					{
						File = "walls.png"
						Size = [2, 2]
					}
					{
						File = "walls_33.png"
						Size = [2, 2]
					}
					{
						File = "walls_66.png"
						Size = [2, 2]
					}
				]
			}
			Roof
			{
				Layer = "roofs"
				DamageLevels
				[
					{
						File = "roof.png"
						NormalsFile = "roof_normals.png"
						Size = [2, 2]
					}
					{
						File = "roof_33.png"
						NormalsFile = "roof_normals_33.png"
						Size = [2, 2]
					}
					{
						File = "roof_66.png"
						NormalsFile = "roof_normals_66.png"
						Size = [2, 2]
					}
				]
			}
			/*
			OperationalRoofLighting
			{
				Layer = "roof_lights_fancy"
				DamageLevels
				[
					{
						File = "./Data/ships/common/light_blob.png"
						Size = [2, 2]
						Z = 1.30 // Controls the "height" of the light for the purposes of normal mapping.
						VertexColor = [192, 192, 192] // [6, 57, 113]
					}
				]
			}
			*/
		}

		FirePermissionToggle
		{
			Type = MultiToggle
			Toggles = [CommonReloadTimer, FireModeToggle]
			Mode = All
		}

		Turret : &~/TurretBase
		{

		}

		BulletEmitter : &~/BulletEmitterBase
		{

		}

		ReloadProgressBar : &~/ReloadProgressBarBase
		{
			LowColor = [8, 64, 64]
			HighColor = [164, 255, 255]
		}

		FireEffect : &~/FireEffectBase
		{

		}

		TurretCollider : &~/TurretColliderBase
		{

		}

		ChargeEffect : &~/ChargeEffectBase
		{
			
		}

		CommonReloadResetTrigger
		{
			Type = MultiTrigger
			Triggers = [Turret]
		}

		TurretLocationProxy
		{
			Type = ChainableProxy
			ComponentID = Turret
		}

		GraphicsExtraLight
		{
			Type = Graphics
			OperationalToggle = CommonOnShootEffectTimer
			InvertOperationalToggle = true
			ChainedTo = BulletEmitter

			OperationalRoofLighting
			{
				Layer = "roof_lights_fancy"
				DamageLevels
				[
					{
						File = "./Data/ships/common/light_blob.png"
						Size = &~/OperationalRoofLightingBase/Size
						Z = &~/OperationalRoofLightingBase/Z
						VertexColor = [164, 255, 255]
					}
				]
			}
		}
/*
		WeaponSprite
		{
			Type = Sprite
			ChainedTo = Turret
			Location = [0.305, 0]
			Rotation = 90d
			Layer = "roof_turrets"
			ResetAnimationTrigger = BulletEmitter
			AtlasSprite
			{
				AnimationFiles
				[
					"turret.png"
				]
				NormalsAnimationFiles
				[
					"turret_normals.png"
				]
				Size = [2, 2.15]
				AnimationInterval = 0.0625
				AnimationStartTime = MinValue
				ClampAnimation = true
			}
		}
*/
		CrewLocation1
		{
			Type = CrewLocation
			Location = [0.55, 0.6]
			Rotation = 0d
		}
		CrewLocation2
		{
			Type = CrewLocation
			Location = [1.45, 0.6]
			Rotation = 0d
		}
		PartCrew
		{
			Type = PartCrew
			Crew = 2
			DefaultPriority = &/PRIORITIES/Weapon_Crew
			PrerequisitesBeforeCrewing = [PowerToggle]
			HighPriorityPrerequisites = [BatteryStorage]
			CrewDestinations
			[
				[0.55, 0.5]
				[1.45, 0.5]
			]
			CrewLocations
			[
				CrewLocation1
				CrewLocation2
			]
		}

		BatterySprites
		{
			Type = ResourceSprites
			Location = [1, 1]
			ResourceStorage = BatteryStorage
			Layer = "doodads_high"
			HasZeroResourceSprite = false
			ResourceLevels
			[
				{
					File = "batteries1.png"
					Size = [2, 2]
				}
				{
					File = "batteries2.png"
					Size = [2, 2]
				}
				{
					File = "batteries3.png"
					Size = [2, 2]
				}
				{
					File = "batteries4.png"
					Size = [2, 2]
				}
				{
					File = "batteries5.png"
					Size = [2, 2]
				}
			]
		}

		OperationEffects
		{
			Type = ToggleEffects
			Toggle = IsOperational,
			Location = [1, 1]
			ToggledOnMediaEffects = &/COMMON_EFFECTS/MachinesOn
			ToggledOffMediaEffects = &/COMMON_EFFECTS/MachinesOff
		}

		DestroyedEffects
		{
			Type = DeathEffects
			MediaEffects = &/COMMON_EFFECTS/MedPartDestroyed
			Location = [1, 1]
		}

		Indicators
		{
			Type = IndicatorSprites
			Location = [1, 1]
			Layer = "indicators"
			Indicators
			[
				// Turned off.
				{
					Toggle = PowerToggle
					AtlasSprite
					{
						File = &/INDICATORS/PowerOff
						Size = [1, 1]
					}
				}
				// Out of power.
				{
					Toggle = BatteryStorage
					AtlasSprite
					{
						File = &/INDICATORS/NoPower
						Size = [1, 1]
					}
				}
				// No crew.
				{
					Toggle = PartCrew
					AtlasSprite
					{
						File = &/INDICATORS/NoCrew
						Size = [1, 1]
					}
				}
			]
		}
		Blueprints
		{
			Type = BlueprintSprite
			File = "blueprints.png"
			Size = [2, 2]
		}
	}

	Stats
	{
		CrewRequired = &~/Part/Components/PartCrew/Crew
		PowerCapacity = (&~/Part/Components/BatteryStorage/MaxResources) / 1000

		RecPower = (&~/TurretStats/Stats/PowerPerSecond) * 1
		RecCrew = (&CrewRequired) + (&RecPower) * 4
	}

	StatsByCategory
	[
		&~/TurretStats
		{
			NameKey = "StatCategories/MediumCyanIoncannonshot"
			Stats
			{
				ShieldDamagePerShot = &~/BulletEmitterBase/Bullet/Components/Hit/HitShield/HitEffects/1/Damage
				ShieldDamagePerSecond = (&ShieldDamagePerShot) * (&~/TurretStats/Stats/ROF)
				ShieldDamage = [&../ShieldDamagePerShot, &../ShieldDamagePerSecond]
				DamagePerShot = &~/BulletEmitterBase/Bullet/Components/Hit/HitOperational/HitEffects/0/Damage
				DamagePerSecond = (&DamagePerShot) * (&~/TurretStats/Stats/ROF)
				Damage = [&../DamagePerShot, &../DamagePerSecond]
				ShotSpeed = &~/BulletEmitterBase/Bullet/Speed
				//ShotHP = &~/BulletEmitterBase/Bullet/Components/Targetable/Health
			}
		}
	]
}
TurretStats
{
	NameKey = "StatCategories/Turret"
	Stats
	{
		Barrels = 1
		ReloadTime = &~/Part/Components/CommonReloadTimer/Duration
		Salvo = [&../Barrels, &../ReloadTime]
		ROF = (&Barrels) / (&~/Part/Components/CommonReloadTimer/Duration)
		Range = &~/BulletEmitterBase/Bullet/Range
		Arc = deg(&~/TurretBase/FiringArc)
		TurretSpeed = deg(&~/TurretBase/RotateSpeed)
		PowerPerShot = (&~/BulletEmitterBase/ResourcesUsed) / 1000
		PowerPerSecond = (&PowerPerShot) * (&ROF)
		ShotPowerUsage = [&../PowerPerShot, &../PowerPerSecond]
		//ShotSpeed = &~/Components/BulletEmitterBase/Bullet/Speed
	}
}
OperationalRoofLightingBase
{
	Size = [1.2, 1.2] //X(Desired Radius)+barrelspacing(Distance between Barrels)+X(Desired Radius)=Y 
	Z = 1.32 // Controls the "height" of the light for the purposes of normal mapping.
}
BulletEmitterBase
{
	Type = BulletEmitter
	OperationalToggle = IsOperational
	ChainedTo = TurretLocationProxy
	FireTrigger = CommonReloadResetTriggerProxy
	GetTargetFrom = Turret
	Location = [1.4, 0]
	FireDelay = 0.03
	ResourceStorage = BatteryStorage
	ResourcesUsed = 1000
	MinResourcesUsed = 1000
	Bullet = &/COMMON_SHOTS/cyanmediumioncannonshot
	Recoil = 25
}
ReloadProgressBarBase
{
	Type = ProgressBar
	OperationalToggle = IsOperational
	ShowProgressFor = CommonReloadTimer
	Invert = true
}
FireEffectBase
{
	Type = TriggeredEffects
	ChainedTo = BulletEmitter
	Trigger = BulletEmitter
	Location = [0, 0]
	AnchorMediaEffects = true

	MediaEffects
	[
		&/COMMON_PARTICLES/CyanShoot
		&/COMMON_SOUNDS/IonCannonShot
	]
}
ChargeEffectBase
{
	Type = TriggeredEffects
	ChainedTo = TurretLocationProxy
	Trigger = CommonReloadResetTriggerProxy
	Location = [0.4, 0]
	AnchorMediaEffects = true

	MediaEffects
	[
		&/COMMON_SOUNDS/SmallLaserCharge
	]
}
TurretColliderBase
{
	Type = CircleCollider
	Location = &~/TurretBase/Location
	Radius = .45
	Density = .75
}
TurretBase
		{
			Type = TurretWeapon
			Location = [1, 1]
			Rotation = -90d
			OperationalToggle = IsOperational
			AutoFireToggle = AutoFireToggle
			FireInterval = 0 // Uses separate common fire timer.
			FiringArc = 180d
			RotateSpeed = 30d
			FireThresholdAngle = 2d
			AIFirepowerRating = 1600
			CanBeGivenExplicitTarget = true
			//TargetSearchesPerSecond = 4
			Emitter = BulletEmitter
			FirePermissionToggle = FirePermissionToggle
			HoldTargetAfterCancel = 0.15
			AutoTargetCrewSafetyDist = 8
			IgnoreSourceShipLOSChecks = false
			IgnoreSourceShipLowLOSChecks = true
			AllowFireWithBlockedLOS = false

			AutoTargets
			[
				{
					TargetType = ShipParts
					Toggle = AutoTargetToggle
				}
			]

			BlueprintArcSprite
			{
				Texture = &/INDICATORS/WeaponArc
				Size = [0, 1.5]
				Color = [255, 0, 0, 63]
			}
			BlueprintArcRadius = 10
			BlueprintArcSpriteSegments = 64

			CoverageSectorArc
			{
				Texture = &/INDICATORS/VerticalGradient
				VertexColor = [255, 255, 255, 51]
				QuadCount = 64
			}
		}