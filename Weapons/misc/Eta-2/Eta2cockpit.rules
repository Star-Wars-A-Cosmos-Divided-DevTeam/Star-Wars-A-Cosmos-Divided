Part : &<./Data/ships/terran/base_part_terran.rules>/Part
{
	NameKey = "Parts/Eta2"
	IconNameKey = "Parts/Eta2Icon"
	ID = SW.eta2cockpit
	OtherIDs = ["etacockpit"]
	EditorGroups = ["WeaponsEnergy", "Flight", "TechI"]
	DescriptionKey = "Parts/Eta2Desc"
	Resources
	[
		[steel, 46]
		[coil2, 20]
		[processor, 1]
	]
	AIValueFactor = 5
	Size = [1, 2]
	SelectionPriority = 0
	SelectionTypeID = "control_room"
	MaxHealth = 6200
	InitialPenetrationResistance = 2
	ProhibitAbove = 3
	IsContiguityOrigin = true
	IsShipForward = true
	TypeCategories = [command, weapon, uses_power, is_crewed, provides_crew, airlock, fire_extinguisher, limit_1Cockpits]
	ReceivableBuffs : ^/0/ReceivableBuffs []
//doors only in the back
	AllowedDoorLocations
	[
		[1, 1]
		[-1, 1]
		[0, 2]
	]
	
	EditorIcon
	{
		Texture
		{
			File = "icon.png"
			SampleMode = Linear
		}
		Size = [16, 84]
	}
	Components : ^/0/Components
	{
		PowerToggle
		{
			Type = UIToggle
			ToggleID = "on_off"
			Default = 1
			RequiresCommand = false
		}

		IsOperational
		{
			Type = MultiToggle
			Toggles = [PowerToggle, BatteryStorage, PartCrew]
			Mode = All
		}

		/* SPECIAL COCKPIT ITEMS */

		// Airlock - Start
		AirLock
		{
			Type = Airlock
			EnterExitPoint = [.5, .3]
			NuggetEjectVelocity = [1, 1]
			NuggetEjectDirection = [-100d, -80d]
			NuggetEjectDoorOpenDuration = 0.65
			UITileRect = [7/64, 7/64, 1 - 14/64, 1 - 14/64]

			CrewEnterEffects = &<./Data/ships/terran/airlock/airlock.rules>/Part/Components/Airlock/CrewEnterEffects
			//[
			/*	: /BASE_SOUNDS/AudioInterior
				{
					RandomSounds = 
					[
						"./Data/ships/terran/airlock/crew_enter/crew_enter_01.wav", 
						"./Data/ships/terran/airlock/crew_enter/crew_enter_02.wav", 
						"./Data/ships/terran/airlock/crew_enter/crew_enter_03.wav", 
						"./Data/ships/terran/airlock/crew_enter/crew_enter_03.wav", 
						"./Data/ships/terran/airlock/crew_enter/crew_enter_04.wav", 
						"./Data/ships/terran/airlock/crew_enter/crew_enter_05.wav"
					]
					SpeedVariation = .1
				}*/
			//]

			CrewLeaveEffects = &<./Data/ships/terran/airlock/airlock.rules>/Part/Components/Airlock/CrewLeaveEffects
			//[
			/*	: /BASE_SOUNDS/AudioInterior
				{
					RandomSounds = 
					[
						"./Data/ships/terran/airlock/crew_leave/crew_leave_01.wav", 
						"./Data/ships/terran/airlock/crew_leave/crew_leave_02.wav", 
						"./Data/ships/terran/airlock/crew_leave/crew_leave_03.wav"
					]
					SpeedVariation = .1
				}*/
			//]	
		}
		// Airlock - End

		// Fire Extinguisher - Start
		ExtinguisherStorage
		{
			Type = ResourceStorage
			ResourceType = fire_extinguisher
			MaxResources = &<./Data/resources/fire_extinguisher/fire_extinguisher.rules>/MaxPerNugget
			StartingResources = &MaxResources
			SuppliesResources = true
		}

		ExtinguisherProducer
		{
			Type = ResourceConverter
			OperationalToggle = ExtinguisherStorage
			InvertOperationalToggle = true
			ToStorage = ExtinguisherStorage
			ToQuantity = &<./Data/resources/fire_extinguisher/fire_extinguisher.rules>/MaxPerNugget
			Interval = 45
		}

		ProgressBar
		{
			Type = ProgressBar
			OperationalToggle = ExtinguisherProducer
			ShowProgressFor = ExtinguisherProducer
		}
		// Fire Extinguisher - End

		// Maneuvering Thrusters - Start
		Thruster0
		{
			Type = Thruster
			Location = [0.5, 2] // Relative to upper-left corner of unrotated part.
			Rotation = 0d // Relative to unrotated part.
			OperationalToggle = IsOperational
			Force = 250
			MinActivation = 0
			MaxActivation = 1
			MinUncommandedActivation = 0
			MaxUncommandedActivation = &MaxActivation
			ActivationIncreaseTime = 0
			ActivationRecoveryTime = 0
		}

		Thruster1 : Thruster0 {	Rotation = 90d	}
		Thruster2 : Thruster0 {	Rotation = 180d }
		Thruster3 : Thruster0 {	Rotation = 270d	}		
		// Maneuvering Thrusters - End

		BatteryStorage
		{
			Type = ResourceStorage
			ResourceType = battery
			MaxResources = 3500
		}
		BatteryConsumer
		{
			Type = ResourceConsumer
			ResourceType = battery
			Storage = BatteryStorage
			DefaultPriority = &/PRIORITIES/ControlRoom_Supply
			ResupplyThreshold = 1500
			OperationalToggle = PowerToggle
			ReceiveResourceMediaEffects = &/COMMON_EFFECTS/PowerDeliver
		}

		PowerDrain
		{
			Type = ResourceConverter
			FromStorage = BatteryStorage
			FromQuantity = 150
			Interval = 8
		}

		CommandProvider
		{
			Type = CommandProvider
			OperationalToggle = IsOperational
			CommandPoints = 30//Just so it works
		}

		Sensor
		{
			Type = Sensor
			//lower radius
			SightRadius = 300
			RadarRadius = ceil(300*4.5)
		}

		// Pilot & Crew - Start
		CrewSource
		{
			Type = CrewSource
			Crew = 2 //Pilots this ETA fighter plus 1
			ColorSRange = [0, 0.25]
			ColorVRange = [0.5, 0.75]
		}

		CrewLocation
		{
			Type = CrewLocation
			Location = [0.5, 1]
		}
		PartCrew
		{
			Type = PartCrew
			Crew = 1
			DefaultPriority = &/PRIORITIES/ControlRoom_Crew
			PrerequisitesBeforeCrewing = [PowerToggle]
			HighPriorityPrerequisites = [BatteryStorage]
			AbandonWhenOnFire = false
			CrewDestinations
			[
				[.5, 1.32] 
			]
			CrewLocations
			[
				CrewLocation
			]
		}
		// Pilot & Crew - End

		FireModeToggle
		{
			Type = UIToggle
			ToggleID = "fire_mode"
			Default = 1
			ToggledOnChoices = [0, 1, 2]
		}

		AutoTargetToggle
		{
			Type = ModeToggle
			Mode = FireModeToggle
			OnModes = [1, 2]
		}

		AutoFireToggle
		{
			Type = ModeToggle
			Mode = FireModeToggle
			OnMode = 2
		}

		TurretLocationProxy
		{
			Type = ChainableProxy
			ComponentID = Turret
		}

		Turret
		{
			Type = TurretWeapon
			Location = [0.5, 0.5]
			Rotation = -90d
			OperationalToggle = IsOperational
			AutoFireToggle = AutoFireToggle
			FireInterval = .30
			FiringArc = 1d
			FireDelay = .04
			RotateSpeed = 90d
			FireThresholdAngle = 1d
			TargetSearchTriesPerFrame = 1
			AIFirepowerRating = 500
			FirePermissionToggle = FireModeToggle
			Emitter = BulletEmitterBase

			AutoTargets
			[
				{
					TargetType = ShipParts
					Toggle = AutoTargetToggle
				}
			]

			BlueprintArcSprite
			{
				Texture = &/INDICATORS/WeaponArc
				Size = [0, 1.5]
				Color = [255, 0, 0, 63]
			}
			BlueprintArcRadius = 10
			BlueprintArcSpriteSegments = 64

			CoverageSectorArc
			{
				Texture = &/INDICATORS/VerticalGradient
				VertexColor = [255, 255, 255, 51]
				QuadCount = 64
			}
		}

		BulletEmitterBase
		{
			Type = BulletEmitter
			ChainedTo = Turret
			FireTrigger 
			GetTargetFrom = Turret
			Location = [0.5, 0]
			OperationalToggle = IsOperational
			Bullet = &/SW_SHOTS/blueeta2lasershot
			ResourceStorage = BatteryStorage
			ResourcesUsed = 40
		}

		ReloadProgressBar
		{
			Type = ProgressBar
			OperationalToggle = IsOperational
			ShowProgressFor = Turret
		}

		BulletEmitterLeft : BulletEmitterBase
		{
			Type = BulletEmitter
			FireTrigger = Turret
			Location = [3.2, 0.245]
		}

		BulletEmitterRight : BulletEmitterBase
		{
			Type = BulletEmitter
			FireTrigger = Turret
			Location = [3.2, -0.245]
		}

		ChargeEffectBase
		{
			Type = TriggeredEffects
			ChainedTo = BulletEmitterBase
			Trigger = Turret
			AnchorMediaEffects = true

			MediaEffects
			[
				&/SW_SOUNDS/SmallLaserCharge
			]
		}

		FireEffectBase
		{
			Type = TriggeredEffects
			ChainedTo = BulletEmitterBase
			Trigger = Turret
			Location = [3, 0]
			AnchorMediaEffects = true

			MediaEffects
			[
				&/SW_SOUNDS/Eta2SFX
			]
		}

		FireEffectLeft
		{
			Type = TriggeredEffects
			ChainedTo = BulletEmitterLeft
			Trigger = BulletEmitterLeft
			AnchorMediaEffects = true
	
			MediaEffects
			[
				&/SW_PARTICLES/BlueLaserShoot
			]
		}

		FireEffectRight : FireEffectLeft
		{
			ChainedTo = BulletEmitterRight
			Trigger = BulletEmitterRight
		}

		TurretCollider : &~/TurretColliderBase
		{

		}
		
		WeaponSprite
		{
			Type = Sprite
			ChainedTo = Turret
			Location = [2, 0]
			Rotation = 90d
			Layer = "weapons"
			ResetAnimationTrigger = Turret
			AtlasSprite
			{
				AnimationFiles
				[
					"barrel.png"
				]
				NormalsAnimationFiles
				[
					"barrel_normals.png"
				]
				Size = [1, 3]
				AnimationInterval = 0.01
				AnimationStartTime = MinValue
				ClampAnimation = true
			}
		}
		Graphics
		{
			Type = Graphics
			OperationalToggle = IsOperational,
			Location = [.5,1]
			Floor
			{
				Layer = "floors"
				DamageLevels
				[
					{
						File = "floor.png"
						Size = [1, 2]
					}
					{
						File = "floor_33.png"
						Size = [1, 2]
					}
					{
						File = "floor_66.png"
						Size = [1, 2]
					}
				]
			}
			OperationalDoodad
			{
				Layer = "doodads_low"
				DamageLevels
				[
					{
						AnimationFiles
						[
							"on.png"
							"on10.png"
						]
						Size = [1, 2]
						AnimationInterval = 0.100
					}
				]
			}
			NonOperationalDoodad
			{
				Layer = "doodads_low"
				DamageLevels
				[
					{
						File = "off.png"
						Size = [1, 2]
					}
				]
			}
			Walls
			{
				Layer = "walls"
				DamageLevels
				[
					{
						File = "walls.png"
						Size = [1, 2]
					}
					{
						File = "walls_33.png"
						Size = [1, 2]
					}
					{
						File = "walls_66.png"
						Size = [1, 2]
					}
				]
			}
			Roof
			{
				Layer = "roofs"
				DamageLevels
				[
					{
						File = "roof.png"
						NormalsFile = "roof_normals.png"
						Size = [1, 2]
					}
					{
						File = "roof_33.png"
						NormalsFile = "roof_normals_33.png"
						Size = [1, 2]
					}
					{
						File = "roof_66.png"
						NormalsFile = "roof_normals_66.png"
						Size = [1, 2]
					}
				]
			}
			/*
			OperationalRoofWindows
			{
				Layer = "roof_windows"
				DamageLevels
				[
					{
						File = "Windows.png"
						NormalsFile = "Windows_normals.png"
						Size = [1, 2]
					}
					{
						File = "Windows.png"
						NormalsFile = "Windows_normals_33.png"
						Size = [1, 2]
					}
					{
						File = "Windows.png"
						NormalsFile = "Windows_normals_66.png"
						Size = [1, 2]
					}
				]
			}
			NonOperationalRoofWindows
			{
				Layer = "roof_windows"
				DamageLevels
				[
					{
						File = "Windows.png"
						NormalsFile = "Windows_normals.png"
						Size = [1, 2]
					}
				]
			}
			*/
		}
		Indicators
		{
			Type = IndicatorSprites
			Location = [.5, 1]
			Layer = "indicators"
			Indicators
			[
				// Turned off.
				{
					Toggle = PowerToggle
					AtlasSprite
					{
						File = &/INDICATORS/PowerOff
						Size = [1, 1]
					}
				}
				// Out of power.
				{
					Toggle = BatteryStorage
					AtlasSprite
					{
						File = &/INDICATORS/NoPower
						Size = [.75, .75]
					}
				}

				// No crew.
				{
					Toggle = PartCrew
					AtlasSprite
					{
						File = &/INDICATORS/NoCrew
						Size = [.75, .75]
					}
				}
			]
		}

		// Extinguisher Graphics - Start
		ExtinguisherSprite
		{
			Type = ResourceSprites
			Location = [.5, 1]
			ResourceStorage = ExtinguisherStorage
			Layer = "doodads_high"
			HasZeroResourceSprite = false
			ResourceLevels
			[
				{
					File = "../../../Control_Rooms/extinguisher.png"
					Size = [1, 1]
				}
			]
		}
		// Extinguisher Graphics - End

		Blueprints
		{
			Type = BlueprintSprite
			File = "blueprints.png"
			Size = [1, 5]
			Offset = [0, -1.5]
		}
	}

	Stats
	{
		CrewRequired = &~/Part/Components/PartCrew/Crew
		PowerUsageContinuousMinutes = (&~/Part/Components/PowerDrain/FromQuantity) / (&~/Part/Components/PowerDrain/Interval) / 1000
		PowerCapacity = (&~/Part/Components/BatteryStorage/MaxResources) / 1000
		SightRange = &~/Part/Components/Sensor/SightRadius
		RadarRange = &~/Part/Components/Sensor/RadarRadius


		RecPower = &PowerUsageContinuousMinutes
		RecCrew = (&CrewRequired) + (&RecPower) * 4

		Barrels = 2
		ROF = (&~/Part/Stats/Barrels) / (&~/Part/Components/Turret/FireInterval)
		Range = &~/Part/Components/BulletEmitterBase/Bullet/Range
		Arc = deg(&~/Part/Components/Turret/FiringArc)
		TurretSpeed = deg(&~/Part/Components/Turret/RotateSpeed)
		ShotSpeed = &~/Part/Components/BulletEmitterBase/Bullet/Speed
		ShotHP = &~/Part/Components/BulletEmitterBase/Bullet/Components/Targetable/Health
		PowerPerShot = (&~/Part/Components/BulletEmitterBase/ResourcesUsed) / 1000
		PowerPerSecond = (&PowerPerShot) * (&~/Part/Stats/ROF)
		ShotPowerUsage = [&../PowerPerShot, &../PowerPerSecond]
	}
	LaserStats
	{
		NameKey = "StatCategories/SingleRedLasershot"
		Stats
		{
			ShieldDamagePerShot = &~/Components/BulletEmitterBase/Bullet/Components/Hit/HitShield/HitEffects/0/Damage
			ShieldDamagePerSecond = (&ShieldDamagePerShot) * 1 / (&~/Components/Turret/FireInterval)
			ShieldDamage = [&../ShieldDamagePerShot, &../ShieldDamagePerSecond]
			DamagePerShot = &~/Components/BulletEmitterBase/Bullet/Components/Hit/HitOperational/HitEffects/0/Damage
			DamagePerSecond = (&DamagePerShot) * 1 / (&~/Components/Turret/FireInterval)
			Damage = [&../DamagePerShot, &../DamagePerSecond]
		}
	}
}
TurretColliderBase
{
	Type = CircleCollider
	Location = &~/Part/Components/Turret/Location
	Radius = .5
	Density = .75
}