/* ----------------------------------------------------------------------------
Introduction: SW:ACD 0.3.6
Author: Lafiel
Description:
Gravity Well Projector which actually jams FTL drives by sucking their power in an area.
Requires Gravity Well Control!
Must be assigned a node number in the network.
The buff system is delicate. Do not change values if you don't know what you are doing.
Versions:
 * 1.0 for Cosmoteer 0.15.3
 * 1.1 for Cosmoteer 0.15.7
---------------------------------------------------------------------------- */
Part : /BASE_PART_TERRAN
{
	NameKey = "Parts/GravityWellProjector";
	IconNameKey = "Parts/GravityWellProjectorIcon";
	ID = Lafiel.gravity_well_projector
	DescriptionKey = "Parts/GravityWellProjectorDesc";
	EditorGroup = "SWTechII"
	Resources
	[
		[steel, 8] //
	]  //Cost = 40000
	AIValueFactor = 1

	Size = [6, 6]
	SelectionPriority = 1
	MaxHealth = 36000;
	TypeCategories = [gravity_well_projector,uses_power];

	EditorIcon
	{
		Texture
		{
			File = "icon_projector.png"
			SampleMode = Linear
		}
		Size = [92, 92]
	}
	Components : ^/0/Components
	{
		IsOperational
		{
			Type = MultiToggle
			Toggles
			[
				PowerToggle
				BatteryStorage
			]
			Mode = All
		}
		PowerToggle
		{
			Type = UIToggle
			ToggleID = "on_off"
			Default = 1
		}

		FireModeToggle
		{
			Type = UIToggle
			ToggleID = "fire_mode"
			Default = 1
			ToggledOnChoices = [0, 1, 2]
		}
		AutoTargetToggle
		{
			Type = ModeToggle
			Mode = FireModeToggle
			OnModes = [1, 2]
		}
		AutoFireToggle
		{
			Type = ModeToggle
			Mode = FireModeToggle
			OnMode = 2
		}
		BatteryStorage
		{
			Type = ResourceStorage;
			ResourceType = battery;
			MaxResources = 16000;
			StartingAmmo = &MaxResources;
		}
		BatteryConsumer
		{
			Type = TypedResourceGridConsumer
			ResourceType = battery
			Storage = BatteryStorage
			DefaultPriority = &/PRIORITIES/Weapon_Supply
			ResupplyThreshold = 500
			OperationalToggle = PowerToggle

			ReceiveResourceMediaEffects = &/COMMON_EFFECTS/PowerDeliver
		}
		ReloadProgressBar
		{
			Type = ProgressBar
			OperationalToggle = PowerToggle
			ShowProgressFor = BatteryStorage
		}

		ChargeStorage
		{
			Type = ResourceStorage
			ResourceType = FTL_jammer_juice
			MaxResources = 1000
			ToggleOnResources = 1000
			StartingAmmo = 0
		}


//-----------------------------------------------------------------------------

		JammingTrigger
		{
			Type = ToggleTrigger
			Toggle = ChargeStorage //JammingPrereq
			TriggerWhenOn = false
			TriggerWhenOff = true
			OperationalToggle = IsOperational
			//InvertOperationalToggle = true
		}
		Weapon
		{
			Type = TurretWeapon
			Location = [3, 3] // Relative to upper-left corner of unrotated part.
			Rotation = -90d // Relative to unrotated part.
			OperationalToggle = ChargeStorage
			AutoFireToggle = IsOperational //AutoFireToggle
			FireInterval = 1 //0 // Uses separate fire timer.
			//FirePermissionToggle = FireTimer
			FiringArc = 360d
			RotateSpeed = 1080d
			FireThresholdAngle = 1d
			TargetSearchesPerSecond = 8 // Default is 2.
			IgnoreSourceShipLOSChecks = true
			AIFirepowerRating = 0
			FirePermissionToggle = FireModeToggle
			Emitter = WeaponEmitter

			AutoTargets
			[
				{
					TargetType = ShipParts
					Toggle = AutoTargetToggle
				}
			]
			BlueprintArcSprite
			{
				Texture = &/INDICATORS/WeaponArc
				Size = [0, 1.5]
				Color = [255, 0, 0, 63]
			}
			BlueprintArcRadius = 10
			BlueprintArcSpriteSegments = 64

			CoverageSectorArc
			{
				Texture = &/INDICATORS/VerticalGradient
				VertexColor = [255, 255, 255, 51]
				QuadCount = 64
			}
		}
		WeaponEmitter
		{
			Type = BulletEmitter
			ChainedTo = Weapon
			FireTrigger = Weapon
			GetTargetFrom = Weapon
			Location = [0, 0]
			OperationalToggle = IsOperational
			FireDelay = 0
			Bullet = &<FTL_jammer_shot.txt>
			AmmoUsage
			[
				{
					ResourceStorage = BatteryStorage
					ResourcesUsed = 16000
				}
				{
					ResourceStorage = ChargeStorage
					ResourcesUsed = 1000
				}
			]

		}

//-----------------------------------------------------------------------------
		Graphics
		{
			Type = Graphics
			Location = [3, 3]
			Floor
			{
				Layer = "floors"
				DamageLevels
				[
					{
						File = "floor.png"
						Size = [6, 6]
					}
					{
						File = "floor_33.png"
						Size = [6, 6]
					}
					{
						File = "floor_66.png"
						Size = [6, 6]
					}
				]
			}
			Walls
			{
				Layer = "walls"
				DamageLevels
				[
					{
						File = "./Data/ships/terran/reactor_large/walls.png"
						Size = [6, 6]
					}
					{
						File = "./Data/ships/terran/reactor_large/walls_33.png"
						Size = [6, 6]
					}
					{
						File = "./Data/ships/terran/reactor_large/walls_66.png"
						Size = [6, 6]
					}
				]
			}
			Roof
			{
				Layer = "roofs"
				DamageLevels
				[
					{
						File = "roof.png"
						Size = [6, 6]
					}
				]
			}
		}

		CoreGraphics
		{
			Type = Graphics
			Location = [3, 3]
			OperationalToggle = IsOperational
			Floor
			{
				Layer = "doodads_low"
				DamageLevels
				[
					{
						File = "singularity_whirlepool_off.png"
						Size = [6, 6]
					}
				]
			}
			OperationalDoodad
			{
				Layer = "weapons"
				DamageLevels
				[
					{
						AnimationFiles
						[
							"swirl.png"
						]
						Size = [4.5, 4.5]
						AnimationInterval = 1
//						AnimationStartTime = MinValue
//						ClampAnimation = true
						RotSpeed = 180d
					}
				]
			}
			Walls
			{
				Layer = "doodads_high"
				Offset = [0, -2.5]
				DamageLevels
				[
					{
						File = "transmission_disc.png"
						Size = [180/64, 1.5]
					}
				]
			}
		}

		DestroyedEffects
		{
			Type = DeathEffects
			MediaEffects = &/COMMON_EFFECTS/SmallPartDestroyedDry
			Location = [3, 3]
		}



		Indicators
		{
			Type = IndicatorSprites
			Location = [3, 3]
			Layer = "indicators"
			Indicators
			[
				// Turned off.
				{
					Toggle = PowerToggle
					AtlasSprite
					{
						File = &/INDICATORS/PowerOff
						Size = [1, 1]
					}
				}
			]
		}

		Blueprints
		{
			Type = BlueprintSprite
			File = "blueprints_projector.png"
			Size = [6, 6]
		}
	}

//	Stats
//	{
//		PowerCapacity = (&~/Part/Components/BatteryStorage/MaxResources) / 1000
//
//		RecPower = &../StatsByCategory/0/Stats/PowerPerSecond
//		RecCrew = (&RecPower) * 4	
//	}
//
//	StatsByCategory
//	[
//		{
//			NameKey = "StatCategories/MissileEMP"
//			Stats
//			{
//				PowerDrainPerShot = (&~/Part/Components/WeaponEmitter/Bullet/Components/Hit/HitOperational/HitEffects/0/TotalDrain) / 1000
//				PowerDrainPerSecond = (&PowerDrainPerShot) * (&ROF)
//				PowerDrainArea = &~/Part/Components/WeaponEmitter/Bullet/Components/Hit/HitOperational/HitEffects/0/Radius
//				PowerDrain = [&../PowerDrainPerShot, &../PowerDrainPerSecond]
//				ROF = 1 / (&~/Part/Components/Weapon/FireInterval)
//				Arc = deg(&~/Part/Components/Weapon/FiringArc)
//				Range = &~/Part/Components/WeaponEmitter/Bullet/Range
//				PowerPerShot = (&~/Part/Components/WeaponEmitter/AmmoUsage/0/ResourcesUsed) / 1000
//				PowerPerSecond = (&PowerPerShot) * (&ROF)
//				ShotPowerUsage = [&../PowerPerShot, &../PowerPerSecond]
//			}
//		}
//	]


}
