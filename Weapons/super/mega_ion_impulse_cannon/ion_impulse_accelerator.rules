Part : /BASE_PART_TERRAN
{/* ----------------------------------------------------------------------------

Introduction: SW:ACD 0.3.7

Author : Lafiel
Description:
Used to unlock the mega_ion_impulse_cannon and buff it; as well as balance its power consumption


Versions:

 o 1.0 Cosmoteer 0.15.14

---------------------------------------------------------------------------- */ 

	ID = SW.ion_impulse_accelerator
	NameKey = "Parts/IonImpulseAccelerator"
	IconNameKey = "Parts/IonImpulseAcceleratorIcon"
	DescriptionKey = "Parts/IonImpulseAcceleratorDesc"
	EditorGroup = "TechIII"
	Resources
	[
		[steel, 8] //
	]  //Cost = 60000
	Size = [6, 8]
	Density = 4
	SelectionTypeID = "railgun"
	SelectionPriority = 1
	SelectionTypeByRotation = true
	MaxHealth = 48000
	Flammable = false
	TypeCategories = [uses_power, ion_impulse_accelerator,ion_impulse_weapon]
	ReceivableBuffs : ^/0/ReceivableBuffs [RailgunOperation,Railgun,RailgunReverseOperation]

	AllowedDoorLocations
	[
		[-1, 1]
		[6, 1]
		[-1, 2]
		[6, 2]
		[-1, 3]
		[6, 3]
		[-1, 4]
		[6, 4]
		[-1, 5]
		[6, 5]
		[-1, 6]
		[6, 6]
		[1, -1]
		[4, -1]
		[1, 8]
		[4, 8]
	]
	HasNonContiguousPathing = true
	BlockedTravelCellDirections
	[
		{
			Key = [0, 7]
			Value = [Right]
		}
		{
			Key = [5, 7]
			Value = [Left]
		}
	]
	EditorIcon
	{
		Texture
		{
			File = "icon_ion_accelerator.png"
			SampleMode = Linear
		}
		Size = [69, 92]
	}
	Components : ^/0/Components
	{
		BuffOperational
		{
			Type = MultiToggle
			Toggles = [PowerToggle, BatteryStorage, IonCannonOperationToggle]
			Mode = All
		}
		IsOperational
		{
			Type = MultiToggle
			Toggles = [BuffOperational]
			Mode = All
		}

		PowerToggle
		{
			Type = UIToggle
			ToggleID = "on_off"
			Default = 1
		}

		BatteryStorage
		{
			Type = ResourceStorage
			ResourceType = battery
			MaxResources = 80000
		}
		BatteryConsumer
		{
			Type = TypedResourceGridConsumer
			ResourceType = battery
			Storage = BatteryStorage
			DefaultPriority = &/PRIORITIES/Weapon_Supply
			ResupplyThreshold = 500
			OperationalToggle = PowerToggle
			ReceiveResourceMediaEffects = &/COMMON_EFFECTS/PowerDeliver
		}
		ReloadProgressBar
		{
			Type = ProgressBar
			//OperationalToggle = PowerToggle
			ShowProgressFor = BatteryStorage
		}


		IonCannonBuffToggle
		{
			Type = BuffToggle
			BuffType = Railgun
		}

		IonCannonOperationBuffToggle
		{
			Type = BuffToggle
			BuffType = RailgunOperation
		}
		IonCannonOperationToggle
		{
			Type = MultiToggle
			Toggles = [IonCannonOperationBuffToggle,IsEndSection]
			Mode = Any
		}
		IsEndSection //do not remove
		{
			Type = MultiToggle
			Toggles = [{Toggle=BottomConnection; Invert=true}]
			Mode = All
		}
		BottomConnection //do not remove
		{
			Mode = All
			Type = ToggleProxy
			PartLocation = [0, 8]
			PartCriteria
			{
				Category = ion_impulse_weapon
				Rot = 0
				//Left = 0
				//Right = 6
				//Bottom = 0
			}
			ComponentID = BatteryStorage
			//IsOnWhenNotConnected = true
		}

		IonCannonBuffProvider
		{
			Type = AreaBuffProvider
			BuffType = Railgun
			BuffAmount = { BaseValue=0.05; BuffType=Railgun; BuffMode=Add; }
			BuffArea = [0, -1, 1, 1]
			OperationalToggle = IonCannonOperationToggle
			ChainsFromBuffType = Railgun
			Criteria
			{
				Category = ion_impulse_weapon
				Rot = 0
				Left = 0
				Right = 6
				//Bottom = 0
			}
		}

		IonCannonOperationBuffProvider
		{
			Type = AreaBuffProvider
			BuffType = RailgunOperation
			BuffArea = [0, -1, 1, 1]
			OperationalToggle = IonCannonOperationToggle
			ChainsFromBuffType = RailgunOperation
			Criteria
			{
				Category = ion_impulse_weapon
				Rot = 0
				Left = 0
				Right = 6
				Bottom = 0
			}
		}

		IonCannonReverseOperationBuffToggle
		{
			Type = BuffToggle
			BuffType = RailgunReverseOperation
		}

		ReverseBuffOperationProvider
		{
			Type = AreaBuffProvider
			BuffType = RailgunReverseOperation
			BuffArea = [0, 8, 1, 1]
			OperationalToggle = IonCannonReverseOperationBuffToggle
			ChainsFromBuffType = RailgunReverseOperation
			Criteria
			{
				Category = ion_impulse_weapon
				Rot = 0
				Left = 0
				Right = 6
				Top = 8
			}
		}


		Weapon
		{
			Type = TriggerProxy
			PartLocation = [0, -1]
			PartCriteria
			{
				Category = ion_impulse_weapon
				Rot = 0
				//Left = 0
				//Right = 6
				//Bottom = 0
			}
			ComponentID = Weapon
		}

		WeaponEmitter
		{
			Type = TriggerProxy
			PartLocation = [0, -1]
			PartCriteria
			{
				Category = ion_impulse_weapon
				Rot = 0
				//Left = 0
				//Right = 6
				//Bottom = 0
			}
			ComponentID = WeaponEmitter
		}

		PowerDrainOnShoot
		{
			Type = AmmoChange
			Trigger = WeaponEmitter
			ResourceStorage = BatteryStorage
			Amount = -80000
		}

		GraphicsLeft
		{
			Type = Graphics
			Location = [3, 4]
			OperationalToggle = IsOperational
			Floor
			{
				Layer = "floors"
				Offset = [-1, 0]
				DamageLevels
				[
					{
						File = "../floor06[4,8].png"
						Size = [4, 8]
					}
				]
			}
			OperationalLighting
			{
				Layer = "lights_add"
				DamageLevels
				[
					{
						File = "../deathstar_superlaser/lights-r[3,4].png"
						Size = [6, 8]
					}
				]
			}
			Walls
			{
				Layer = "walls"
				Offset = [-2.5, 0]
				DamageLevels
				[
					{
						File = "../deathstar_superlaser/wall_side_B.png"
						Size = [1, 8]
					}
					{
						File = "../deathstar_superlaser/wall_side_B_33.png"
						Size = [1, 8]
					}
					{
						File = "../deathstar_superlaser/wall_side_B_66.png"
						Size = [1, 8]
					}
				]
			}
			Roof
			{
				Layer = "roofs"
				DamageLevels
				[
					{
						File = "../deathstar_superlaser2/roof.png"
						Size = [6, 8]
					}
					{
						File = "../deathstar_superlaser2/roof_33.png"
						Size = [6, 8]
					}
					{
						File = "../deathstar_superlaser2/roof_66.png"
						Size = [6, 8]
					}
				]
			}
		}

		GraphicsRight
		{
			Type = Graphics
			Location = [3, 4]
			OperationalToggle = IsOperational
			Floor
			{
				Layer = "floors"
				Offset = [1, 0]
				DamageLevels
				[
					{
						File = "../floor06[4,8].png"
						Size = [4, 8]
					}
				]
			}
			Walls
			{
				Layer = "walls"
				Offset = [2.5, 0]
				DamageLevels
				[
					{
						File = "../deathstar_superlaser/wall_side_B.png"
						Size = [1, 8]
						MirrorU = true
					}
					{
						File = "../deathstar_superlaser/wall_side_B_33.png"
						Size = [1, 8]
						MirrorU = true
					}
					{
						File = "../deathstar_superlaser/wall_side_B_66.png"
						Size = [1, 8]
						MirrorU = true
					}
				]
			}
		}
/*
		BatterySprites
		{
			Type = ResourceSprites
			Location = [1, 2.5]
			ResourceStorage = BatteryStorage
			Layer = "doodads_low"
			AmmoLevels
			[
				{
					File = "batteries1.png"
					Size = [2, 1]
				}
				{
					File = "batteries2.png"
					Size = [2, 1]
				}
			]
		}
*/
		OperationEffects
		{
			Type = ToggleEffects
			Location = [3, 4]
			Toggle = IsOperational
			ToggledOnMediaEffects = &/COMMON_EFFECTS/PowerOn
			ToggledOffMediaEffects = &/COMMON_EFFECTS/PowerOff
		}

		DestroyedEffects
		{
			Type = DeathEffects
			MediaEffects = &/COMMON_EFFECTS/BigPartDestroyed
			Location = [3, 4]
		}

		RecursiveDeath1
		{
			Type = DeathEffects
			Location = [3, 8.5]

			HitEffects
			[
				{
					Type = AreaDamage
					Damage = 50000
					Radius = .6
					Falloff = 0
					Delay = .15
					Filter
					{
						OperationalHealth = true
						StructuralHealth = false
						Friendlies = true
					}
				}
			]
		}

		RecursiveDeath2 : RecursiveDeath1
		{
			Location = [1, 8.5]
		}

		Indicators
		{
			Type = IndicatorSprites
			Location = [3, 4]
			Layer = "indicators"
			Indicators
			[
				// Turned off.
				{
					Toggle = PowerToggle
					AtlasSprite
					{
						File = &/INDICATORS/PowerOff
						Size = [2, 2]
					}
				}

				// Out of power.
				{
					Toggle = BatteryStorage
					Delay = 0.5
					AtlasSprite
					{
						File = &/INDICATORS/NoPower
						Size = [2, 2]
					}
				}
			]
		}

		Blueprints
		{
			Type = BlueprintSprite
			File = "blueprints_ion_accelerator.png"
			Size = [6, 8]
		}
	}
/*
	Stats
	{
		PowerCapacity = (&~/Part/Components/BatteryStorage/MaxResources) / 1000
		PowerPerShot = -(&~/Part/Components/PowerDrainOnShoot/Amount) / 1000
		PowerPerSecond = (&PowerPerShot) / (&<../railgun_launcher/railgun_launcher.txt>/Part/Components/Weapon/FireInterval)
		ShotPowerUsage = [&../PowerPerShot, &../PowerPerSecond]

		RecPower = &PowerPerSecond
		RecCrew = (&RecPower) * 4
	}

	StatsByCategory
	[
		{
			NameKey = "StatCategories/RailgunBuff"
			Stats
			{
				BaseMultiplier = (&<./Data/buffs/buffs.txt>/RailgunShot/Multiplier) * 100
				Exponent = (&<./Data/buffs/buffs.txt>/RailgunShot/Exponent)
				RailgunBuff
				[
					(&../BaseMultiplier) * (1 ^ (&../Exponent))
					(&../BaseMultiplier) * (2 ^ (&../Exponent))
					(&../BaseMultiplier) * (3 ^ (&../Exponent))
					(&../BaseMultiplier) * (4 ^ (&../Exponent))
					(&../BaseMultiplier) * (5 ^ (&../Exponent))
					(&../BaseMultiplier) * (6 ^ (&../Exponent))
					(&../BaseMultiplier) * (7 ^ (&../Exponent))
					(&../BaseMultiplier) * (8 ^ (&../Exponent))
					(&../BaseMultiplier) * (9 ^ (&../Exponent))
					(&../BaseMultiplier) * (10 ^ (&../Exponent))
					(&../BaseMultiplier) * (11 ^ (&../Exponent))
					(&../BaseMultiplier) * (12 ^ (&../Exponent))
					(&../BaseMultiplier) * (13 ^ (&../Exponent))
					(&../BaseMultiplier) * (14 ^ (&../Exponent))
					(&../BaseMultiplier) * (15 ^ (&../Exponent))
					(&../BaseMultiplier) * (16 ^ (&../Exponent))
					(&../BaseMultiplier) * (17 ^ (&../Exponent))
					(&../BaseMultiplier) * (18 ^ (&../Exponent))
					(&../BaseMultiplier) * (19 ^ (&../Exponent))
					(&../BaseMultiplier) * (20 ^ (&../Exponent))
					(&../BaseMultiplier) * (21 ^ (&../Exponent))
					(&../BaseMultiplier) * (22 ^ (&../Exponent))
					(&../BaseMultiplier) * (23 ^ (&../Exponent))
					(&../BaseMultiplier) * (24 ^ (&../Exponent))
					(&../BaseMultiplier) * (25 ^ (&../Exponent))
					(&../BaseMultiplier) * (26 ^ (&../Exponent))
					(&../BaseMultiplier) * (27 ^ (&../Exponent))
					(&../BaseMultiplier) * (28 ^ (&../Exponent))
					(&../BaseMultiplier) * (29 ^ (&../Exponent))
					(&../BaseMultiplier) * (30 ^ (&../Exponent))
				]
			}
		}
	]
*/
}
