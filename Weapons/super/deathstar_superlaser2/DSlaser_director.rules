/* ----------------------------------------------------------------------------

Introduction: SW:ACD 
DSL Prism version

Author : Lafiel

Description:
Quick and dirty fast prototyping version, based on prism.
This part is for re-directing the beam to another or as standalone weapon.
This part is not physical. It has no hitbox. It does not need destruction components. 
This part does not need graphics, only blueprints and indicators at most.

Versions:

 o 1.0 Cosmoteer 0.15.8
   o based on ion-prism
 o 1.1 Cosmoteer 0.15.12b

---------------------------------------------------------------------------- */

Part : /BASE_PART_TERRAN
{
	NameKey = "Parts/DSLaserDirector"
	IconNameKey = "Parts/DSLaserDirectorIcon"
	ID = SW.DSlaser_director
	DescriptionKey = "Parts/DSLaserDirectorDesc"
	EditorGroup = "SWTechIII"
	Resources
	[
		[steel, 8] //
	]  //Cost = 50000
	AIValueFactor = 5

	Size = [6, 6]
	Density = 2
	SelectionTypeID = "DSLII"
	SelectionPriority = 1
	SelectionTypeByRotation = true
	MaxHealth = 2100000000
	TypeCategories = [weapon, deathstarlaser_director]
	RequiresCategories = [DSL_command]

	Flammable = false
	IsWalled = false
	IgnoreRotationForMirroredSelection = true
	CrewSpeedFactor = 0
	AllowedDoorLocations = []
	GeneratorRequiresDoor = false
	NoAutoDoors = true
	IsExternal = true
	ExternalWalls = [None]
	InternalWalls = [All]
	GenerateRectCollider = false
	CreatePartPerTileWhenGrabbed = structure
	EditorReplacementPartID = structure

	EditorIcon
	{
		Texture
		{
			File = "./Data/ships/terran/ion_beam_prism/icon.png"
			SampleMode = Linear
		}
		Size = [92, 92]
	}
	Components : ^/0/Components
	{
		PowerToggle
		{
			Type = UIToggle
			ToggleID = "on_off"
			Default = 1
		}
		CommandToggle
		{
			Type = CommandToggle
		}
		TurretToggle
		{
			Type = MultiToggle
			Toggles = [PowerToggle, CommandToggle]
			Mode = All
		}

		FireModeToggle
		{
			Type = UIToggle
			ToggleID = "fire_mode"
			Default = 1
			ToggledOnChoices = [0, 1, 2]
		}
		AutoTargetToggle
		{
			Type = ModeToggle
			Mode = FireModeToggle
			OnModes = [1, 2]
		}
		AutoFireToggle
		{
			Type = ModeToggle
			Mode = FireModeToggle
			OnMode = 2
		}
		BuffProvider
		{
			Type = GridBuffProvider
			BuffType = DSLOperation
			BuffAmount = 1
			GridDistance = 1
			Criteria
			{
				Category = director_connector
				//Rot = 0
				//Left = 0
				//Right = 1
				//Bottom = 0
			}
		}
		Collider
		{
			Type = CircleCollider
			Location = [3, 3]
			Radius = .7
			Density = 5
		}

		IonEnergy
		{
			Type = IonEnergyStorage
			ResourceType = ion_energy
			ReductionFactorPerBeam = 1
			ProvidedValuePerAmmo = 1/1000
			IsDrainable = true
		}

		BeamTrigger
		{
			Type = ToggleTrigger
			Toggle = IonEnergy
			TriggerWhenOn = true
			TriggerWhenOff = false
		}

		Targetor
		{
			Type = UITargetor
			TargetorID = dsl_aim
			Weapons = [Turret, IonBeamChainToggle]
		}

		Turret
		{
			Type = TurretWeapon
			Location = [3, 3] // Relative to upper-left corner of unrotated part.
			Rotation = -90d // Relative to unrotated part.
			OperationalToggle = TurretToggle
			FireInterval = 0.2 //&<./Data/ships/terran/ion_beam_emitter/ion_beam_emitter.txt>/Part/Components/Weapon/FireInterval
			FiringArc = 360d
			RotateSpeed = 20d
			FireThresholdAngle = 1d
			AIFirepowerRating = 0
			AddAIFirepowerRatingsWhenTargetedByPartCategories = [deathstarlaser_emitter, deathstarlaser_director]
			TargetingEmitter = BeamEmitter
			SuppressWholeShipTargetOverlaysForPartsFilter = &FriendlyPrismFilter
			SuppressWholeShipTargetOverlaysWhenTargetingShipRelativePoints = true
			SuppressShipWideExplicitTargetsWhenTargetingPartsFilter = &FriendlyPrismFilter
			SuppressShipWideExplicitTargetsWhenTargetingShipRelativePoints = true
			SuppressDirectControlWhenTargetingPartsFilter = &FriendlyPrismFilter
			SuppressDirectControlWhenTargetingShipRelativePoints = true
			SuppressFirepowerEstimationWhenTargetingPartsFilter = &FriendlyPrismFilter
			SaveSelfTargetPartCategories = [deathstarlaser_director]
			SaveShipRelativeTargets = true
			HoldTargetAfterCancel = 3.0
			FirePermissionToggle = FireModeToggle

			FriendlyPrismFilter
			{
				Enemies = false
				Junk = false
				OnlyPartCategories = [deathstarlaser_director]
			}

			AutoTargets
			[
				{
					TargetType = ShipParts
					Toggle = AutoTargetToggle
				}
			]

			CoverageSectorArc
			{
				Texture = &/INDICATORS/VerticalGradient
				VertexColor = [255, 255, 255, 51]
				QuadCount = 64
			}
		}

		IonBeamChainToggle
		{
			Type = FixedWeapon
			ChainedTo = Turret
			OperationalToggle = PowerToggle
			AutoFireToggle = AutoFireToggle
			FireInterval = .2
			AIFirepowerRating = 0
			TargetingEmitter = BeamEmitter
			ChainFireToggleComponent = IonBeamChainToggle
			AllowEnemyStructureAutoTargeting = true
			ProhibitTargetPartsFilter = &../Turret/FriendlyPrismFilter // Don't force fire on friendly ion prisms!
			ProhibitShipRelativePointTargets = true
			SuppressWholeShipTargetOverlaysForPartsFilter = &../Turret/FriendlyPrismFilter
			SuppressWholeShipTargetOverlaysWhenTargetingShipRelativePoints = true
			SuppressShipWideExplicitTargetsWhenTargetingPartsFilter = &../Turret/FriendlyPrismFilter
			SuppressShipWideExplicitTargetsWhenTargetingShipRelativePoints = true
			SuppressDirectControlWhenTargetingPartsFilter = &../Turret/FriendlyPrismFilter
			SuppressFirepowerEstimationWhenTargetingPartsFilter = &../Turret/FriendlyPrismFilter
			SuppressFirepowerEstimationWhenNotTargetingShipRelativePoints = true
			SaveSelfTargetPartCategories = [deathstarlaser_director]
			SaveShipRelativeTargets = true
			AddAIFirepowerRatingsWhenTargetedByPartCategories = [deathstarlaser_emitter, deathstarlaser_director]
			DefaultDirectControlBinding = 0
			FirePermissionToggle = FireModeToggle

			AutoTarget
			{
				TargetType = ShipParts
				Toggle = AutoTargetToggle
			}
		}

		BeamEmitter : &/SW_SHOTS/SuperLaserBeamGreen2/SuperLaser_beam_green2
		{
			Type = BeamEmitter
			ChainedTo = Turret
			FireTrigger = BeamTrigger
			GetTargetFrom = Turret
			ResourceStorage = IonEnergy
			ResourcesUsed = 1000
			MinResourcesUsed = 1
			FireDelay = &HitInterval // Needed to let multiple beams accumulate their energy.
			Duration = &HitInterval // Can't be longer than HitInterval or it can create positive feedback loops.
			EffectsScaleFactor = IonEnergy
			ValueScaleFactor = IonEnergy
			AmmoScaleFactor = IonEnergy
			UpdateScaleFactorsPerEmit = true
		}

//----------- No Graphics needed ----------------------------------------------
/*
		Graphics
		{
			Type = Graphics
			Location = [1, 1]
			Floor
			{
				Layer = "structure"
				DamageLevels
				[
					{
						File = "structure.png"
						Size = [2, 2]
					}
					{
						File = "structure_33.png"
						Size = [2, 2]
					}
					{
						File = "structure_66.png"
						Size = [2, 2]
					}
				]
			}
		}

		TurretGraphics
		{
			Type = Graphics
			ChainedTo = Turret
			Location = [.5, 0]
			Rotation = 90d
			OperationalToggle = BeamEmitter
			Floor
			{
				Layer = "weapons"
				DamageLevels
				[
					{
						File = "prism.png"
						Size = [2, 3]
					}
					{
						File = "prism_33.png"
						Size = [2, 3]
					}
					{
						File = "prism_66.png"
						Size = [2, 3]
					}
				]
			}
			OperationalDoodad
			{
				Layer = "lights_add"
				Offset = [0, .25]
				DamageLevels
				[
					{
						AnimationFiles
						[
							"energy1.png"
							"energy2.png"
							"energy3.png"
							"energy4.png"
						]
						Size = [3, 3]
						AnimationInterval = 0.075
						AnimationStartTime = Zero
					}
				]
			}
		}
*/

/*
		DestroyedEffectsCold
		{
			Type = DeathEffects
			Location = [1, 1]
			OperationalToggle = BeamEmitter
			InvertOperationalToggle = true

			MediaEffects
			[
				&<./Data/common_effects/particles/explosions/small_part_explode_dry.txt>
				&<particles/prism_explode_shrapnel.txt>

				: /BASE_SOUNDS/AudioExterior
				{
					Sound = "./Data/common_effects/sounds/small_part_destroyed.wav"
					Volume = .5
					SpeedVariation = .25
				}

				: /BASE_SHAKE
				{
					ShakeAmount = .05
					Duration = .5
				}
			]
		}

		DestroyedEffectsHot
		{
			Type = DeathEffects
			Location = [1, 1]
			OperationalToggle = BeamEmitter

			MediaEffects
			[
				&<./Data/common_effects/particles/explosions/small_part_explode.txt>
				&<particles/prism_explode_shrapnel_hot.txt>
				&<particles/prism_explode_flash.txt>
				&<particles/prism_explode_shockwave.txt>

				: /BASE_SOUNDS/AudioExterior
				{
					Sound = "./Data/common_effects/sounds/small_part_destroyed.wav"
					Volume = .75
					SpeedVariation = .25
				}

				: /BASE_SHAKE
				{
					ShakeAmount = .1
					Duration = .75
				}
			]
			
			FactorHitEffectsWith = BeamEmitter
			HitEffects
			[
				{
					Type = ExplosiveDamage
					TotalDamage = 45000
					Radius = 5
					Delay = .05
					FireChancePerNDamage = 50%
					ImpulsePerNDamage = 10
					NDamage = 1000
					Filter
					{
						OperationalHealth = true
						StructuralHealth = false
						Friendlies = true
					}
				}
				{
					Type = ExplosiveDamage
					TotalDamage = 10000
					Radius = 3
					Delay = .05
					ImpulsePerNDamage = 5
					NDamage = 1000
					Filter
					{
						OperationalHealth = false
						StructuralHealth = true
						Friendlies = true
					}
				}
			]
		}
*/
		Indicators
		{
			Type = IndicatorSprites
			Location = [1, 1]
			Layer = "indicators"
			Indicators
			[
				// Turned off.
				{
					Toggle = PowerToggle
					AtlasSprite
					{
						File = &/INDICATORS/PowerOff
						Size = [1, 1]
					}
				}
			]
		}

		Blueprints
		{
			Type = BlueprintSprite
			File = "./Data/ships/terran/ion_beam_prism/blueprints.png"
			Size = [6, 6]
		}
	}



	Stats
	{
		
	}

	StatsByCategory
	[
		{
			NameKey = "StatCategories/IonBeam"
			Stats
			{
				Range = &~/Part/Components/BeamEmitter/Range/BaseValue
				Arc = deg(&~/Part/Components/Turret/FiringArc)
				ShotSpeed = Infinity
				TurretSpeed = deg(&~/Part/Components/Turret/RotateSpeed)

				ReductionFactorPerBeam = &~/Part/Components/IonEnergy/ReductionFactorPerBeam
/*
				BeamDamageFalloff
				[
					(1 - (&../ReductionFactorPerBeam)) * 100
				]
*/
			}
		}
	]


}
