/* ----------------------------------------------------------------------------

Introduction: SW:ACD 0.3.7

Author : Lafiel
Description:
Currently prototyping

It offers synchronized and alternate firing modes.
This requires the inheritance of the firing logic found in SW_weapon_fire_alternate_2.rules (See details).
In alternate fire on each sides the guns are divided in od and even groups and overall mirrored.

The timer component (WeaponTimerBuffProvider) is needed to adjust the timing individually for the weapon.

Versions:

 o 1.0 Cosmoteer 0.15.12

---------------------------------------------------------------------------- */ 
Part : &<./Data/ships/terran/base_part_terran.rules>/Part
{
	NameKey = "Parts/TurbolaserCarronade"
	IconNameKey = "Parts/TurbolaserCarronadeIcon"
	ID = SW.carronade_turbolaser
	DescriptionKey = "Parts/TurbolaserCarronadeDesc"
	EditorGroups = ["WeaponsEnergy", "TechIII"]
	Resources
	[
		[steel, 8] //
	]  //Cost = 12000
	AIValueFactor = 1

	TypeCategories = [weapon, uses_power,is_crewed]
	Size = [2, 3]
	SelectionPriority = 1
	SelectionTypeByRotation = true
	SelectionTypeID = "cannons"
	MaxHealth = 12000
	InitialPenetrationResistance = 5
	PenetrationRectType = Normal
	ReceivableBuffs : ^/0/ReceivableBuffs [SWWeaponTimerBuff]

	ProhibitRects
	[
		[0, -2, 2, 1]
	]
	AllowedDoorLocations
	[
		[-1, 1]
		[2, 1]
		[-1, 2]
		[2, 2]
                [1, 3]
                [0, 3]
	]

	EditorIcon
	{
		Texture
		{
			File = "icon.png"
			SampleMode = Linear
		}
		Size = [40, 80]
	}
	Components : ^/0/Components //, &<../SW_weapon_fire_alternate_2.rules>
	{
//		BlueprintSprite0
//		{
//			File = "blueprints.png"
//			Size = [2, 4]
//			Type=BlueprintSprite;
//		}

		IsOperational
		{
			Type = MultiToggle
			Toggles
			[
				PowerToggle
				BatteryStorage
				PartCrew
			]
			Mode = All
		}
		PowerToggle
		{
			Type = UIToggle
			ToggleID = "on_off"
			Default = 1
			ToggledOnChoices = [1]
		}
		FireModeToggle
		{
			Type = UIToggle
			ToggleID = "fire_mode"
			Default = 1
			ToggledOnChoices = [0, 1, 2]
		}
		AutoTargetToggle
		{
			Type = ModeToggle
			Mode = FireModeToggle
			OnModes = [1, 2]
		}
		AutoFireToggle
		{
			Type = ModeToggle
			Mode = FireModeToggle
			OnMode = 2
		}
		BatteryStorage
		{
			Type = ResourceStorage
			ResourceType = battery
			MaxResources = 5000
		}
		BatteryConsumer
		{
			Type = TypedResourceGridConsumer
			ResourceType = battery
			Storage = BatteryStorage
			DefaultPriority = &/PRIORITIES/Weapon_Supply
			ResupplyThreshold = 1000
			OperatinalToggle = PowerToggle
			ReceiveResourceMediaEffects = &/COMMON_EFFECTS/PowerDeliver
		}

		LaserType
		{
			Type = UIToggle
			ToggleID = "SW.blasterlaser_type"
			Default = 0
			AlwaysAllowInBuildMode = true
		}

		LaserRedToggle
		{
			Type = ModeToggle
			Mode = LaserType
			OnMode = 0
		}
		LaserRedComponents
		{
			Type = ToggledComponents
			Toggle = LaserRedToggle
			IncludeInBlueprints = true
			Components : <red_carronade_laser.rules>/Components, <../SW_weapon_fire_alternate_2.rules> {}
		}

		LaserBlueToggle
		{
			Type = ModeToggle
			Mode = LaserType
			OnMode = 1
		}
		LaserBlueComponents
		{
			Type = ToggledComponents
			Toggle = LaserBlueToggle
			IncludeInBlueprints = true
			Components : <blue_carronade_laser.rules>/Components, <../SW_weapon_fire_alternate_2.rules> {}
		}

		LaserGreenToggle
		{
			Type = ModeToggle
			Mode = LaserType
			OnMode = 2
		}
		LaserGreenComponents
		{
			Type = ToggledComponents
			Toggle = LaserGreenToggle
			IncludeInBlueprints = true
			Components : <green_carronade_laser.rules>/Components, <../SW_weapon_fire_alternate_2.rules> {}
		}
		Graphics
		{
			Type = Graphics
			OperationalToggle = IsOperational,
			Location = [1, 1.5]
			Floor
			{
				Layer = "floors"
				DamageLevels
				[
					{
						File = "../floor03[2,3]01.png"
						Size = [2, 3]
					}
					{
						File = "../floor03[2,3]01_33.png"
						Size = [2, 3]
					}
					{
						File = "../floor03[2,3]01_66.png"
						Size = [2, 3]
					}
				]
			}
			OperationalLighting
			{
				Layer = "lights_add"
				DamageLevels
				[
					{
						File = "../FixedLightLaserCannon/lights.png"
						Size = [2, 3]
					}
				]
			}
			OperationalDoodad
			{
				Layer = "doodads_low"
				Offset = [0, 0.5]
				DamageLevels
				[
					{
						AnimationFiles
						[
							"../FalconLaser/console on1.png"
							"../FalconLaser/console on2.png"
							"../FalconLaser/console on3.png"
						]
						Size = [2, 2]
						AnimationInterval = 0.50
					}
				]
			}
			NonOperationalDoodad
			{
				Layer = "doodads_low"
				Offset = [0, 0.5]
				DamageLevels
				[
					{
						File = "../FalconLaser/console off.png"
						Size = [2, 2]
						//Offset = [0, 0]//-0.67]
					}
				]
			}
			Walls
			{
				Layer = "walls"
				DamageLevels
				[
					{
						File = "../walls01[2,3].png"
						Size = [2, 3]
					}
/*
					{
						File = "walls_33.png"
						Size = [2, 3]
					}
					{
						File = "walls_66.png"
						Size = [2, 3]
					}
*/
				]
			}
			Roof
			{
				Layer = "roofs"
				DamageLevels
				[
					{
						File = "roof.png"
						Size = [2, 3]
					}
/*
					{
						File = "roof_33.png"
						Size = [2, 3]
					}
					{
						File = "roof_66.png"
						Size = [2, 3]
					}
*/
				]
			}
			RoofWindows
			{
				Layer = "roof_windows"
				Offset = [0, 0.5]
				DamageLevels
				[
					{
						File = "../FalconLaser/roof_windows.png"
						Size = [2, 2]
					}
					{
						File = "../FalconLaser/roof_windows_33.png"
						Size = [2, 2]
					}
					{
						File = "../FalconLaser/roof_windows_66.png"
						Size = [2, 2]
					}
				]
			}
		}
		BatterySprites
		{
			Type = ResourceSprites
			Location = [1, 2]
			ResourceStorage = BatteryStorage
			Layer = "doodads_high"
			HasZeroResourceSprite = false
			ResourceLevels
			[
				{
					File = "../FalconLaser/batteries1.png"
					Size = [2, 2]
				}
				{
					File = "../FalconLaser/batteries2.png"
					Size = [2, 2]
				}
				{
					File = "../FalconLaser/batteries3.png"
					Size = [2, 2]
				}
				{
					File = "../FalconLaser/batteries4.png"
					Size = [2, 2]
				}
				{
					File = "../FalconLaser/batteries5.png"
					Size = [2, 2]
				}
			]
		}
				CrewLocation1
		{
			Type = CrewLocation
			Location = [0.55, 1.6]
			Rotation = 180d
		}
		CrewLocation2
		{
			Type = CrewLocation
			Location = [1.45, 1.6]
			Rotation = 180d
		}
		PartCrew
		{
			Type = PartCrew
			Crew = 2
			DefaultPriority = &/PRIORITIES/Weapon_Crew
			PrerequisitesBeforeCrewing = [PowerToggle]
			HighPriorityPrerequisites = [BatteryStorage]
			CrewDestinations
			[
				&../../CrewLocation1/Location
				&../../CrewLocation2/Location
			]
			CrewLocations
			[
				CrewLocation1
				CrewLocation2
			]
		}
		OperationEffects
		{
			Type = ToggleEffects
			Toggle = IsOperational,
			Location = [1, 1]
			ToggledOnMediaEffects = &/COMMON_EFFECTS/MachinesOn
			ToggledOffMediaEffects = &/COMMON_EFFECTS/MachinesOff
		}

		DestroyedEffects
		{
			Type = DeathEffects
			MediaEffects = &/COMMON_EFFECTS/MedPartDestroyed
			Location = [1, 1.5]

			FactorHitEffectsWith = BatteryStorage
			HitEffects
			[
				{
					Type = AreaDamage
					Damage = 400
					Radius = 2
					Delay = .05
					Filter
					{
						Friendlies = true
						OperationalHealth = true
						StructuralHealth = false
					}
				}
				{
					Type = AreaDamage
					Damage = 200
					Radius = 2
					Delay = .05
					Filter
					{
						Friendlies = true
						OperationalHealth = false
						StructuralHealth = true
					}
				}
				{
					Type = AreaFires
					FireChancePerTile = .1
					Radius = 4
					Falloff = 0
					Delay = .05
					Filter
                    {
                        Friendlies = true
                    }
				}
			]
		}
		Indicators
		{
			Type = IndicatorSprites
			Location = [1, 1.5]
			Layer = "indicators"
			Indicators
			[
				// Turned off.
				{
					Toggle = PowerToggle
					AtlasSprite
					{
						File = &/INDICATORS/PowerOff
						Size = [1, 1]
					}
				}

				// Out of power.
				{
					Toggle = BatteryStorage
					AtlasSprite
					{
						File = &/INDICATORS/NoPower
						Size = [1, 1]
					}
				}
				// No crew.
				{
					Toggle = PartCrew
					AtlasSprite
					{
						File = &/INDICATORS/NoCrew
						Size = [1, 1]
					}
				}
			]
		}

		BlueprintsRed
		{
			Type = BlueprintSprite
			File = "blueprints.png"
			Size = [2, 3]

			ShowOnlyInToggleMode
			{
				ToggleID = SW.blasterlaser_type
				Mode = 0
			}
		}
		BlueprintsBlue
		{
			Type = BlueprintSprite
			File = "blueprints.png"
			Size = [2, 3]
			ShowOnlyInToggleMode
			{
				ToggleID = SW.blasterlaser_type
				Mode = 1
			}
		}
		BlueprintsGreen
		{
			Type = BlueprintSprite
			File = "blueprints.png"
			Size = [2, 3]

			ShowOnlyInToggleMode
			{
				ToggleID = SW.blasterlaser_type
				Mode = 2
			}
		}
	}

	Stats
	{
		CrewRequired = &~/Part/Components/PartCrew/Crew
		PowerCapacity = (&~/Part/Components/BatteryStorage/MaxResources) / 1000

		RecPower = (&PowerPerSecond) * 1
		RecCrew = (&CrewRequired) + (&RecPower) * 4

		ROF = 2 / (&<red_carronade_laser.rules>/Components/WeaponTimerBuffProvider/BuffAmount)
		Range = &<red_carronade_laser.rules>/Components/BulletEmitter/Bullet/Range
		Arc = deg(&<red_carronade_laser.rules>/Components/Turret/FiringArc)
		TurretSpeed = deg(&<red_carronade_laser.rules>/Components/Turret/RotateSpeed)
		ShotSpeed = &<red_carronade_laser.rules>/Components/BulletEmitter/Bullet/Speed
		ShotHP = &<red_carronade_laser.rules>/Components/BulletEmitter/Bullet/Components/Targetable/Health
		PowerPerShot = (&<red_carronade_laser.rules>/Components/BulletEmitter/ResourcesUsed) / 1000
		PowerPerSecond = (&PowerPerShot) * (&ROF)
		ShotPowerUsage = [&../PowerPerShot, &../PowerPerSecond]
	}
	StatsByCategory
	[
		&<red_carronade_laser.rules>/LaserStats
		&<blue_carronade_laser.rules>/LaserStats
		&<green_carronade_laser.rules>/LaserStats
	]
}