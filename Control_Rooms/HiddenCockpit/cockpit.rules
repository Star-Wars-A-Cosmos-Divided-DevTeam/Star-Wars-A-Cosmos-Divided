Part : &<./Data/ships/terran/base_part_terran.rules>/Part
{
    //IDs
	ID = SW.cockpit2
	OtherIDs = ["cockpit2"]

    //StringKeys
	NameKey = "Parts/CockpitHid"
	IconNameKey = "Parts/CockpitHidIcon"
	DescriptionKey = "Parts/CockpitHidDesc"

    //Groups&Categories
	EditorGroups = ["Flight", "SWTechI"]
	TypeCategories = [command, uses_power, is_crewed, fire_extinguisher]
	//RequiresCategories = []

    //Resources&Size&Health
	Resources
	[
		[steel, 24]
		[coil2, 12]
		[processor, 1]
	]
	Size = [1, 2]
	MaxHealth = 3000

    //Selections
	SelectionPriority = 0
	SelectionTypeID = "control_room"

    //PartSpecific
	AIValueFactor = 5
	InitialPenetrationResistance = 2
	IsContiguityOrigin = true
	IsShipForward = true
	ContiguityOriginPriority = 1

    //ReceivableBuffs&Prohibits
	ReceivableBuffs : ^/0/ReceivableBuffs []

    //Doors&Etc
	MaxDoors = 2
	AllowedDoorLocations
	[
		[1,1]
		[-1,1]
		[0,2]
	]

    //Editor
	EditorIcon
	{
		Texture
		{
			File = "icon.png"
			SampleMode = Linear
		}
		Size = [32, 64]
	}

    //Components
	Components : ^/0/Components
	{
		/* SPECIAL COCKPIT ITEMS */
		

		// Fire Extinguisher - Start
		ExtinguisherStorage
		{
			Type = ResourceStorage
			ResourceType = fire_extinguisher
			MaxResources = &<./Data/resources/fire_extinguisher/fire_extinguisher.rules>/MaxPerNugget
			StartingResources = &MaxResources
			SuppliesResources = true
		}

		ExtinguisherProducer
		{
			Type = ResourceConverter
			OperationalToggle = ExtinguisherStorage
			InvertOperationalToggle = true
			ToStorage = ExtinguisherStorage
			ToQuantity = &<./Data/resources/fire_extinguisher/fire_extinguisher.rules>/MaxPerNugget
			Interval = 45
		}

		ProgressBar
		{
			Type = ProgressBar
			OperationalToggle = ExtinguisherProducer
			ShowProgressFor = ExtinguisherProducer
		}
		// Fire Extinguisher - End

		// Maneuvering Thrusters - Start
		Thruster0
		{
			Type = Thruster
			Location = [0.5, 2] // Relative to upper-left corner of unrotated part.
			Rotation = 0d // Relative to unrotated part.
			OperationalToggle = IsOperational
			Force = 100
			MinActivation = 0
			MaxActivation = 1
			MinUncommandedActivation = 0
			MaxUncommandedActivation = &MaxActivation
			ActivationIncreaseTime = 0
			ActivationRecoveryTime = 0
		}

		Thruster1 : Thruster0 {	Rotation = 90d	}
		Thruster2 : Thruster0 {	Rotation = 180d }
		Thruster3 : Thruster0 {	Rotation = 270d	}		
		// Maneuvering Thrusters - End


		CommandProvider
		{
			Type = CommandProvider
			OperationalToggle = IsOperational
			CommandPoints = 25  //Remember to update tooltip.
		}
		
		PowerToggle
		{
			Type = UIToggle
			ToggleID = "on_off"
			Default = 1
			RequiresCommand = false
		}
		IsOperational
		{
			Type = MultiToggle
			Toggles = [PowerToggle, BatteryStorage, PartCrew]
			Mode = All
		}
		Sensor
		{
			Type = Sensor				//lower radius
			SightRadius = 300
			RadarRadius = ceil(300*4.5)

		}
		BatteryStorage
		{
			Type = ResourceStorage
			ResourceType = battery
			MaxResources = 2000
		}
		BatteryConsumer
		{
			Type = ResourceConsumer
			ResourceType = battery
			Storage = BatteryStorage
			DefaultPriority = &/PRIORITIES/ControlRoom_Supply
			ResupplyThreshold = 1000
			OperationalToggle = PowerToggle
			ReceiveResourceMediaEffects = &/COMMON_EFFECTS/PowerDeliver
			AllowNonContiguousCrewSearch = true
		}
		PowerDrain
		{
			Type = ResourceConverter
			FromStorage = BatteryStorage
			FromQuantity = 1000				//uses less power
			Interval = 80					// Drains 1.5 power every minute.
		}
		CrewLocation
		{
			Type = CrewLocation
			Location = [.5, 1.15]
			Rotation = 0d
		}
		PartCrew
		{
			Type = PartCrew
			Crew = 1
			DefaultPriority = &/PRIORITIES/ControlRoom_Crew
			PrerequisitesBeforeCrewing = [PowerToggle]
			HighPriorityPrerequisites = [BatteryStorage]
			AbandonWhenOnFire = false
			CrewDestinations
			[
				[.5, 1.30]
			]
			CrewLocations
			[
				CrewLocation
			]
		}
		Graphics
		{
			Type = Graphics
			OperationalToggle = IsOperational,
			Location = [.5,1]
			Floor
			{
				Layer = "floors"
				DamageLevels
				[
					{
						File = "floor.png"
						Size = [1, 2]
					}
					{
						File = "floor_33.png"
						Size = [1, 2]
					}
					{
						File = "floor_66.png"
						Size = [1, 2]
					}
				]
			}
			OperationalDoodad
			{
				Layer = "doodads_low"
				DamageLevels
				[
					{
						AnimationFiles
						[
							"on.png"
							"on2.png"
							"on3.png"
							"on4.png"
							"on5.png"
						    "on6.png"
						    "on7.png"
						    "on8.png"
						]
						Size = [1, 2]
						AnimationInterval = 0.100
					}
				]
			}
			NonOperationalDoodad
			{
				Layer = "doodads_low"
				DamageLevels
				[
					{
						File = "off.png"
						Size = [1, 2]
					}
				]
			}
			Walls
			{
				Layer = "walls"
				DamageLevels
				[
					{
						File = "walls.png"
						Size = [1, 2]
					}
				    {
						File = "walls_33.png"
						Size = [1, 2]
					}
				    {
						File = "walls_66.png"
						Size = [1, 2]
					}
				]
			}
			Roof
			{
				Layer = "roofs"
				DamageLevels
				[
					{
						File = "roof.png"
						NormalsFile = "roof_normals.png"
						Size = [1, 2]
					}
					{
						File = "roof_33.png"
						NormalsFile = "roof_normals_33.png"
						Size = [1, 2]
					}
					{
						File = "roof_66.png"
						NormalsFile = "roof_normals_66.png"
						Size = [1, 2]
					}
				]
			}
			OperationalRoofWindows
			{
				Layer = "roof_windows"
				DamageLevels
				[
					{
						File = "Cockpit Window.png"
						Size = [1, 2]
					}
				    {
						File = "Cockpit Window_33.png"
						Size = [1, 2]
					}
				    {
						File = "Cockpit Window_66.png"
						Size = [1, 2]
					}
				]
			}
			NonOperationalRoofWindows = &OperationalRoofWindows
		}
		BatterySprites
		{
			Type = ResourceSprites
			Location = [.5, 1]
			ResourceStorage = BatteryStorage
			Layer = "doodads_high"
			HasZeroResourceSprite = false
			ResourceLevels
			[
				{
					File = "batteries_1.png"
					Size = [1, 2]
				}
				{
					File = "batteries_2.png"
					Size = [1, 2]
				}
			]
		}
		OperationEffects
		{
			Type = ToggleEffects
			Toggle = IsOperational,
			Location = [1, 1]
			ToggledOnMediaEffects = &/COMMON_EFFECTS/PowerOn
			ToggledOffMediaEffects = &/COMMON_EFFECTS/PowerOff
		}
		DestroyedEffects
		{
			Type = DeathEffects
			MediaEffects = &/COMMON_EFFECTS/MedPartDestroyed
			Location = [1, 1]
		}
		OperationSoundLoop
		{
			Type = ContinuousEffects
			Location = [1, 1]
			OperationalToggle = IsOperational
			MediaEffects
			[
				: /BASE_SOUNDS/AudioInterior
				{
					Sound = "./Data/ships/terran/control_room_small/operating.wav"
					Volume = .15
					MaxConcurrentVolume = .3
					Speed = .75
					MaxConcurrent = 1
				}
			]
		}

		// Indicators - Start
		Indicators
		{
			Type = IndicatorSprites
			Location = [.5, 1]
			Layer = "indicators"
			Indicators
			[
				// Turned off.
				{
					Toggle = PowerToggle
					AtlasSprite
					{
						File = &/INDICATORS/PowerOff
						Size = [1, 1]
					}
				}
				// Out of power.
				{
					Toggle = BatteryStorage
					AtlasSprite
					{
						File = &/INDICATORS/NoPower
						Size = [.75, .75]
					}
				}

				// No crew.
				{
					Toggle = PartCrew
					AtlasSprite
					{
						File = &/INDICATORS/NoCrew
						Size = [.75, .75]
					}
				}
			]
		}
// Indicators - End

		// Extinguisher Graphics - Start
		ExtinguisherSprite
		{
			Type = ResourceSprites
			Location = [.5, 1.2]
			ResourceStorage = ExtinguisherStorage
			Layer = "doodads_high"
			HasZeroResourceSprite = false
			ResourceLevels
			[
				{
					File = "../extinguisher.png"
					Size = [1, 1]
				}
			]
		}
		// Extinguisher Graphics - End

		Blueprints
		{
			Type = BlueprintSprite
			File = "blueprints.png"
			Size = [1, 2]
		}

	}
	Stats
	{
		CrewRequired = &~/Part/Components/PartCrew/Crew
		PowerUsageContinuousMinutes = (&~/Part/Components/PowerDrain/FromQuantity) / (&~/Part/Components/PowerDrain/Interval) / 1000 * 60
		PowerCapacity = (&~/Part/Components/BatteryStorage/MaxResources) / 1000
		SightRange = &~/Part/Components/Sensor/SightRadius
		RadarRange = &~/Part/Components/Sensor/RadarRadius

		RecPower = (&PowerUsageContinuousMinutes) / 60
		RecCrew = (&CrewRequired) + (&RecPower) * 4
	}
}
