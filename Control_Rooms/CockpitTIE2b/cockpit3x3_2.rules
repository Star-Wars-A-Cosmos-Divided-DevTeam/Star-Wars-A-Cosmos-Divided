/* ----------------------------------------------------------------------------

Introduction: SW:ACD 0.3.7

Author : Lafiel
Description:
Currently prototyping: may need to adjust weapons and thruster force

needs walls sprites and lights

Versions:

 o 1.0 Cosmoteer 0.15.14

---------------------------------------------------------------------------- */ 
Part : &<./Data/ships/terran/base_part_terran.rules>/Part
{
	NameKey = "Parts/Cockpit2_2"
	IconNameKey = "Parts/Cockpit2_2Icon"
	ID = SW.tie_cockpit2b
	EditorGroup = "SWTIE"
	DescriptionKey = "Parts/Cockpit2_2Desc"
	Resources
	[
		[tristeel, 52]
		[coil2, 32]
		[processor, 2]
	]  //52*200+32*300+2*2500=25000  //Cost = 25000
	AIValueFactor = 5

	Size = [3, 3]
	SelectionPriority = 0

	Density = 0.77
	MaxHealth = 9200 //(37572/4096)*1000=9172.8515625
	InitialPenetrationResistance = 2
	IsContiguityOrigin = true
	IsShipForward = true
	SelectionTypeID = "control_room"
	TypeCategories = [command,weapon, provides_power, uses_power, thruster]

	ThrusterForce = 200
	ThrustIncreaseTime = 0
	ThrustRecoveryTime = 0
	FuelUsage = 75
	ProhibitTop = 1
	ProhibitBelow = 3

	ReceivableBuffs : ^/0/ReceivableBuffs [Engine]

//uses turret collider
	GenerateRectCollider = false

	ExternalWalls = [None]
	InternalWalls = [All]
	IsWalled = false


//doors only to the sides
	AllowedDoorLocations
	[
		[-1,1]
		[3,1]
	]
//comes with 3 crew member

	RequiresCategories = []
	EditorIcon
	{
		Texture
		{
			File = "icon2.png"
			SampleMode = Linear
		}
		Size = [69, 92]
	}
	Components
	{
		TurretCollider
		{
			Type = CircleCollider
			Location = [1.5,1.5]
			Radius = 1.7
			Density = 0
		}

		CrewSource
		{
			Type = CrewSource
			Crew = 3
			IdleRect = [1.45, 1.45, 0.1, 0.1]
			ColorSRange = [0, 0.25]
			ColorVRange = [0.5, 0.75]
		}
		CommandProvider
		{
			Type = CommandProvider
			OperationalToggle = IsOperational
			CommandPoints = 50 // Remember to update tooltip.
		}

		PowerToggle
		{
			Type = UIToggle
			ToggleID = "on_off"
			Default = 1
			RequiresCommand = false
		}
		IsOperational
		{
			Type = MultiToggle
			Toggles = [PowerToggle, PartCrew]
			Mode = All
		}
		WeaponIsOperational
		{
			Type = MultiToggle
			Toggles = [PowerToggle, WeaponAmmoPrereq, PartCrew]
			Mode = All
		}
		ThrusterIsOperational
		{
			Type = MultiToggle
			Toggles = [PowerToggle, ThrusterAmmoPrereq, PartCrew]
			Mode = All
		}
/*
		CommandAmmoPrereq //always available
		{
			Type = MultiResourceStorage
			ResourceType = battery
			ResourceStorages = [BatteryStorage]
			//ToggleOnResources = 1001  // 6-7 batteries for use
			//ToggleOffResources = 1000
		}
*/
		WeaponAmmoPrereq
		{
			Type = MultiResourceStorage
			ResourceType = battery
			ResourceStorages = [BatteryStorage]
			ToggleOnResources = 4001  // 3 batteries for use
			ToggleOffResources = 3000
		}
		ThrusterAmmoPrereq //always available
		{
			Type = MultiResourceStorage
			ResourceType = battery
			ResourceStorages = [BatteryStorage]
			ToggleOnResources = 2001
			ToggleOffResources = 1000
		}
		FireModeToggle
		{
			Type = UIToggle
			ToggleID = "fire_mode"
			Default = 1
			ToggledOnChoices = [0, 1, 2]
		}
		AutoTargetToggle
		{
			Type = ModeToggle
			Mode = FireModeToggle
			OnModes = [1, 2]
		}
		AutoFireToggle
		{
			Type = ModeToggle
			Mode = FireModeToggle
			OnMode = 2
		}


		Sensor
		{
			Type = Sensor
//lower radius
			SightRadius = 300
			RadarRadius = ceil(300*4.5)

		}

		BatteryStorage
		{
			Type = ResourceStorage
			ResourceType = battery
			MaxResources = 6000
			StartingAmmo = &MaxResources
			SuppliesAmmo = true
			ToggleOnResources = 4001
			ToggleOffResources = 4000
			MaxResourcesPickUp = 1000
			ExpectedAmmoGenerationRate = (&../BatteryProducer/ToQuantity) / (&../BatteryProducer/Interval)
		}
		BatteryProducer
		{
			Type = ResourceConverter
			ToStorage = BatteryStorage
			ToQuantity = 600
			Interval = .6666
		}

		PowerDrain
		{
			Type = ResourceConverter
			FromStorage = BatteryStorage
			FromQuantity = 1000
//uses less power
			Interval = 80// Drains 1,5 power every minute.
		}

		CrewLocation
		{
			Type = CrewLocation
			Location = [1.5, 0.775]
			Rotation = 180d
		}
		PartCrew
		{
			Type = PartCrew
			Crew = 1
			DefaultPriority = &/PRIORITIES/ControlRoom_Crew
			PrerequisitesBeforeCrewing = [PowerToggle]
			HighPriorityPrerequisites = []
			AbandonWhenOnFire = false
			CrewDestinations
			[
				[1.5, 1]
			]
			CrewLocations
			[
				CrewLocation
			]
		}

		Graphics
		{
			Type = Graphics
			OperationalToggle = IsOperational,
			Location = [1.5, 1.5]
			Floor
			{
				Layer = "floors"
				DamageLevels
				[
					{
						File = "floor.png"
						Size = [3, 4]
					}
/*
					{
						File = "floor_33.png"
						Size = [3, 4]
					}
					{
						File = "floor_66.png"
						Size = [3, 4]
					}
*/
				]
			}
			OperationalDoodad
			{
				Layer = "doodads_low"
				Offset = [0, -1]
				DamageLevels
				[
					{
						AnimationFiles
						[
							"on.png"
							"on2.png"
							"on3.png"
							"on4.png"
							"on5.png"
						    "on6.png"
						    "on7.png"
						    "on8.png"
						]
						Size = [1, 2]
						AnimationInterval = 0.100
					}
				]
			}
			NonOperationalDoodad
			{
				Layer = "doodads_low"
				Offset = [0, -1]
				DamageLevels
				[
					{
						File = "off.png"
						Size = [1, 2]
					}
				]
			}
/*
			Walls
			{
				Layer = "walls"
				DamageLevels
				[
					{
						File = "walls.png"
						Size = [1, 2]
					}
				    {
						File = "walls_33.png"
						Size = [1, 2]
					}
				    {
						File = "walls_66.png"
						Size = [1, 2]
					}
				]
			}
*/
			Roof
			{
				Layer = "roofs"
				DamageLevels
				[
					{
						File = "roof.png"
						Size = [3, 4]
					}
/*
					{
						File = "Cockpit roof33.png"
						Size = [1, 2]
					}
					{
						File = "Cockpit roof66.png"
						Size = [1, 2]
					}
*/
				]
			}
/*
			OperationalRoofWindows
			{
				Layer = "roof_windows"
				DamageLevels
				[
					{
						File = "Cockpit Window.png"
						Size = [1, 2]
					}
				    {
						File = "Cockpit Window_33.png"
						Size = [1, 2]
					}
				    {
						File = "Cockpit Window_66.png"
						Size = [1, 2]
					}
				]
			}
			NonOperationalRoofWindows
			{
				Layer = "roof_windows"
				DamageLevels
				[
					{
						File = "Cockpit Window.png"
						Size = [1, 2]
					}
				]
			}
*/
		}
		ThrusterGraphics
		{
			Type = Graphics
			OperationalToggle = ThrusterIsOperational

			Location = [1.5, 1.5]
			OperationalDoodad
			{
				Layer = "doodads_high"
				Offset = [0, 84/64]
				DamageLevels
				[
					{
						AnimationFiles
						[
							"../../Thrusters/IonThruster01_1x1/doodads on1.png"
							"../../Thrusters/IonThruster01_1x1/doodads on2.png"
							"../../Thrusters/IonThruster01_1x1/doodads on3.png"
							"../../Thrusters/IonThruster01_1x1/doodads on4.png"
							"../../Thrusters/IonThruster01_1x1/doodads on5.png"
							"../../Thrusters/IonThruster01_1x1/doodads on6.png"
							"../../Thrusters/IonThruster01_1x1/doodads on7.png"
							"../../Thrusters/IonThruster01_1x1/doodads on8.png"
						]
						Size = [1, 1]
						AnimationInterval = 0.075
					}
				]
			}
			NonOperationalDoodad
			{
				Layer = "doodads_high"
				Offset = [0, 84/64]
				DamageLevels
				[
					{
						File = "../../Thrusters/IonThruster01_1x1/doodads off.png"
						Size = [1, 1]
					}
				]
			}
		}
		WeaponSprite
		{
			Type = Sprite
			ChainedTo = Turret
			Location = [-26/64, -1] //-64,-80
			Rotation = 90d
			Layer = "weapons"
			ResetAnimationTrigger = BulletEmitter
			AtlasSprite
			{
				AnimationFiles
				[
					"../../Weapons/FixedLightLaserCannon/weapon2.png"
					"../../Weapons/FixedLightLaserCannon/weapon.png"
				]
				Size = [1, 1]
				AnimationInterval = 0.01
				AnimationStartTime = MinValue
				ClampAnimation = true
			}
		}
		WeaponSprite2
		{
			Type = Sprite
			ChainedTo = Turret
			Location = [-26/64, 1]
			Rotation = 90d
			Layer = "weapons"
			ResetAnimationTrigger = BulletEmitter
			AtlasSprite
			{
				AnimationFiles
				[
					"../../Weapons/FixedLightLaserCannon/weapon2.png"
					"../../Weapons/FixedLightLaserCannon/weapon.png"
				]
				Size = [1, 1]
				MirrorU = true
				AnimationInterval = 0.01
				AnimationStartTime = MinValue
				ClampAnimation = true
			}
		}

		Turret
		{
			Type = TurretWeapon
			OperationalToggle = WeaponIsOperational
			AutoFireToggle = AutoFireToggle
			Location = [1.5, -0.15]
			Rotation = -90d
			FireInterval = .30
			FiringArc = 15d
			FireDelay = .04
			RotateSpeed = 90d
			FireThresholdAngle = 1d
			AIFirepowerRating = 500
			FirePermissionToggle = FireModeToggle
			Emitter = BulletEmitter

			AutoTargets
			[
				{
					TargetType = ShipParts
					Toggle = AutoTargetToggle
				}
			]

			BlueprintArcSprite
			{
				Texture = &/INDICATORS/WeaponArc
				Size = [0, 1.5]
				Color = [255, 0, 0, 63]
			}
			BlueprintArcRadius = 10
			BlueprintArcSpriteSegments = 64

			CoverageSectorArc
			{
				Texture = &/INDICATORS/VerticalGradient
				VertexColor = [255, 255, 255, 51]
				QuadCount = 64
			}
		}

		ReloadProgressBar
		{
			Type = ProgressBar
			OperationalToggle = WeaponIsOperational
			ShowProgressFor = Turret
		}

		BulletEmitter
		{
			Type = BulletEmitter
			ChainedTo = Turret
			FireTrigger = Turret
			GetTargetFrom = Turret
			Location = [24/64, -1]
			OperationalToggle = WeaponIsOperational
			Bullet = &/SW_SHOTS/greensmalllasershot
			ResourceStorage = BatteryStorage
			ResourcesUsed = 40
		}
		BulletEmitter2
		{
			Type = BulletEmitter
			ChainedTo = Turret
			FireTrigger = Turret
			GetTargetFrom = Turret
			Location = [24/64, 1]
			OperationalToggle = WeaponIsOperational
			Bullet = &/SW_SHOTS/greensmalllasershot
			ResourceStorage = BatteryStorage
			ResourcesUsed = 40
		}

		ChargeEffect
		{
			Type = TriggeredEffects
			ChainedTo = Turret
			Trigger = Turret
			Location = [0, 0]
			AnchorMediaEffects = true

			MediaEffects
			[
				&/SW_SOUNDS/SmallLaserCharge
			]
		}

		FireEffect
		{
			Type = TriggeredEffects
			ChainedTo = Turret
			Trigger = BulletEmitter
			Location = [10/64, -1]
			AnchorMediaEffects = true

			MediaEffects
			[
				&/SW_PARTICLES/Shot/Laser/Shoot/Small/Green
				
				&/SW_SOUNDS/TIELaser2D
			]
		}
		FireEffect2 : &FireEffect
		{
			Trigger = BulletEmitter2
			Location = [10/64, 1]
		}

		ForwardThruster
		{
			Type = Thruster
			OperationalToggle = ThrusterIsOperational
			Location = [1.5, 1.84375]// Relative to upper-left corner of unrotated part.
			Rotation = 90d// Relative to unrotated part.
			Force = &../../ThrusterForce
			MinActivation = 0
			MaxActivation = { BaseValue=1; BuffType=Engine; BuffMode=Multiply; }
			MinUncommandedActivation = 0
			MaxUncommandedActivation = &MaxActivation
			ActivationIncreaseTime = &../../ThrustIncreaseTime
			ActivationRecoveryTime = &../../ThrustRecoveryTime
			FuelStorage = BatteryStorage
			FuelUsagePerSecond = &../../FuelUsage
		}

		LateralThrustOfForwardThruster
		{
			Type = Thruster
			OperationalToggle = ThrusterIsOperational
			ChainedTo = ForwardThruster
			Rotation = 90d// Relative to main thruster.
			Force = &../../ThrusterForce
			MinActivation = { BaseValue=-0.25; BuffType=Engine; BuffMode=Multiply; }
			MaxActivation = { BaseValue=0.25; BuffType=Engine; BuffMode=Multiply; }
			MinUncommandedActivation = 0
			MaxUncommandedActivation = 0
			ActivationIncreaseTime = &../../ThrustIncreaseTime
			ActivationRecoveryTime = &../../ThrustRecoveryTime
			FuelStorage = BatteryStorage
			FuelUsagePerSecond = &../../FuelUsage
		}

		BackwardThruster
		{
			Type = Thruster
			OperationalToggle = ThrusterIsOperational
			Location = [0.5, 0]// Relative to upper-left corner of unrotated part.
			Rotation = -90d// Relative to unrotated part.
			Force = &../../ThrusterForce
			MinActivation = 0
			MaxActivation = { BaseValue=0.35; BuffType=Engine; BuffMode=Multiply; }
			MinUncommandedActivation = 0
			MaxUncommandedActivation = &MaxActivation
			ActivationIncreaseTime = &../../ThrustIncreaseTime
			ActivationRecoveryTime = &../../ThrustRecoveryTime
			FuelStorage = BatteryStorage
			FuelUsagePerSecond = &../../FuelUsage
		}

		LateralThrustOfBackwardThruster
		{
			Type = Thruster
			OperationalToggle = ThrusterIsOperational
			ChainedTo = BackwardThruster
			Rotation = 90d// Relative to main thruster.
			Force = &../../ThrusterForce
			MinActivation = { BaseValue=-0.25; BuffType=Engine; BuffMode=Multiply; }
			MaxActivation = { BaseValue=0.25; BuffType=Engine; BuffMode=Multiply; }
			MinUncommandedActivation = 0
			MaxUncommandedActivation = 0
			ActivationIncreaseTime = &../../ThrustIncreaseTime
			ActivationRecoveryTime = &../../ThrustRecoveryTime
			FuelStorage = BatteryStorage
			FuelUsagePerSecond = &../../FuelUsage
		}

		ThrustEffectsForward
		{
			Type = ContinuousEffects
			ChainedTo = ForwardThruster
			FactorMediaEffectsIntensityWith = ForwardThruster
			MediaEffects
			[
				//&<./Data/ships/terran/thruster_med/particles/thruster_trail_med.txt>
				//&<./Data/ships/terran/thruster_med/particles/thruster_glow_med.txt>

				&/SW_PARTICLES/IonThruster/Glow/Small/Red

				: /SW_SOUNDS/ThrusterRumble
				{
					Volume = .125
					Speed = 1.5
					MaxConcurrentVolume = .25
				}
			]
		}
		BurstTrigger
		{
			Type = ThresholdTrigger
			AmountFrom = ForwardThruster
			MinAmount = .5
		}

		BurstEffects
		{
			Type = TriggeredEffects
			ChainedTo = ForwardThruster
			Trigger = BurstTrigger
			FactorMediaEffectsIntensityWith = ForwardThruster
			AnchorMediaEffects = true
			MediaEffects
			[
				: /SW_SOUNDS/ThrusterBurst
				{
					Volume = .125
					Speed = 1.5
					MaxConcurrentVolume = .25
				}
			]
		}


		BatterySprites
		{
			Type = ResourceSprites
			Location = [1.5, 0.5]
			ResourceStorage = BatteryStorage
			Layer = "doodads_high"
			RangeLow = 0
			RangeHigh = 2000
			HasZeroResourceSprite = false
			ResourceLevels
			[
				{
					File = "batteries_1.png"
					Size = [1, 2]
				}
				{
					File = "batteries_2.png"
					Size = [1, 2]
				}
			]
		}
		ThrusterBatterySprites
		{
			Type = ResourceSprites
			Location = [1.5, 180/64]
			ResourceStorage = BatteryStorage
			Layer = "doodads_low"
			HasZeroResourceSprite = true
			ResourceLevels
			[
				{
					File = "../../Thrusters/IonThruster01_1x1/batteries_0.png"
					Size = [1, 1]
				}
				{
					File = "../../Thrusters/IonThruster01_1x1/batteries_1.png"
					Size = [1, 1]
				}
			]
		}

		OperationEffects
		{
			Type = ToggleEffects
			Toggle = IsOperational,
			Location = [1.5, 1.5]
			ToggledOnMediaEffects = &/COMMON_EFFECTS/PowerOn
			ToggledOffMediaEffects = &/COMMON_EFFECTS/PowerOff
		}

		DestroyedEffects
		{
			Type = DeathEffects
			MediaEffects = &/COMMON_EFFECTS/MedPartDestroyed
			Location = [1.5, 1.5]
		}

		OperationSoundLoop
		{
			Type = ContinuousEffects
			Location = [1.5, 1.5]
			OperationalToggle = IsOperational
			MediaEffects
			[
				: /BASE_SOUNDS/AudioInterior
				{
					Sound = "./Data/ships/terran/control_room_small/operating.wav"
					Volume = .15
					MaxConcurrentVolume = .3
					Speed = .75
					MaxConcurrent = 1
				}
			]
		}

		Indicators
		{
			Type = IndicatorSprites
			Location = [1.5, 1.5]
			Layer = "indicators"
			Indicators
			[
				// Turned off.
				{
					Toggle = PowerToggle
					AtlasSprite
					{
						File = &/INDICATORS/PowerOff
						Size = [1, 1]
					}
				}
				// Out of power.
				{
					Toggle = BatteryStorage
					AtlasSprite
					{
						File = &/INDICATORS/NoPower
						Size = [.75, .75]
					}
				}

				// No crew.
				{
					Toggle = PartCrew
					AtlasSprite
					{
						File = &/INDICATORS/NoCrew
						Size = [.75, .75]
					}
				}
			]
		}
		BlueprintSprite
		{
			Type=BlueprintSprite
			File = "blueprints2.png"
			Size = [3, 4]
		}
	}

	Stats
	{
		CrewRequired = &~/Part/Components/PartCrew/Crew
		PowerGeneration = (&~/Part/Components/BatteryProducer/ToQuantity) / (&~/Part/Components/BatteryProducer/Interval) / 1000
		PowerUsageContinuousMinutes = (&~/Part/Components/PowerDrain/FromQuantity) / (&~/Part/Components/PowerDrain/Interval) / 1000 * 60
		PowerCapacity = (&~/Part/Components/BatteryStorage/MaxResources) / 1000
		BatterySize = (&~/Part/Components/BatteryStorage/MaxResourcesPickUp) / 1000
		BatteryFillTime = 0

		SightRange = &~/Part/Components/Sensor/SightRadius
		RadarRange = &~/Part/Components/Sensor/RadarRadius
		
		RecPower = (&PowerUsageContinuousMinutes) / 60
		RecCrew = (&CrewRequired) + (&RecPower) * 4
	}
}

















