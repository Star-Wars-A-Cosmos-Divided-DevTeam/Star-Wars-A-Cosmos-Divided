Part : &<./Data/ships/terran/base_part_terran.rules>/Part
{
	NameKey = "Parts/CockpitARC"
	IconNameKey = "Parts/CockpitARCIcon"
	ID = SW.cockpitARC
//	OtherIDs = []
	EditorGroups = ["Flight", "TechI"]
	DescriptionKey = "Parts/CockpitARCDesc"
	Resources
	[
		[steel, 32]
		[coil2, 18]
		[processor, 1]
	]
	AIValueFactor = 5
	Size = [1, 2]
	SelectionPriority = 0
	MaxHealth = 3500
	InitialPenetrationResistance = 4
//	PenetrationRectType = Normal
//	IsContiguityOrigin = true
	ContiguityOriginPriority = 1
//	IsShipForward = true
	SelectionTypeID = "control_room"
	TypeCategories = [command, uses_power, is_crewed, fire_extinguisher, limit_2]
	MaxDoors = 3
	ReceivableBuffs : ^/0/ReceivableBuffs []
	AllowedDoorLocations
	[
		[1,1]
		[-1,1]
		[0,2]
	]
//	RequiresCategories = []
	EditorIcon
	{
		Texture
		{
			File = "icon.png"
			SampleMode = Linear
		}
		Size = [32, 64]
	}
	Components : ^/0/Components
	{
		IsOperational
		{
			Type = MultiToggle
			Toggles = [PowerToggle, BatteryStorage, PartCrew]
			Mode = All
		}

		PowerToggle
		{
			Type = UIToggle
			ToggleID = "on_off"
			Default = 1
			RequiresCommand = false
		}

		BatteryStorage
		{
			Type = ResourceStorage
			ResourceType = battery
			MaxResources = 2000
			ReceiveResourceMediaEffects = &/COMMON_EFFECTS/PowerDeliver
		}


		BatteryConsumer
		{
			Type = ResourceConsumer
			ResourceType = battery
			Storage = BatteryStorage
			DefaultPriority = &/PRIORITIES/ControlRoom_Supply
			ResupplyThreshold = 1000
			OperationalToggle = PowerToggle
			AllowNonContiguousCrewSearch = true
		}

		PowerDrain
		{
			Type = ResourceConverter
			OperationalToggle = IsOperational
			FromStorage = BatteryStorage
			FromQuantity = 1000				//uses less power
			MinFromQuantityForConversion = 1
			Interval = 80					// Drains 1.5 power every minute.
		}

		CommandProvider
		{
			Type = CommandProvider
			OperationalToggle = IsOperational
			CommandPoints = 55 // Remember to update tooltip.
		}

	/* ******* COCKPIT - FIRE EXTINGUISHER ******* */

	ExtinguisherStorage
	{
		Type = ResourceStorage
		ResourceType = fire_extinguisher
		MaxResources = &<./Data/resources/fire_extinguisher/fire_extinguisher.rules>/MaxPerNugget
		StartingResources = &MaxResources
		SuppliesResources = true
	}

	ExtinguisherProducer
	{
		Type = ResourceConverter
		OperationalToggle = ExtinguisherStorage
		InvertOperationalToggle = true
		ToStorage = ExtinguisherStorage
		ToQuantity = &<./Data/resources/fire_extinguisher/fire_extinguisher.rules>/MaxPerNugget
		Interval = 45
	}

	ProgressBar
	{
		Type = ProgressBar
		OperationalToggle = ExtinguisherProducer
		ShowProgressFor = ExtinguisherProducer
	}

	/* ******* COCKPIT - MANUVERING THRUSTERS (T/B/L/R) ******* */

	Thruster0
	{
		Type = Thruster
		Location = [0.5, 2] // Relative to upper-left corner of unrotated part.
		Rotation = 0d // Relative to unrotated part.
		OperationalToggle = IsOperational
		Force = 42
		MinActivation = 0
		MaxActivation = 1
		MinUncommandedActivation = 0
		MaxUncommandedActivation = &MaxActivation
		ActivationIncreaseTime = 0
		ActivationRecoveryTime = 0
	}

	Thruster1 : Thruster0 {	Rotation = 90d	}
	Thruster2 : Thruster0 {	Rotation = 180d }
	Thruster3 : Thruster0 {	Rotation = 270d	}

		Sensor
		{
			Type = Sensor				//lower radius
			SightRadius = 300
			RadarRadius = ceil(300*4.5)
		}

		CrewLocation
		{
			Type = CrewLocation
			Location = [.5, 1]
		}

		PartCrew
		{
			Type = PartCrew
			Crew = 1
			DefaultPriority = &/PRIORITIES/ControlRoom_Crew
			PrerequisitesBeforeCrewing = [PowerToggle]
			HighPriorityPrerequisites = [BatteryStorage]
			CrewDestinations
			[
				[.5, 1.33]
			]
			CrewLocations
			[
				CrewLocation
			]
		}

		Graphics
		{
			Type = Graphics
			Location = [.5,1]
			OperationalToggle = IsOperational
			Floor
			{
				Layer = "floors"
				DamageLevels
				[
					{
						File = "floor.png"
						Size = [1, 2]
					}
					{
						File = "floor_33.png"
						Size = [1, 2]
					}
					{
						File = "floor_66.png"
						Size = [1, 2]
					}
				]
			}
			OperationalDoodad
			{
				Layer = "doodads_low"
				DamageLevels
				[
					{
						AnimationFiles
						[
							"doodads_on1.png"
							"doodads_on2.png"
							"doodads_on3.png"
							"doodads_on4.png"
							"doodads_on5.png"
						]
						Size = [1, 2]
						AnimationInterval = 0.25
					}
					{
						AnimationFiles
						[
							"doodads_on1_33.png"
							"doodads_on2_33.png"
							"doodads_on3_33.png"
							"doodads_on4_33.png"
							"doodads_on5_33.png"
						]
						Size = [1, 2]
						AnimationInterval = 0.25
					}
					{
						AnimationFiles
						[
							"doodads_on1_66.png"
							"doodads_on2_66.png"
							"doodads_on3_66.png"
							"doodads_on4_66.png"
							"doodads_on5_66.png"
						]
						Size = [1, 2]
						AnimationInterval = 0.25
					}
				]
			}
			NonOperationalDoodad
			{
				Layer = "doodads_low"
				DamageLevels
				[
					{
						File = "doodads_off.png"
						Size = [1, 2]
					}
					{
						File = "doodads_off_33.png"
						Size = [1, 2]
					}
					{
						File = "doodads_off_66.png"
						Size = [1, 2]
					}					
				]
			}
			OperationalLighting
			{
				Layer = "lights_add"
				DamageLevels
				[
					{
						File = "lights.png"
						Size = [1, 2]
					}
				]
			}
			Walls
			{
				Layer = "walls"
				DamageLevels
				[
					{
						File = "walls.png"
						Size = [1, 2]
					}
				    {
						File = "walls_33.png"
						Size = [1, 2]
					}
				    {
						File = "walls_66.png"
						Size = [1, 2]
					}
				]
			}
			Roof
			{
				Layer = "roofs"
				DamageLevels
				[
					{
						File = "roof.png"
						NormalsFile = "roof_normals.png"
						Size = [1, 2]
					}
					{
						File = "roof_33.png"
						NormalsFile = "roof_normals.png"
						Size = [1, 2]
					}
					{
						File = "roof_66.png"
						NormalsFile = "roof_normals.png"
						Size = [1, 2]
					}
				]
			}
		}

		BatterySprites
		{
			Type = ResourceSprites
			Location = [.5, 1]
			ResourceStorage = BatteryStorage
			Layer = "doodads_high"
			ResourceLevels
			[
				{
					File = "batteries1.png"
					Size = [1, 2]
				}
				{
					File = "batteries2.png"
					Size = [1, 2]
				}
			]
		}

	ExtinguisherSprite
	{
		Type = ResourceSprites
		Location = [.5, 1.5]
		ResourceStorage = ExtinguisherStorage
		Layer = "doodads_high"
		HasZeroResourceSprite = false
		ResourceLevels
		[
			{
				File = "../extinguisher.png"
				Size = [1, 1]
			}
		]
	}

		RCSThruster
		{
			Type = Thruster
			OperationalToggle = IsOperational
			Location = [.5, 1]
			Rotation = 0d
			Force = 100
			MinActivation = -1
			MaxActivation = 1
			MinUncommandedActivation = &MinActivation
			MaxUncommandedActivation = &MaxActivation
			ActivationIncreaseTime = 1
			ActivationRecoveryTime = 1
			FuelStorage = BatteryStorage
			FuelUsagePerSecond = 5
			AllowAutoFire = false
		}

		OperationEffects
		{
			Type = ToggleEffects
			Location = [.5, 1]
			Toggle = IsOperational
			ToggledOnMediaEffects = &/COMMON_EFFECTS/PowerOn
			ToggledOffMediaEffects = &/COMMON_EFFECTS/PowerOff
		}

		DestroyedEffects
		{
			Type = DeathEffects
			MediaEffects = &/COMMON_EFFECTS/MedPartDestroyed
			Location = [.5, 1]
		}

		OperationSoundLoop
		{
			Type = ContinuousEffects
			Location = [.5, 1]
			OperationalToggle = IsOperational
			MediaEffects
			[
				: /BASE_SOUNDS/AudioInterior
				{
					Sound = "./Data/ships/terran/control_room_small/operating.wav"
					Volume = 0.15
					MaxConcurrentVolume = 0.3
					Speed = .75
					MaxConcurrent = 1
				}
			]
		}

		Indicators
		{
			Type = IndicatorSprites
			Location = [.5, 1]
			Layer = "indicators"
			Indicators
			[
				// Turned off.
				{
					Toggle = PowerToggle
					AtlasSprite
					{
						File = &/INDICATORS/PowerOff
						Size = [1, 1]
					}
				}

				// Out of power.
				{
					Toggle = BatteryStorage
					AtlasSprite
					{
						File = &/INDICATORS/NoPower
						Size = [1, 1]
					}
				}

				// No crew.
				{
					Toggle = PartCrew
					AtlasSprite
					{
						File = &/INDICATORS/NoCrew
						Size = [1, 1]
					}
				}
			]
		}

		Blueprints
		{
			Type = BlueprintSprite
			File = "blueprints.png"
			Size = [1, 2]
		}
	}

	Stats
	{
		CrewRequired = &~/Part/Components/PartCrew/Crew
		PowerUsageContinuousMinutes = (&~/Part/Components/PowerDrain/FromQuantity) / (&~/Part/Components/PowerDrain/Interval) / 1000 * 60
		PowerCapacity = (&~/Part/Components/BatteryStorage/MaxResources) / 1000
		SightRange = &~/Part/Components/Sensor/SightRadius
		RadarRange = &~/Part/Components/Sensor/RadarRadius

		RecPower = (&PowerUsageContinuousMinutes) / 60
		RecCrew = (&CrewRequired) + (&RecPower) * 4
	}
}
