Part : &<./Data/ships/terran/base_part_terran.rules>/Part
{
	NameKey = "Parts/HypermatterReactor4x4"
	IconNameKey = "Parts/HypermatterReactor4x4Icon"
	DescriptionKey = "Parts/HypermatterReactor4x4Desc"
	ID = SW.hypermatter_reactor_4x4
	//OtherIDs = []
	EditorGroups = ["Power", "TechIII"]
	Resources
	[
		[SW.durasteel, 128]
		[coil, 24]
		[coil2, 8]
		[processor, 2]
		[hyperium, 20]
		[enriched_uranium, 64]
	]
	AIValueFactor = 5
	Size = [4, 4]
	IsRotateable = false
	SelectionPriority = 0
	SelectionTypeID = "reactors"
	MaxHealth = 32000
	AutoDoorMaxPathLength = 5
	TypeCategories = [hypermatter_reactor, provides_power]
	ReceivableBuffs : ^/0/ReceivableBuffs []
	CreateUnderlyingWhenDestroyed = false
	IgnoreRotationForMirroredSelection = true
	EditorIcon
	{
		Texture
		{
			File = "icon.png"
			SampleMode = Linear
		}
		Size = [64, 64]
	}
	Components : ^/0/Components
	{
		HypermatterStorage
		{
			Type = ResourceStorage
			ResourceType = SW.hypermatter
			MaxResources = 16000
			StartingResources = 0
			SuppliesResources = true
			MinResourcesPickUp = 1000
			MaxResourcesPickUp = 3000
			ExpectedResourceGenerationRate = (&../HypermatterProducer/ToQuantity) / (&../HypermatterProducer/Interval)
			ToggleOnResources = 1000
			ToggleOffResources = (&ToggleOnResources) -1
		}
		HypermatterProducer
		{
			Type = ResourceConverter
			ToStorage = HypermatterStorage
			ToQuantity = 1000
			Interval = 1
		}
		HypermatterStorageBar
		{
			Type = ProgressBar
			ShowProgressFor = HypermatterStorage
			LowColor = [0, 32, 64]
			HighColor = [0, 250, 250]
			FullColor = [0, 255, 255]
		}

		Graphics
		{
			Type = Graphics
			Location = [2, 2]
			Floor
			{
				Layer = "floors"
				DamageLevels
				[
					{
						AnimationFiles
						[
							"floor_on1.png"
							"floor_on2.png"
							"floor_on3.png"
							"floor_on4.png"
							"floor_on5.png"
							"floor_on6.png"
							"floor_on7.png"
							"floor_on8.png"
						]
						Size = [4, 4]
						AnimationInterval = 0.095
					}
					{
						AnimationFiles
						[
							"floor_on1_33.png"
							"floor_on2_33.png"
							"floor_on3_33.png"
							"floor_on4_33.png"
							"floor_on5_33.png"
							"floor_on6_33.png"
							"floor_on7_33.png"
							"floor_on8_33.png"
						]
						Size = [4, 4]
						AnimationInterval = 0.095
					}
					{
						AnimationFiles
						[
							"floor_on1_66.png"
							"floor_on2_66.png"
							"floor_on3_66.png"
							"floor_on4_66.png"
							"floor_on5_66.png"
							"floor_on6_66.png"
							"floor_on7_66.png"
							"floor_on8_66.png"
						]
						Size = [4, 4]
						AnimationInterval = 0.095
					}
				]
			}
			OperationalDoodad
			{
				Layer = "doodads_high"
				DamageLevels
				[
					{
						File = "reactor.png"
						Size = [4, 4]
					}
					{
						File = "reactor_33.png"
						Size = [4, 4]
					}
					{
						File = "reactor_66.png"
						Size = [4, 4]
					}
				]
			}
			OperationalLighting
			{
				Layer = "lights_add"
				DamageLevels
				[
					{
						AnimationFiles
						[
							"lights1.png"
							"lights2.png"
							"lights3.png"
							"lights4.png"
							"lights5.png"
							"lights6.png"
							"lights7.png"
							"lights8.png"
						]
						Size = [4, 4]
						AnimationInterval = 0.075
					}
					{
						AnimationFiles
						[
							"lights1.png"
							"lights2.png"
							"lights3.png"
							"lights4.png"
							"lights5.png"
							"lights6.png"
							"lights7.png"
							"lights8.png"
						]
						Size = [4, 4]
						AnimationInterval = 0.075/1.75
					}
					{
						AnimationFiles
						[
							"lights1.png"
							"lights2.png"
							"lights3.png"
							"lights4.png"
							"lights5.png"
							"lights6.png"
							"lights7.png"
							"lights8.png"
						]
						Size = [4, 4]
						AnimationInterval = 0.075/2.5
					}
				]
			}
			Walls
			{
				Layer = "walls"
				DamageLevels
				[
					{
						File = "walls.png"
						Size = [4, 4]
					}
					{
						File = "walls_33.png"
						Size = [4, 4]
					}
					{
						File = "walls_66.png"
						Size = [4, 4]
					}
				]
			}
			Roof
			{
				Layer = "roofs"
				DamageLevels
				[
					{
						File = "roof.png"
						NormalsFile = "roof_normals.png"
						Size = [4, 4]
					}
					{
						File = "roof_33.png"
						NormalsFile = "roof_normals_33.png"
						Size = [4, 4]
					}
					{
						File = "roof_66.png"
						NormalsFile = "roof_normals_66.png"
						Size = [4, 4]
					}
				]
			}

			OperationalRoofLighting
			{
				Layer = "roof_lights_fancy"
				DamageLevels
				[
					{
						File = "./Data/ships/common/light_blob.png"
						Size = [10, 10]
						Z = 2.5 // Controls the "height" of the light for the purposes of normal mapping.
						VertexColor = [0, 240, 240]
					}
				]
			}
		}

		HypermatterHum
		{
			Type = ContinuousEffects
			Location = [2, 2]
			MediaEffects
			[
				: /BASE_SOUNDS/AudioInterior
				{
					Sound = "./Data/ships/terran/reactor_small/operating.wav"
					Volume = .5
					Speed = .75
					MaxConcurrent = 1
					DynamicVolume : ^/0/DynamicVolume
					{
						ExteriorVolume = .5
					}
				}
			]
		}

		HypermatterSprites
		{
			Type = ResourceSprites
			Location = [2, 2]
			ResourceStorage = HypermatterStorage
			Layer = "doodads_high"
			Round = Down
			ResourceLevels
			[
				{
					File = "batteries1.png"
					Offset = [0.505, 1]
					Size = [2, 2]
				}
				{
					File = "batteries2.png"
					Offset = [0.505, 1]
					Size = [2, 2]
				}
				{
					File = "batteries3.png"
					Size = [4, 4]
				}
				{
					File = "batteries4.png"
					Size = [4, 4]
				}
				{
					File = "batteries5.png"
					Size = [4, 4]
				}
				{
					File = "batteries6.png"
					Size = [4, 4]
				}
				{
					File = "batteries7.png"
					Size = [4, 4]
				}
				{
					File = "batteries8.png"
					Size = [4, 4]
				}
			]
		}

		DestroyedEffects
		{
			Type = DeathEffects
			Location = [2, 2]

			MediaEffects
			[
				&<./Data/ships/terran/reactor_small/particles/reactor_explode_small.rules>
				&<./Data/ships/terran/reactor_small/particles/reactor_explode_flash_small.rules>
				&<./Data/ships/terran/reactor_small/particles/reactor_shockwave_small.rules>
				&<./Data/common_effects/particles/explosions/med_part_explode_debris.rules>
				&<./Data/common_effects/particles/explosions/big_part_explode_smoke.rules>

				: /BASE_SOUNDS/AudioExterior
				{
					Sound = "./Data/ships/terran/reactor_small/destroyed.wav"
					Volume = 1
					SpeedVariation = .25
				}

				: /BASE_SHAKE
				{
					ShakeAmount = .25
					Duration = 2
				}
			]
/*
			HitEffects
			[
				{
					Type = ExplosiveDamage
					TotalDamage = 22500
					Radius = 2.1
					Delay = .05
					ExpandDuration = .1
					ExpandStartRadius = 1
					ExpandLoss = 100%
					FireChancePerNDamage = 20%
					ImpulsePerNDamage = 2.5
					NDamage = 250
					Filter
					{
						OperationalHealth = true
						StructuralHealth = false
						Friendlies = true
					}
				}
				{
					Type = ExplosiveDamage
					TotalDamage = 5000
					Radius = 1.4
					Delay = .05
					ExpandDuration = .05
					ExpandStartRadius = 0.4
					ExpandLoss = 100%
					ImpulsePerNDamage = 1
					NDamage = 200
					Filter
					{
						OperationalHealth = false
						StructuralHealth = true
						Friendlies = true
					}
				}
			]
*/
		}

		Indicators
		{
			Type = IndicatorSprites
			Location = [2, 2]
			Layer = "indicators"
			Indicators
			[
				// Out of power.
				{
					Toggle = HypermatterStorage
					AtlasSprite
					{
						File = &/INDICATORS/NoPower
						Size = [1, 1]
					}
				}
			]
		}

		Blueprints
		{
			Type = BlueprintSprite
			File = "blueprints.png"
			Size = [4, 4]
		}
	}

	Stats
	{
		HypermatterGeneration = (&~/Part/Components/HypermatterProducer/ToQuantity) / (&~/Part/Components/HypermatterProducer/Interval) / 1000
		HypermatterSize = (&~/Part/Components/HypermatterStorage/MaxResourcesPickUp) / 1000
		HypermatterFillTime = 0
		HypermatterCapacity = (&~/Part/Components/HypermatterStorage/MaxResources) / 1000
	}
}
