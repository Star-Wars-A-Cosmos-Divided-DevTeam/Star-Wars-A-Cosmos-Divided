Part : &<./Data/ships/terran/base_part_terran.rules>/Part
{
	//IDs
	ID = SW.reactor_large
	// OtherIDs = []

	//StringKeys
	NameKey = "Parts/SW_HeavyReactor"
	IconNameKey = "Parts/SW_HeavyReactorIcon"
	DescriptionKey = "Parts/SW_HeavyReactorDesc"

	//Groups&Categories
	EditorGroups = ["Power", "SWTechII", "SWTechIII"]
	TypeCategories = [reactor, provides_power, SW_Reactor_Large,SW_Tech_II, SW_Tech_III]
	//RequiresCategories = []

	//Resoures&Size&Health
	Resources
	[
		[SW.durasteel, 170]
		[coil, 232]
		[coil2, 164]
		[enriched_uranium, 32]
	]
	Size = [3, 3]
	MaxHealth = 12000 // Deliberately not increasing this for med/large reactors to make them extra-fragile.

	//Selections
	SelectionPriority = 0
	//SelectionTypeByRotation = true
	IgnoreRotationForMirroredSelection = true
	SelectionTypeID = "reactors"

	//PartSpecific
	AIValueFactor = 5
	IsRotateable = false
	AutoDoorMaxPathLength = 5
	CreateUnderlyingWhenDestroyed = false

	//ReceivableBuffs&Prohibits
	ReceivableBuffs : ^/0/ReceivableBuffs []
	BlockedTravelCells
	[
		[1, 1]
	]
	ForceManhattanPathInPart = true

	//Editor
	EditorIcon
	{
		Texture
		{
			File = "icon.png"
			SampleMode = Linear
		}
		Size = [64, 64]
	}

	//Components&Inheritance
	Components : ^/0/Components
	{
		IsOperational
		{
			Type = MultiToggle
			Toggles = [True]
			Mode = All
		}
		True
		{
			Type = StaticToggle
			ToggleOn = "true"
		}

		BatteryStorage
		{
			Type = ResourceStorage
			ResourceType = battery
			MaxResources = 30000
			StartingResources = &MaxResources
			SuppliesResources = true
			MinResourcesPickUp = 3000
			MaxResourcesPickUp = 3000
			InitPickUp = 2001
			PickUpRate = 1000 / 1.0
			ExpectedResourceGenerationRate = (&../BatteryProducer/ToQuantity) / (&../BatteryProducer/Interval)
			ToggleOnResources = 6001
			ToggleOffResources = (&ToggleOnResources)-1
		}
		BatteryProducer
		{
			Type = ResourceConverter
			ToStorage = BatteryStorage
			ToQuantity = 1000
			Interval = .2222 / 3
		}
		BatteryStorageBar
		{
			Type = ProgressBar
			OperationalToggle = IsOperational
			ShowProgressFor = BatteryStorage
			LowColor = [64, 64, 0]
			HighColor = [250, 250, 0]
			FullColor = [255, 255, 0]
		}

		Graphics
		{
			Type = Graphics
			Location = [1.5, 1.5]
			Floor
			{
				Layer = "floors"
				DamageLevels
				[
					{
						AnimationFiles
						[
							"floor_on1.png"
							"floor_on2.png"
							"floor_on3.png"
							"floor_on4.png"
							"floor_on5.png"
							"floor_on6.png"
							"floor_on7.png"
							"floor_on8.png"
						]
						Size = [3, 3]
						AnimationInterval = 0.095*(&~/Scale)
					}
					{
						AnimationFiles
						[
							"floor_on1_33.png"
							"floor_on2_33.png"
							"floor_on3_33.png"
							"floor_on4_33.png"
							"floor_on5_33.png"
							"floor_on6_33.png"
							"floor_on7_33.png"
							"floor_on8_33.png"
						]
						Size = [3, 3]
						AnimationInterval = 0.095*(&~/Scale)
					}
					{
						AnimationFiles
						[
							"floor_on1_66.png"
							"floor_on2_66.png"
							"floor_on3_66.png"
							"floor_on4_66.png"
							"floor_on5_66.png"
							"floor_on6_66.png"
							"floor_on7_66.png"
							"floor_on8_66.png"
						]
						Size = [3, 3]
						AnimationInterval = 0.095*(&~/Scale)
					}
				]
			}
			OperationalDoodad
			{
				Layer = "doodads_high"
				DamageLevels
				[
					{
						File = "reactor_on.png"
						Size = [2, 2]
					}
					{
						File = "reactor_on_33.png"
						Size = [2, 2]
					}
					{
						File = "reactor_on_66.png"
						Size = [2, 2]
					}
				]
			}
			NonOperationalDoodad
			{
				Layer = "doodads_high"
				DamageLevels
				[
					{
						File = "reactor_off.png"
						Size = [2, 2]
					}
					{
						File = "reactor_off_33.png"
						Size = [2, 2]
					}
					{
						File = "reactor_off_66.png"
						Size = [2, 2]
					}
				]
			}
			OperationalLighting
			{
				Layer = "lights_add"
				DamageLevels
				[
					{
						AnimationFiles
						[
							"lights1.png"
							"lights2.png"
							"lights3.png"
							"lights4.png"
							"lights5.png"
							"lights6.png"
							"lights7.png"
							"lights8.png"
						]
						Size = [3, 3]
						AnimationInterval = 0.065*(&~/Scale)
					}
					{
						AnimationFiles
						[
							"lights1.png"
							"lights2.png"
							"lights3.png"
							"lights4.png"
							"lights5.png"
							"lights6.png"
							"lights7.png"
							"lights8.png"
						]
						Size = [3, 3]
						AnimationInterval = 0.065/1.75*(&~/Scale)
					}
					{
						AnimationFiles
						[
							"lights1.png"
							"lights2.png"
							"lights3.png"
							"lights4.png"
							"lights5.png"
							"lights6.png"
							"lights7.png"
							"lights8.png"
						]
						Size = [3, 3]
						AnimationInterval = 0.065/2.5*(&~/Scale)
					}
				]
			}
			Walls
			{
				Layer = "walls"
				DamageLevels
				[
					{
						File = "walls.png"
						Size = [3, 3]
					}
					{
						File = "walls_33.png"
						Size = [3, 3]
					}
					{
						File = "walls_66.png"
						Size = [3, 3]
					}
				]
			}
			Roof
			{
				Layer = "roofs"
				DamageLevels
				[
					{
						File = "roof.png"
						NormalsFile = "roof_normals.png"
						Size = [3, 3]
					}
					{
						File = "roof_33.png"
						NormalsFile = "roof_normals_33.png"
						Size = [3, 3]
					}
					{
						File = "roof_66.png"
						NormalsFile = "roof_normals_66.png"
						Size = [3, 3]
					}
				]
			}
		}

		ReactorHum
		{
			Type = ContinuousEffects
			Location = [1.5, 1.5]
			OnlyWhenOperational = true
			MediaEffects
			[
				: /BASE_SOUNDS/AudioInterior
				{
					Sound = "./Data/ships/terran/reactor_small/operating.wav"
					Volume = .5
					Speed = .5
					MaxConcurrent = 1
					DynamicVolume : ^/0/DynamicVolume
					{
						ExteriorVolume = .5*(&~/Scale)
					}
				}
			]
		}

		BatterySprites
		{
			Type = ResourceSprites
			Location = [1.5, 1.5]
			ResourceStorage = BatteryStorage
			Layer = "doodads_high"
			Round = Down
			ResourceLevels
			[
				{
					File = "batteries1.png"
					Offset = [0.375, -1]
					Size = [1, 1]
				}
				{
					File = "batteries2.png"
					Offset = [0.5, -0.5]
					Size = [2, 2]
				}
				{
					File = "batteries3.png"
					Offset = [0.5, 0]
					Size = [2, 3]
				}
				{
					File = "batteries4.png"
					Offset = [0.5, 0]
					Size = [2, 3]
				}
				{
					File = "batteries5.png"
					Size = [3, 3]
				}
				{
					File = "batteries6.png"
					Size = [3, 3]
				}
				{
					File = "batteries7.png"
					Size = [3, 3]
				}
				{
					File = "batteries8.png"
					Size = [3, 3]
				}
			]
		}

		DestroyedEffects
		{
			Type = DeathEffects
			Location = [1.5, 1.5]

			MediaEffects
			[
				&<./Data/ships/terran/reactor_large/particles/reactor_explode_large.rules>
				&<./Data/ships/terran/reactor_large/particles/reactor_explode_flash_large.rules>
				&<./Data/ships/terran/reactor_large/particles/reactor_shockwave_large.rules>
				&<./Data/common_effects/particles/explosions/huge_part_explode_debris.rules>
				&<./Data/common_effects/particles/explosions/huge_part_explode_smoke.rules>

				: /BASE_SOUNDS/AudioExterior
				{
					Sound = "./Data/ships/terran/reactor_small/destroyed.wav"
					Volume = 2
					Speed = .5
					SpeedVariation = .25 * (&Speed)
				}

				: /BASE_SHAKE
				{
					ShakeAmount = .75
					Duration = 4
				}
			]

			HitEffects
			[
				{
					Type = ExplosiveDamage
					TotalDamage = 810000*(&~/Scale)
					Radius = 18
					Delay = .05
					ExpandDuration = .35
					ExpandStartRadius = 4
					ExpandLoss = 100%
					FireChancePerNDamage = 50%
					ImpulsePerNDamage = 10
					NDamage = 1000
					Filter
					{
						OperationalHealth = true
						StructuralHealth = false
						Friendlies = true
					}
				}
				{
					Type = ExplosiveDamage
					TotalDamage = 180000*(&~/Scale)
					Radius = 12
					Delay = .05
					ExpandDuration = .2
					ExpandStartRadius = 4
					ExpandLoss = 100%
					ImpulsePerNDamage = 5
					NDamage = 1000
					Filter
					{
						OperationalHealth = false
						StructuralHealth = true
						Friendlies = true
					}
				}
			]
		}

		Indicators
		{
			Type = IndicatorSprites
			Location = [1.5, 1.5]
			Layer = "indicators"
			Indicators
			[
				// Out of power.
				{
					Toggle = BatteryStorage
					AtlasSprite
					{
						File = &/INDICATORS/NoPower
						Size = [1, 1]
					}
				}
			]
		}

		Blueprints
		{
			Type = BlueprintSprite
			File = "blueprints.png"
			Size = [3, 3]
		}
	}

	Stats
	{
		PowerGeneration = (&~/Part/Components/BatteryProducer/ToQuantity) / (&~/Part/Components/BatteryProducer/Interval) / 1000
		BatterySize = (&~/Part/Components/BatteryStorage/MaxResourcesPickUp) / 1000
		BatteryFillTime = 1000 / (&~/Part/Components/BatteryStorage/PickUpRate)
		PowerCapacity = (&~/Part/Components/BatteryStorage/MaxResources) / 1000
	}
}
Size = Medium
Scale = (1/1)