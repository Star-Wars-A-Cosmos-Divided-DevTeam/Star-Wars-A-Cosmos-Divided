/* ----------------------------------------------------------------------------
Introduction: SW:ACD (2020 April)
Author : Lafiel
Description:
This part is the laser emitter. I must be connected to a DSlaser_director. 
Versions:
 o 1.0 Cosmoteer 0.15.8
   o based on ion-prism
---------------------------------------------------------------------------- */
Part : /BASE_PART
{
	NameKey = "Parts/DSLaserEmitter"
	IconNameKey = "Parts/DSLaserEmitterIcon"
	ID = SW.DSlaser_emitter
	EditorGroup = "TechII"
	DescriptionKey = "Parts/DSLaserEmitterDesc"
	Cost = 1000000
	AIValue = &Cost
	Size = [4, 5]
	SelectionPriority = 1
	SelectionTypeByRotation = true
	MaxHealth = 20000
	TypeCategories = [weapon, weapon_using_power, deathstarlaser_emitter, ion, ion_beam_emitter]
	RequiresCategories = [DSL_command, power_cell]
	ReceivableBuffs = [DSLReverseOperation,DSLaserBuff]

	AllowedDoorLocations
	[
		[-1, 4]
		[2, 4]
		[0, 5]
		[1, 5]
	]
	EditorIcon
	{
		Texture
		{
			File = "icon.png"
			SampleMode = Linear
		}
		Size = [74, 92]
	}
	Components : ^/0/Components
	{
		ShotDamageBuffProvider
		{
			Type = SelfBuffProvider
			BuffType = DSLaserBuff
			BuffAmount = { BaseValue=1; BuffType=DSLaserBuff; BuffMode=Multiply; }
		}

		BuffOperational
		{
			Type = MultiToggle
			Toggles = [PowerToggle, PartCrew]
			Mode = All
		}
		IsOperational
		{
			Type = MultiToggle
			Toggles = [BuffOperational, DSLReverseOperationBuffToggle]
			Mode = All
		}

		PowerToggle
		{
			Type = UIToggle
			ToggleID = "on_off"
			Default = 1
		}


		DSLReverseOperationBuffToggle
		{
			Type = BuffToggle
			BuffType = DSLReverseOperation
		}

		FireModeToggle
		{
			Type = UIToggle
			ToggleID = "fire_mode"
			Default = 1
		}
		AutoFireToggle
		{
			Type = ModeToggle
			Mode = FireModeToggle
			OnMode = 2
		}

		BatteryStorage
		{
			Type = AmmoStorage
			AmmoType = battery
			MaxAmmo = 8000
		}
		BatteryConsumer
		{
			Type = AmmoConsumer
			AmmoType = battery
			Storage = BatteryStorage
			DefaultPriority = &/PRIORITIES/Weapon_Supply
			ResupplyThreshold = 500
			OperationalToggle = PowerToggle
			ReceiveAmmoMediaEffects = &/COMMON_EFFECTS/PowerDeliver
		}
		OperationBuffProvider
		{
			Type = AreaBuffProvider
			BuffType = DSLOperation
			BuffArea = [0, -1, 4, 1]
			OperationalToggle = BuffOperational
			Criteria
			{
				Rot = 0
				//Left = 0
				//Right = 2
				//Bottom = 0
			}
		}
		Targetor
		{
			Type = UITargetor
			TargetorID = dsl_aim
			Weapons = [Weapon]
		}

		Weapon
		{
			Type = FixedWeapon
			Location = [2,-5]// Relative to upper-left corner of unrotated part.
			Rotation = -90d// Relative to unrotated part.
			OperationalToggle = IsOperational
			AutoFireToggle = AutoFireToggle
			FireInterval = .2
			AIFirepowerRating = 3000
			Emitter = BeamEmitter
			ChainFireToggleComponent = IonBeamChainToggle
			ProhibitTargetPartsFilter = &FriendlyPrismFilter // Don't force fire on friendly ion prisms!
			SuppressWholeShipTargetOverlaysForPartsFilter = &FriendlyPrismFilter
			SuppressShipWideExplicitTargetsWhenTargetingPartsFilter = &FriendlyPrismFilter
			SuppressDirectControlWhenTargetingPartsFilter = &FriendlyPrismFilter
			SuppressFirepowerEstimationWhenTargetingPartsFilter = &FriendlyPrismFilter
			AutoExplicitTargetPartsFilter = &FriendlyPrismFilter
			SaveSelfTargetPartCategories = [deathstarlaser_director]

			FriendlyPrismFilter
			{
				Enemies = false
				Junk = false
				OnlyPartCategories = [deathstarlaser_director]
			}

			AutoTarget
			{
				TargetType = ShipParts
				Toggle = FireModeToggle
			}
		}

		BeamEmitter : &/COMMON_SHOTS/DSLaserInternalBeamGreen/DSLaser_internal_beam_green
		{
			Type = BeamEmitter
			ChainedTo = Weapon
			FireTrigger = Weapon
			GetTargetFrom = Weapon
			OperationalToggle = IsOperational
			SourceShipCollisions = false  //roof shot
			AmmoStorage = BatteryStorage
			AmmoUsed = { BaseValue=250; BuffType=DSLaserBuff; BuffMode=Multiply; }
			MinAmmoUsed = 1

			BeamMediaEffects : ^/0/BeamMediaEffects
			[
				: /BASE_SOUNDS/AudioExterior
				{
					Sound = "./Data/shots/ion_beam/ion_beam_emit.wav"
					Volume = 1
					MaxConcurrent = 1
					MaxConcurrentVolume = 1
					RampUpTime = .25
					RampDownTime = .25
				}
			]
		}

		CrewLocation1
		{
			Type = CrewLocation
			Location = [.65, 4.4]
			Rotation = 180d
		}
		CrewLocation2
		{
			Type = CrewLocation
			Location = [1.35, 4.4]
			Rotation = 180d
		}
		PartCrew
		{
			Type = PartCrew
			Crew = 2
			DefaultPriority = &/PRIORITIES/Weapon_Crew
			PrerequisitesBeforeCrewing = [PowerToggle]
			HighPriorityPrerequisites = [BatteryStorage]
			CrewDestinations
			[
				[.65, 4.4]
				[1.35, 4.4]
			]
			CrewLocations
			[
				CrewLocation1
				CrewLocation2
			]
		}

/*
		Graphics
		{
			Type = Graphics
			Location = [1, 3]
			OperationalToggle = IsOperational
			DoodadToggle = BeamEmitter
			ShowToggledDoodadsWhenNotOperational = true
			Floor
			{
				Layer = "floors"
				DamageLevels
				[
					{
						File = "floor.png"
						Size = [2, 4]
					}
					{
						File = "floor_33.png"
						Size = [2, 4]
					}
					{
						File = "floor_66.png"
						Size = [2, 4]
					}
				]
			}
			ToggleOnDoodad
			{
				Layer = "weapons"
				DamageLevels
				[
					{
						AnimationFiles
						[
							"emitter_on1.png"
							"emitter_on2.png"
							"emitter_on3.png"
							"emitter_on4.png"
							"emitter_on5.png"
							"emitter_on6.png"
							"emitter_on7.png"
							"emitter_on8.png"
						]
						Size = [2, 2]
						Offset = [0, -2]
						AnimationInterval = 0.075
					}
				]
			}
			ToggleOffDoodad
			{
				Layer = "weapons"
				DamageLevels
				[
					{
						File = "emitter_off.png"
						Size = [2, 2]
						Offset = [0, -2]
					}
				]
			}
			OperationalDoodad
			{
				Layer = "doodads_high"
				DamageLevels
				[
					{
						AnimationFiles
						[
							"doodads_on1.png"
							"doodads_on2.png"
							"doodads_on3.png"
							"doodads_on4.png"
							"doodads_on5.png"
							"doodads_on6.png"
							"doodads_on7.png"
							"doodads_on8.png"
						]
						Size = [2, 5]
						Offset = [0, -0.5]
						AnimationInterval = 0.075
						AnimationStartTime = Zero
					}
				]
			}
			NonOperationalDoodad
			{
				Layer = "doodads_high"
				DamageLevels
				[
					{
						File = "doodads_off.png"
						Size = [2, 4]
					}
				]
			}
			OperationalLighting
			{
				Layer = "lights_add"
				DamageLevels
				[
					{
						File = "lights.png"
						Size = [2, 4]
					}
				]
			}
			Walls
			{
				Layer = "walls"
				DamageLevels
				[
					{
						File = "walls.png"
						Size = [2, 5]
						Offset = [0, -0.5]
					}
					{
						File = "walls_33.png"
						Size = [2, 5]
						Offset = [0, -0.5]
					}
					{
						File = "walls_66.png"
						Size = [2, 5]
						Offset = [0, -0.5]
					}
				]
			}
			Roof
			{
				Layer = "roofs"
				DamageLevels
				[
					{
						File = "roof.png"
						Size = [2, 5]
						Offset = [0, -0.5]
					}
					{
						File = "roof_33.png"
						Size = [2, 5]
						Offset = [0, -0.5]
					}
					{
						File = "roof_66.png"
						Size = [2, 5]
						Offset = [0, -0.5]
					}
				]
			}
			OperationalRoofDoodad
			{
				Layer = "roof_doodads"
				DamageLevels
				[
					{
						AnimationFiles
						[
							"roof_doodads_on1.png"
							"roof_doodads_on2.png"
							"roof_doodads_on3.png"
							"roof_doodads_on4.png"
							"roof_doodads_on5.png"
							"roof_doodads_on6.png"
							"roof_doodads_on7.png"
							"roof_doodads_on8.png"
						]
						Size = [2, 5]
						Offset = [0, -0.5]
						AnimationInterval = 0.075
					}
				]
			}
			OperationalRoofWindows
			{
				Layer = "roof_windows"
				Offset = [0, 1]
				DamageLevels
				[
					{
						File = "roof_windows_on.png"
						Size = [2, 2]
					}
					{
						File = "roof_windows_on_33.png"
						Size = [2, 2]
					}
					{
						File = "roof_windows_on_66.png"
						Size = [2, 2]
					}
				]
			}
			NonOperationalRoofWindows
			{
				Layer = "roof_windows"
				Offset = [0, 1]
				DamageLevels
				[
					{
						File = "roof_windows_off.png"
						Size = [2, 2]
					}
					{
						File = "roof_windows_off_33.png"
						Size = [2, 2]
					}
					{
						File = "roof_windows_off_66.png"
						Size = [2, 2]
					}
				]
			}
		}
/*
		OperatingHum
		{
			Type = ContinuousEffects
			Location = [1, 2.5]
			OperationalToggle = IsOperational
			MediaEffects
			[
				: /BASE_SOUNDS/AudioInterior
				{
					Sound = "./Data/ships/terran/ion_beam_emitter/operating.wav"
					Volume = .2
					Speed = 2
					MaxConcurrent = 1
					MaxConcurrentVolume = .2
				}
			]
		}
/*
		BatterySprites
		{
			Type = AmmoSprites
			Location = [1, 3]
			AmmoStorage = BatteryStorage
			Layer = "doodads_low"
			AmmoLevels
			[
				{
					File = "batteries1.png"
					Size = [2, 4]
				}
				{
					File = "batteries2.png"
					Size = [2, 4]
				}
				{
					File = "batteries3.png"
					Size = [2, 4]
				}
				{
					File = "batteries4.png"
					Size = [2, 4]
				}
				{
					File = "batteries5.png"
					Size = [2, 4]
				}
				{
					File = "batteries6.png"
					Size = [2, 4]
				}
				{
					File = "batteries7.png"
					Size = [2, 4]
				}
				{
					File = "batteries8.png"
					Size = [2, 4]
				}
			]
		}
*/
		OperationEffects
		{
			Type = ToggleEffects
			Location = [2, 2.5]
			Toggle = IsOperational
			ToggledOnMediaEffects = &/COMMON_EFFECTS/PowerOn
			ToggledOffMediaEffects = &/COMMON_EFFECTS/PowerOff
		}

		DestroyedEffects
		{
			Type = DeathEffects
			MediaEffects = &/COMMON_EFFECTS/BigPartDestroyed
			Location = [2, 2.75]
		}

		Indicators
		{
			Type = IndicatorSprites
			Location = [2, 3]
			Layer = "indicators"
			Indicators
			[
				// Turned off.
				{
					Toggle = PowerToggle
					AtlasSprite
					{
						File = &/INDICATORS/PowerOff
						Size = [1, 1]
					}
				}

				// Out of power.
				{
					Toggle = BatteryStorage
					AtlasSprite
					{
						File = &/INDICATORS/NoPower
						Size = [1.5, 1.5]
					}
				}

				// No crew.
				{
					Toggle = PartCrew
					AtlasSprite
					{
						File = &/INDICATORS/NoCrew
						Size = [1.5, 1.5]
					}
				}
			]
		}

		Blueprints
		{
			Type = BlueprintSprite
			File = "blueprints.png"
			Size = [4, 5]
		}
	}

	Stats
	{
		CrewRequired = &~/Part/Components/PartCrew/Crew
		PowerCapacity = (&~/Part/Components/BatteryStorage/MaxAmmo) / 1000

		RecPower = &../StatsByCategory/0/Stats/PowerUsageContinuous
		RecCrew = (&CrewRequired) + (&RecPower) * 4
	}

	StatsByCategory
	[
		{
			NameKey = "StatCategories/IonBeam"
			Stats
			{
			//	BaseDamage = &~/Part/Components/BeamEmitter/HitOperational/HitEffects/0/HitEffects/0/Damage
			//	DamagePerShotNear = (&BaseDamage) * (&~/Part/Components/BeamEmitter/HitEffectsScaleOverRange/0)
			//	DamagePerShotFar = (&BaseDamage) * (&~/Part/Components/BeamEmitter/HitEffectsScaleOverRange/1)
				HitInterval = &~/Part/Components/BeamEmitter/HitInterval
			//	DamageContinuousNear = (&DamagePerShotNear) / (&HitInterval)
			//	DamageContinuousFar = (&DamagePerShotFar) / (&HitInterval)
				Range = &~/Part/Components/BeamEmitter/Range
				Arc = 0
				ShotSpeed = Infinity
				PowerPerShot = (&~/Part/Components/BeamEmitter/AmmoUsed/BaseValue) / 1000
				PowerUsageContinuous = (&PowerPerShot) / (&~/Part/Components/Weapon/FireInterval)
			}
		}
	]

}
