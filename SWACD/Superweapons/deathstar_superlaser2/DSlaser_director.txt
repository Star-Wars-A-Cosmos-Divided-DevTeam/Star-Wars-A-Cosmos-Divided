/* ----------------------------------------------------------------------------
Introduction: SW:ACD (2020 April)
Author : Lafiel
Description:
This part is for re-directing the beam to another or as standalone weapon.
Versions:
 o 1.0 Cosmoteer 0.15.8
   o based on ion-prism
---------------------------------------------------------------------------- */
Part : /BASE_PART
{
	NameKey = "Parts/DSLaserDirector"
	IconNameKey = "Parts/DSLaserDirectorIcon"
	ID = SW.DSlaser_director
	SelectionTypeID = SW.DSlaser_director
	EditorGroup = "TechII"
	DescriptionKey = "Parts/DSLaserDirectorDesc"
	Cost = 5000
	AIValue = (&Cost)
	Size = [2, 2]
	SelectionPriority = 1
	MaxHealth = 2000
	TypeCategories = [weapon, deathstarlaser_director, ion, ion_beam_prism]
	RequiresCategories = [DSL_command]
	Flammable = false
	IsWalled = false
	CrewSpeedFactor = 0
	AllowedDoorLocations = []
	GeneratorRequiresDoor = false
	NoAutoDoors = true
	IsExternal = true
	ExternalWalls = [None]
	InternalWalls = [All]
	GenerateRectCollider = false
	CreatePartPerTileWhenGrabbed = structure
	EditorReplacementPartID = structure
	ReceivableBuffs = [DSLOperation,DSLaserBuff]

	EditorIcon
	{
		Texture
		{
			File = "icon.png"
			SampleMode = Linear
		}
		Size = [64, 64]
	}
	Components : ^/0/Components
	{
		DSLOperationBuffToggle
		{
			Type = BuffToggle
			BuffType = DSLOperation
		}


		PowerToggle
		{
			Type = UIToggle
			ToggleID = "on_off"
			Default = 1
		}
		CommandToggle
		{
			Type = CommandToggle
		}
		TurretToggle
		{
			Type = MultiToggle
			Toggles = [PowerToggle, CommandToggle]
			Mode = All
		}

		FireModeToggle
		{
			Type = UIToggle
			ToggleID = "fire_mode"
			Default = 1
		}
		AutoFireToggle
		{
			Type = ModeToggle
			Mode = FireModeToggle
			OnMode = 2
		}

		Collider
		{
			Type = CircleCollider
			Location = [1, 1]
			Radius = .7
			Density = 5
		}

		IonEnergy
		{
			Type = IonEnergyStorage
			AmmoType = ion_energy
			ReductionFactorPerBeam = 1.0
			ProvidedValuePerAmmo = 1/1000
			IsDrainable = true
		}

		BeamTrigger
		{
			Type = ToggleTrigger
			Toggle = IonEnergy
			TriggerWhenOn = true
			TriggerWhenOff = false
		}

		Targetor
		{
			Type = UITargetor
			TargetorID = dsl_aim
			Weapons = [Turret, IonBeamChainToggle]
		}

		Turret
		{
			Type = TurretWeapon
			Location = [1, 1] // Relative to upper-left corner of unrotated part.
			Rotation = -90d // Relative to unrotated part.
			OperationalToggle = TurretToggle
			FireInterval = 0.2
			FiringArc = 360d
			RotateSpeed = 10d
			FireThresholdAngle = 1d
			AIFirepowerRating = 0
			AddAIFirepowerRatingsWhenTargetedByPartCategories = [deathstarlaser_director]
			TargetingEmitter = BeamEmitter
			SuppressWholeShipTargetOverlaysForPartsFilter = &FriendlyPrismFilter
			SuppressWholeShipTargetOverlaysWhenTargetingShipRelativePoints = true
			SuppressShipWideExplicitTargetsWhenTargetingPartsFilter = &FriendlyPrismFilter
			SuppressShipWideExplicitTargetsWhenTargetingShipRelativePoints = true
			SuppressDirectControlWhenTargetingPartsFilter = &FriendlyPrismFilter
			SuppressDirectControlWhenTargetingShipRelativePoints = true
			SuppressFirepowerEstimationWhenTargetingPartsFilter = &FriendlyPrismFilter
			SaveSelfTargetPartCategories = [deathstarlaser_director]
			SaveShipRelativeTargets = true
			HoldTargetAfterCancel = 3.0

			FriendlyPrismFilter
			{
				Enemies = false
				Junk = false
				OnlyPartCategories = [deathstarlaser_director]
			}

			AutoTargets
			[
				{
					TargetType = ShipParts
					Toggle = FireModeToggle
				}
			]

			CoverageSectorArc
			{
				Texture = &/INDICATORS/VerticalGradient
				VertexColor = [255, 255, 255, 51]
				QuadCount = 64
			}
		}

		IonBeamChainToggle
		{
			Type = FixedWeapon
			ChainedTo = Turret
			OperationalToggle = PowerToggle
			AutoFireToggle = AutoFireToggle
			FireInterval = .2
			AIFirepowerRating = 0
			TargetingEmitter = BeamEmitter
			ChainFireToggleComponent = IonBeamChainToggle
			ProhibitTargetPartsFilter = &../Turret/FriendlyPrismFilter // Don't force fire on friendly ion prisms!
			ProhibitShipRelativePointTargets = true
			SuppressWholeShipTargetOverlaysForPartsFilter = &../Turret/FriendlyPrismFilter
			SuppressWholeShipTargetOverlaysWhenTargetingShipRelativePoints = true
			SuppressShipWideExplicitTargetsWhenTargetingPartsFilter = &../Turret/FriendlyPrismFilter
			SuppressShipWideExplicitTargetsWhenTargetingShipRelativePoints = true
			SuppressDirectControlWhenTargetingPartsFilter = &../Turret/FriendlyPrismFilter
			SuppressFirepowerEstimationWhenTargetingPartsFilter = &../Turret/FriendlyPrismFilter
			SuppressFirepowerEstimationWhenNotTargetingShipRelativePoints = true
			SaveSelfTargetPartCategories = [deathstarlaser_director]
			SaveShipRelativeTargets = true
			AddAIFirepowerRatingsWhenTargetedByPartCategories = [deathstarlaser_director]
			DefaultDirectControlBinding = 0

			AutoTarget
			{
				TargetType = ShipParts
				Toggle = FireModeToggle
			}
		}

		BeamEmitter : &/COMMON_SHOTS/SuperLaserBeamGreen/SuperLaser_beam_green
		{
			Type = BeamEmitter
			ChainedTo = Turret
			FireTrigger = BeamTrigger
			GetTargetFrom = Turret
			AmmoStorage = IonEnergy
			AmmoUsed = 1000
			MinAmmoUsed = 1
			FireDelay = &HitInterval // Needed to let multiple beams accumulate their energy.
			Duration = &HitInterval // Can't be longer than HitInterval or it can create positive feedback loops.
			EffectsScaleFactor = IonEnergy
			ValueScaleFactor = IonEnergy
			AmmoScaleFactor = IonEnergy
			UpdateScaleFactorsPerEmit = true
		}

		Graphics
		{
			Type = Graphics
			Location = [1, 1]
			Floor
			{
				Layer = "floors"
				DamageLevels
				[
					{
						File = "director_floor.png"
						Size = [2, 2]
					}
					{
						File = "director_floor.png"
						Size = [2, 2]
					}
					{
						File = "director_floor.png"
						Size = [2, 2]
					}
				]
			}
		}


		DestroyedEffects
		{
			Type = DeathEffects
			MediaEffects = &/COMMON_EFFECTS/MedPartDestroyed
			Location = [1, 1]
		}

		DestroyedEffectsHot
		{
			Type = DeathEffects
			Location = [1, 1]
			OperationalToggle = BeamEmitter
			
			FactorHitEffectsWith = BeamEmitter
			HitEffects
			[
				{
					Type = ExplosiveDamage
					TotalDamage = 45000
					Radius = 5
					Delay = .05
					FireChancePerNDamage = 50%
					ImpulsePerNDamage = 10
					NDamage = 1000
					Filter
					{
						OperationalHealth = true
						StructuralHealth = false
						Friendlies = true
					}
				}
				{
					Type = ExplosiveDamage
					TotalDamage = 10000
					Radius = 3
					Delay = .05
					ImpulsePerNDamage = 5
					NDamage = 1000
					Filter
					{
						OperationalHealth = false
						StructuralHealth = true
						Friendlies = true
					}
				}
			]
		}

		Indicators
		{
			Type = IndicatorSprites
			Location = [1, 1]
			Layer = "indicators"
			Indicators
			[
				// Turned off.
				{
					Toggle = PowerToggle
					AtlasSprite
					{
						File = &/INDICATORS/PowerOff
						Size = [1, 1]
					}
				}
			]
		}

		Blueprints
		{
			Type = BlueprintSprite
			File = "blueprints.png"
			Size = [2, 2]
		}
	}

	Stats
	{
		
	}

	StatsByCategory
	[
		{
			NameKey = "StatCategories/IonBeam"
			Stats
			{
				Range = &~/Part/Components/BeamEmitter/Range
				Arc = deg(&~/Part/Components/Turret/FiringArc)
				ShotSpeed = Infinity
				TurretSpeed = deg(&~/Part/Components/Turret/RotateSpeed)

				ReductionFactorPerBeam = &~/Part/Components/IonEnergy/ReductionFactorPerBeam
				BeamDamageFalloff
				[
					(1 - (&../ReductionFactorPerBeam)) * 100,
					"(&../ReductionFactorPerBeam)^0 * 100",
					"(&../ReductionFactorPerBeam)^1 * 100",
					"(&../ReductionFactorPerBeam)^2 * 100",
					"(&../ReductionFactorPerBeam)^3 * 100",
					"(&../ReductionFactorPerBeam)^4 * 100",
				]
			}
		}
	]
}
